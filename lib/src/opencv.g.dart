// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/04/15

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:opencv_dart/opencv_dart.dart')
library;

import 'dart:ffi' as ffi;

@ffi.Native<ffi.Void Function(AKAZEPtr)>()
external void AKAZE_Close(
  AKAZEPtr a,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<AKAZE>)>()
external ffi.Pointer<CvStatus> AKAZE_Create(
  ffi.Pointer<AKAZE> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(AKAZE, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> AKAZE_Detect(
  AKAZE a,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        AKAZE, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> AKAZE_DetectAndCompute(
  AKAZE a,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Int, ffi.Int, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> AdaptiveThreshold(
  Mat src,
  Mat dst,
  double maxValue,
  int adaptiveTyp,
  int typ,
  int blockSize,
  double c,
);

@ffi.Native<ffi.Void Function(AgastFeatureDetectorPtr)>()
external void AgastFeatureDetector_Close(
  AgastFeatureDetectorPtr a,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<AgastFeatureDetector>)>()
external ffi.Pointer<CvStatus> AgastFeatureDetector_Create(
  ffi.Pointer<AgastFeatureDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        AgastFeatureDetector, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> AgastFeatureDetector_Detect(
  AgastFeatureDetector a,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<ffi.Void Function(AlignMTBPtr)>()
external void AlignMTB_Close(
  AlignMTBPtr b,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<AlignMTB>)>()
external ffi.Pointer<CvStatus> AlignMTB_Create(
  ffi.Pointer<AlignMTB> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Bool, ffi.Pointer<AlignMTB>)>()
external ffi.Pointer<CvStatus> AlignMTB_CreateWithParams(
  int max_bits,
  int exclude_range,
  bool cut,
  ffi.Pointer<AlignMTB> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(AlignMTB, VecMat, ffi.Pointer<VecMat>)>()
external ffi.Pointer<CvStatus> AlignMTB_Process(
  AlignMTB b,
  VecMat src,
  ffi.Pointer<VecMat> dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> ApplyColorMap(
  Mat src,
  Mat dst,
  int colormap,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> ApplyCustomColorMap(
  Mat src,
  Mat dst,
  Mat colormap,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, ffi.Double, ffi.Bool, ffi.Pointer<VecPoint>)>()
external ffi.Pointer<CvStatus> ApproxPolyDP(
  VecPoint curve,
  double epsilon,
  bool closed,
  ffi.Pointer<VecPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, ffi.Bool, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> ArcLength(
  VecPoint curve,
  bool is_closed,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Point, Point, Scalar, ffi.Int, ffi.Int, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> ArrowedLine(
  Mat img,
  Point pt1,
  Point pt2,
  Scalar color,
  int thickness,
  int line_type,
  int shift,
  double tipLength,
);

@ffi.Native<ffi.Void Function(ArucoDetectorParametersPtr)>()
external void ArucoDetectorParameters_Close(
  ArucoDetectorParametersPtr ap,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ArucoDetectorParameters>)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_Create(
  ffi.Pointer<ArucoDetectorParameters> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_GetAdaptiveThreshConstant(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Float>)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagCriticalRad(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagDeglitch(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Float>)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagMaxLineFitMse(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagMaxNmaxima(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_GetAprilTagMinClusterPixels(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Float>)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagQuadDecimate(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Float>)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_GetAprilTagQuadSigma(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_GetCornerRefinementMaxIterations(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_GetCornerRefinementMethod(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_GetCornerRefinementMinAccuracy(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_GetCornerRefinementWinSize(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_GetDetectInvertedMarker(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_GetErrorCorrectionRate(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMarkerBorderBits(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_GetMaxMarkerPerimeterRate(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMinCornerDistanceRate(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMinDistanceToBorder(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMinMarkerDistanceRate(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_GetMinMarkerPerimeterRate(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_GetMinOtsuStdDev(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetectorParameters, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_GetPolygonalApproxAccuracyRate(
  ArucoDetectorParameters ap,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Double)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_SetAdaptiveThreshConstant(
  ArucoDetectorParameters ap,
  double adaptiveThreshConstant,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Int)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax(
  ArucoDetectorParameters ap,
  int adaptiveThreshWinSizeMax,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Int)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin(
  ArucoDetectorParameters ap,
  int adaptiveThreshWinSizeMin,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Int)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep(
  ArucoDetectorParameters ap,
  int adaptiveThreshWinSizeStep,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Float)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagCriticalRad(
  ArucoDetectorParameters ap,
  double aprilTagCriticalRad,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Int)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagDeglitch(
  ArucoDetectorParameters ap,
  int aprilTagDeglitch,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Float)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagMaxLineFitMse(
  ArucoDetectorParameters ap,
  double aprilTagMaxLineFitMse,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Int)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagMaxNmaxima(
  ArucoDetectorParameters ap,
  int aprilTagMaxNmaxima,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Int)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_SetAprilTagMinClusterPixels(
  ArucoDetectorParameters ap,
  int aprilTagMinClusterPixels,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Int)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff(
  ArucoDetectorParameters ap,
  int aprilTagMinWhiteBlackDiff,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Float)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagQuadDecimate(
  ArucoDetectorParameters ap,
  double aprilTagQuadDecimate,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Float)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_SetAprilTagQuadSigma(
  ArucoDetectorParameters ap,
  double aprilTagQuadSigma,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Int)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_SetCornerRefinementMaxIterations(
  ArucoDetectorParameters ap,
  int cornerRefinementMaxIterations,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Int)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_SetCornerRefinementMethod(
  ArucoDetectorParameters ap,
  int cornerRefinementMethod,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Double)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_SetCornerRefinementMinAccuracy(
  ArucoDetectorParameters ap,
  double cornerRefinementMinAccuracy,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Int)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_SetCornerRefinementWinSize(
  ArucoDetectorParameters ap,
  int cornerRefinementWinSize,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Bool)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_SetDetectInvertedMarker(
  ArucoDetectorParameters ap,
  bool detectInvertedMarker,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Double)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_SetErrorCorrectionRate(
  ArucoDetectorParameters ap,
  double errorCorrectionRate,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Int)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMarkerBorderBits(
  ArucoDetectorParameters ap,
  int markerBorderBits,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Double)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate(
  ArucoDetectorParameters ap,
  double maxErroneousBitsInBorderRate,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Double)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_SetMaxMarkerPerimeterRate(
  ArucoDetectorParameters ap,
  double maxMarkerPerimeterRate,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Double)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMinCornerDistanceRate(
  ArucoDetectorParameters ap,
  double minCornerDistanceRate,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Int)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMinDistanceToBorder(
  ArucoDetectorParameters ap,
  int minDistanceToBorder,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Double)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMinMarkerDistanceRate(
  ArucoDetectorParameters ap,
  double minMarkerDistanceRate,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Double)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_SetMinMarkerPerimeterRate(
  ArucoDetectorParameters ap,
  double minMarkerPerimeterRate,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Double)>()
external ffi.Pointer<CvStatus> ArucoDetectorParameters_SetMinOtsuStdDev(
  ArucoDetectorParameters ap,
  double minOtsuStdDev,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Double)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell(
  ArucoDetectorParameters ap,
  double perspectiveRemoveIgnoredMarginPerCell,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Int)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell(
  ArucoDetectorParameters ap,
  int perspectiveRemovePixelPerCell,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ArucoDetectorParameters, ffi.Double)>()
external ffi.Pointer<CvStatus>
    ArucoDetectorParameters_SetPolygonalApproxAccuracyRate(
  ArucoDetectorParameters ap,
  double polygonalApproxAccuracyRate,
);

@ffi.Native<ffi.Void Function(ArucoDetectorPtr)>()
external void ArucoDetector_Close(
  ArucoDetectorPtr ad,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDetector,
        Mat,
        ffi.Pointer<VecVecPoint2f>,
        ffi.Pointer<VecInt>,
        ffi.Pointer<VecVecPoint2f>)>()
external ffi.Pointer<CvStatus> ArucoDetector_DetectMarkers(
  ArucoDetector ad,
  Mat inputArr,
  ffi.Pointer<VecVecPoint2f> markerCorners,
  ffi.Pointer<VecInt> markerIds,
  ffi.Pointer<VecVecPoint2f> rejectedCandidates,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ArucoDetector>)>()
external ffi.Pointer<CvStatus> ArucoDetector_New(
  ffi.Pointer<ArucoDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ArucoDictionary, ArucoDetectorParameters, ffi.Pointer<ArucoDetector>)>()
external ffi.Pointer<CvStatus> ArucoDetector_NewWithParams(
  ArucoDictionary dictionary,
  ArucoDetectorParameters params,
  ffi.Pointer<ArucoDetector> rval,
);

@ffi.Native<ffi.Void Function(ArucoDictionaryPtr)>()
external void ArucoDictionary_Close(
  ArucoDictionaryPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, VecVecPoint2f, VecInt, Scalar)>()
external ffi.Pointer<CvStatus> ArucoDrawDetectedMarkers(
  Mat image,
  VecVecPoint2f markerCorners,
  VecInt markerIds,
  Scalar borderColor,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> ArucoGenerateImageMarker(
  int dictionaryId,
  int id,
  int sidePixels,
  Mat img,
  int borderBits,
);

@ffi.Native<ffi.Void Function(AsyncArrayPtr)>()
external void AsyncArray_Close(
  AsyncArrayPtr a,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(AsyncArray, Mat)>()
external ffi.Pointer<CvStatus> AsyncArray_Get(
  AsyncArray async_out,
  Mat out,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<AsyncArray>)>()
external ffi.Pointer<CvStatus> AsyncArray_New(
  ffi.Pointer<AsyncArray> rval,
);

@ffi.Native<ffi.Void Function(BFMatcherPtr)>()
external void BFMatcher_Close(
  BFMatcherPtr b,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<BFMatcher>)>()
external ffi.Pointer<CvStatus> BFMatcher_Create(
  ffi.Pointer<BFMatcher> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Bool, ffi.Pointer<BFMatcher>)>()
external ffi.Pointer<CvStatus> BFMatcher_CreateWithParams(
  int normType,
  bool crossCheck,
  ffi.Pointer<BFMatcher> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BFMatcher, Mat, Mat, ffi.Int, ffi.Pointer<VecVecDMatch>)>()
external ffi.Pointer<CvStatus> BFMatcher_KnnMatch(
  BFMatcher b,
  Mat query,
  Mat train,
  int k,
  ffi.Pointer<VecVecDMatch> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BFMatcher, Mat, Mat, ffi.Pointer<VecDMatch>)>()
external ffi.Pointer<CvStatus> BFMatcher_Match(
  BFMatcher b,
  Mat query,
  Mat train,
  ffi.Pointer<VecDMatch> rval,
);

@ffi.Native<ffi.Void Function(BRISKPtr)>()
external void BRISK_Close(
  BRISKPtr b,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<BRISK>)>()
external ffi.Pointer<CvStatus> BRISK_Create(
  ffi.Pointer<BRISK> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(BRISK, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> BRISK_Detect(
  BRISK b,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BRISK, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> BRISK_DetectAndCompute(
  BRISK b,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(BackgroundSubtractorKNN, Mat, Mat)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorKNN_Apply(
  BackgroundSubtractorKNN self,
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Void Function(BackgroundSubtractorKNNPtr)>()
external void BackgroundSubtractorKNN_Close(
  BackgroundSubtractorKNNPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<BackgroundSubtractorKNN>)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorKNN_Create(
  ffi.Pointer<BackgroundSubtractorKNN> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Double, ffi.Bool, ffi.Pointer<BackgroundSubtractorKNN>)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorKNN_CreateWithParams(
  int history,
  double dist2Threshold,
  bool detectShadows,
  ffi.Pointer<BackgroundSubtractorKNN> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(BackgroundSubtractorMOG2, Mat, Mat)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorMOG2_Apply(
  BackgroundSubtractorMOG2 self,
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Void Function(BackgroundSubtractorMOG2Ptr)>()
external void BackgroundSubtractorMOG2_Close(
  BackgroundSubtractorMOG2Ptr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<BackgroundSubtractorMOG2>)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorMOG2_Create(
  ffi.Pointer<BackgroundSubtractorMOG2> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Double, ffi.Bool, ffi.Pointer<BackgroundSubtractorMOG2>)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorMOG2_CreateWithParams(
  int history,
  double varThreshold,
  bool detectShadows,
  ffi.Pointer<BackgroundSubtractorMOG2> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Double, ffi.Double)>()
external ffi.Pointer<CvStatus> BilateralFilter(
  Mat src,
  Mat dst,
  int d,
  double sc,
  double ss,
);

@ffi.Native<ffi.Void Function(BlockMeanHashPtr)>()
external void BlockMeanHash_Close(
  BlockMeanHashPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BlockMeanHash, Mat, Mat, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> BlockMeanHash_Compare(
  BlockMeanHash self,
  Mat hashOne,
  Mat hashTwo,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(BlockMeanHash, Mat, Mat)>()
external ffi.Pointer<CvStatus> BlockMeanHash_Compute(
  BlockMeanHash self,
  Mat inputArr,
  Mat outputArr,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Pointer<BlockMeanHash>)>()
external ffi.Pointer<CvStatus> BlockMeanHash_Create(
  int mode,
  ffi.Pointer<BlockMeanHash> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(BlockMeanHash,
        ffi.Pointer<ffi.Pointer<ffi.Double>>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> BlockMeanHash_GetMean(
  BlockMeanHash self,
  ffi.Pointer<ffi.Pointer<ffi.Double>> rval,
  ffi.Pointer<ffi.Int> length,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(BlockMeanHash, ffi.Int)>()
external ffi.Pointer<CvStatus> BlockMeanHash_SetMode(
  BlockMeanHash self,
  int mode,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Size)>()
external ffi.Pointer<CvStatus> Blur(
  Mat src,
  Mat dst,
  Size ps,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<Rect>)>()
external ffi.Pointer<CvStatus> BoundingRect(
  VecPoint pts,
  ffi.Pointer<Rect> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Size)>()
external ffi.Pointer<CvStatus> BoxFilter(
  Mat src,
  Mat dst,
  int ddepth,
  Size ps,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<VecPoint2f>)>()
external ffi.Pointer<CvStatus> BoxPoints(
  RotatedRect rect,
  ffi.Pointer<VecPoint2f> boxPts,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE, Mat, Mat)>()
external ffi.Pointer<CvStatus> CLAHE_Apply(
  CLAHE c,
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Void Function(CLAHEPtr)>()
external void CLAHE_Close(
  CLAHEPtr c,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE)>()
external ffi.Pointer<CvStatus> CLAHE_CollectGarbage(
  CLAHE c,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<CLAHE>)>()
external ffi.Pointer<CvStatus> CLAHE_Create(
  ffi.Pointer<CLAHE> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Double, Size, ffi.Pointer<CLAHE>)>()
external ffi.Pointer<CvStatus> CLAHE_CreateWithParams(
  double clipLimit,
  Size tileGridSize,
  ffi.Pointer<CLAHE> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> CLAHE_GetClipLimit(
  CLAHE c,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE, ffi.Pointer<Size>)>()
external ffi.Pointer<CvStatus> CLAHE_GetTilesGridSize(
  CLAHE c,
  ffi.Pointer<Size> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE, ffi.Double)>()
external ffi.Pointer<CvStatus> CLAHE_SetClipLimit(
  CLAHE c,
  double clipLimit,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE, Size)>()
external ffi.Pointer<CvStatus> CLAHE_SetTilesGridSize(
  CLAHE c,
  Size size,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecMat, VecInt, Mat, Mat, VecFloat, ffi.Bool)>()
external ffi.Pointer<CvStatus> CalcBackProject(
  VecMat mats,
  VecInt chans,
  Mat hist,
  Mat backProject,
  VecFloat rng,
  bool uniform,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecMat, VecInt, Mat, Mat, VecInt, VecFloat, ffi.Bool)>()
external ffi.Pointer<CvStatus> CalcHist(
  VecMat mats,
  VecInt chans,
  Mat mask,
  Mat hist,
  VecInt sz,
  VecFloat rng,
  bool acc,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Double, ffi.Int, ffi.Int,
        ffi.Int, ffi.Int, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> CalcOpticalFlowFarneback(
  Mat prevImg,
  Mat nextImg,
  Mat flow,
  double pyrScale,
  int levels,
  int winsize,
  int iterations,
  int polyN,
  double polySigma,
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, VecPoint2f, VecPoint2f, VecUChar, VecFloat)>()
external ffi.Pointer<CvStatus> CalcOpticalFlowPyrLK(
  Mat prevImg,
  Mat nextImg,
  VecPoint2f prevPts,
  VecPoint2f nextPts,
  VecUChar status,
  VecFloat err,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat,
        Mat,
        VecPoint2f,
        VecPoint2f,
        ffi.Pointer<VecUChar>,
        ffi.Pointer<VecFloat>,
        Size,
        ffi.Int,
        TermCriteria,
        ffi.Int,
        ffi.Double)>()
external ffi.Pointer<CvStatus> CalcOpticalFlowPyrLKWithParams(
  Mat prevImg,
  Mat nextImg,
  VecPoint2f prevPts,
  VecPoint2f nextPts,
  ffi.Pointer<VecUChar> status,
  ffi.Pointer<VecFloat> err,
  Size winSize,
  int maxLevel,
  TermCriteria criteria,
  int flags,
  double minEigThreshold,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecVecPoint3f, VecVecPoint2f, Size, Mat, Mat,
        Mat, Mat, ffi.Int, TermCriteria, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> CalibrateCamera(
  VecVecPoint3f objectPoints,
  VecVecPoint2f imagePoints,
  Size imageSize,
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat rvecs,
  Mat tvecs,
  int flag,
  TermCriteria criteria,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Bool)>()
external ffi.Pointer<CvStatus> Canny(
  Mat src,
  Mat edges,
  double t1,
  double t2,
  int apertureSize,
  bool l2gradient,
);

@ffi.Native<ffi.Void Function(CascadeClassifierPtr)>()
external void CascadeClassifier_Close(
  CascadeClassifierPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        CascadeClassifier, Mat, ffi.Pointer<VecRect>)>()
external ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScale(
  CascadeClassifier self,
  Mat img,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, ffi.Pointer<VecRect>,
        ffi.Pointer<VecInt>, ffi.Double, ffi.Int, ffi.Int, Size, Size)>()
external ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScale2(
  CascadeClassifier self,
  Mat img,
  ffi.Pointer<VecRect> objects,
  ffi.Pointer<VecInt> numDetections,
  double scaleFactor,
  int minNeighbors,
  int flags,
  Size minSize,
  Size maxSize,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        CascadeClassifier,
        Mat,
        ffi.Pointer<VecRect>,
        ffi.Pointer<VecInt>,
        ffi.Pointer<VecDouble>,
        ffi.Double,
        ffi.Int,
        ffi.Int,
        Size,
        Size,
        ffi.Bool)>()
external ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScale3(
  CascadeClassifier self,
  Mat img,
  ffi.Pointer<VecRect> objects,
  ffi.Pointer<VecInt> rejectLevels,
  ffi.Pointer<VecDouble> levelWeights,
  double scaleFactor,
  int minNeighbors,
  int flags,
  Size minSize,
  Size maxSize,
  bool outputRejectLevels,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, ffi.Pointer<VecRect>,
        ffi.Double, ffi.Int, ffi.Int, Size, Size)>()
external ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScaleWithParams(
  CascadeClassifier self,
  Mat img,
  ffi.Pointer<VecRect> objects,
  double scale,
  int minNeighbors,
  int flags,
  Size minSize,
  Size maxSize,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> CascadeClassifier_Empty(
  CascadeClassifier self,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        CascadeClassifier, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> CascadeClassifier_Load(
  CascadeClassifier self,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<CascadeClassifier>)>()
external ffi.Pointer<CvStatus> CascadeClassifier_New(
  ffi.Pointer<CascadeClassifier> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<CascadeClassifier>)>()
external ffi.Pointer<CvStatus> CascadeClassifier_NewFromFile(
  ffi.Pointer<ffi.Char> filename,
  ffi.Pointer<CascadeClassifier> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> CascadeClassifier_getFeatureType(
  CascadeClassifier self,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, ffi.Pointer<Size>)>()
external ffi.Pointer<CvStatus> CascadeClassifier_getOriginalWindowSize(
  CascadeClassifier self,
  ffi.Pointer<Size> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> CascadeClassifier_isOldFormatCascade(
  CascadeClassifier self,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Point, ffi.Int, Scalar, ffi.Int)>()
external ffi.Pointer<CvStatus> Circle(
  Mat img,
  Point center,
  int radius,
  Scalar color,
  int thickness,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Point, ffi.Int, Scalar, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> CircleWithParams(
  Mat img,
  Point center,
  int radius,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Rect, Point, Point, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> ClipLine(
  Rect imgRect,
  Point pt1,
  Point pt2,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Float)>()
external ffi.Pointer<CvStatus> ColorChange(
  Mat src,
  Mat mask,
  Mat dst,
  double red_mul,
  double green_mul,
  double blue_mul,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> CompareHist(
  Mat hist1,
  Mat hist2,
  int method,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> ConnectedComponents(
  Mat src,
  Mat dst,
  int connectivity,
  int ltype,
  int ccltype,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> ConnectedComponentsWithStats(
  Mat src,
  Mat labels,
  Mat stats,
  Mat centroids,
  int connectivity,
  int ltype,
  int ccltype,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> ContourArea(
  VecPoint pts,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, Mat, ffi.Bool, ffi.Bool)>()
external ffi.Pointer<CvStatus> ConvexHull(
  VecPoint points,
  Mat hull,
  bool clockwise,
  bool returnPoints,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, Mat, Mat)>()
external ffi.Pointer<CvStatus> ConvexityDefects(
  VecPoint points,
  Mat hull,
  Mat result,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, VecPoint2f, Size, Size, TermCriteria)>()
external ffi.Pointer<CvStatus> CornerSubPix(
  Mat img,
  VecPoint2f corners,
  Size winSize,
  Size zeroZone,
  TermCriteria criteria,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<CvStatus>)>()
external void CvStatus_Close(
  ffi.Pointer<CvStatus> self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> CvtColor(
  Mat src,
  Mat dst,
  int code,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Float, ffi.Float)>()
external ffi.Pointer<CvStatus> DetailEnhance(
  Mat src,
  Mat dst,
  double sigma_s,
  double sigma_r,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Dilate(
  Mat src,
  Mat dst,
  Mat kernel,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Point, ffi.Int, ffi.Int, Scalar)>()
external ffi.Pointer<CvStatus> DilateWithParams(
  Mat src,
  Mat dst,
  Mat kernel,
  Point anchor,
  int iterations,
  int borderType,
  Scalar borderValue,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> DistanceTransform(
  Mat src,
  Mat dst,
  Mat labels,
  int distanceType,
  int maskSize,
  int labelType,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Size, Mat, ffi.Bool)>()
external ffi.Pointer<CvStatus> DrawChessboardCorners(
  Mat image,
  Size patternSize,
  Mat corners,
  bool patternWasFound,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecVecPoint, ffi.Int, Scalar, ffi.Int)>()
external ffi.Pointer<CvStatus> DrawContours(
  Mat src,
  VecVecPoint contours,
  int contourIdx,
  Scalar color,
  int thickness,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, ffi.Int, Scalar, ffi.Int,
        ffi.Int, Mat, ffi.Int, Point)>()
external ffi.Pointer<CvStatus> DrawContoursWithParams(
  Mat src,
  VecVecPoint contours,
  int contourIdx,
  Scalar color,
  int thickness,
  int lineType,
  Mat hierarchy,
  int maxLevel,
  Point offset,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, VecKeyPoint, Mat, Scalar, ffi.Int)>()
external ffi.Pointer<CvStatus> DrawKeyPoints(
  Mat src,
  VecKeyPoint kp,
  Mat dst,
  Scalar color,
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, VecKeyPoint, Mat, VecKeyPoint,
        VecDMatch, Mat, Scalar, Scalar, VecChar, ffi.Int)>()
external ffi.Pointer<CvStatus> DrawMatches(
  Mat img1,
  VecKeyPoint kp1,
  Mat img2,
  VecKeyPoint kp2,
  VecDMatch matches1to2,
  Mat outImg,
  Scalar matchesColor,
  Scalar pointColor,
  VecChar matchesMask,
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Float, ffi.Float)>()
external ffi.Pointer<CvStatus> EdgePreservingFilter(
  Mat src,
  Mat dst,
  int filter,
  double sigma_s,
  double sigma_r,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Point, Point, ffi.Double, ffi.Double,
        ffi.Double, Scalar, ffi.Int)>()
external ffi.Pointer<CvStatus> Ellipse(
  Mat img,
  Point center,
  Point axes,
  double angle,
  double startAngle,
  double endAngle,
  Scalar color,
  int thickness,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Point, Point, ffi.Double, ffi.Double,
        ffi.Double, Scalar, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> EllipseWithParams(
  Mat img,
  Point center,
  Point axes,
  double angle,
  double startAngle,
  double endAngle,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> EqualizeHist(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Erode(
  Mat src,
  Mat dst,
  Mat kernel,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Point, ffi.Int, ffi.Int, Scalar)>()
external ffi.Pointer<CvStatus> ErodeWithParams(
  Mat src,
  Mat dst,
  Mat kernel,
  Point anchor,
  int iterations,
  int borderType,
  Scalar borderValue,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> EstimateAffine2D(
  VecPoint2f from,
  VecPoint2f to,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, Mat, ffi.Int,
        ffi.Double, ffi.Size, ffi.Double, ffi.Size, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> EstimateAffine2DWithParams(
  VecPoint2f from,
  VecPoint2f to,
  Mat inliers,
  int method,
  double ransacReprojThreshold,
  int maxIters,
  double confidence,
  int refineIters,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> EstimateAffinePartial2D(
  VecPoint2f from,
  VecPoint2f to,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, Mat, ffi.Int,
        ffi.Double, ffi.Size, ffi.Double, ffi.Size, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> EstimateAffinePartial2DWithParams(
  VecPoint2f from,
  VecPoint2f to,
  Mat inliers,
  int method,
  double ransacReprojThreshold,
  int maxIters,
  double confidence,
  int refineIters,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Eye(
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Void Function(FaceDetectorYNPtr)>()
external void FaceDetectorYN_Close(
  FaceDetectorYNPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(FaceDetectorYN, Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_Detect(
  FaceDetectorYN self,
  Mat img,
  ffi.Pointer<Mat> faces,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Pointer<Size>)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_GetInputSize(
  FaceDetectorYN self,
  ffi.Pointer<Size> input_size,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Pointer<ffi.Float>)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_GetNMSThreshold(
  FaceDetectorYN self,
  ffi.Pointer<ffi.Float> nms_threshold,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Pointer<ffi.Float>)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_GetScoreThreshold(
  FaceDetectorYN self,
  ffi.Pointer<ffi.Float> score_threshold,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_GetTopK(
  FaceDetectorYN self,
  ffi.Pointer<ffi.Int> top_k,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        Size,
        ffi.Float,
        ffi.Float,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<FaceDetectorYN>)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_New(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<ffi.Char> config,
  Size input_size,
  double score_threshold,
  double nms_threshold,
  int top_k,
  int backend_id,
  int target_id,
  ffi.Pointer<FaceDetectorYN> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>,
        VecUChar,
        VecUChar,
        Size,
        ffi.Float,
        ffi.Float,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<FaceDetectorYN>)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_NewFromBuffer(
  ffi.Pointer<ffi.Char> framework,
  VecUChar buffer,
  VecUChar buffer_config,
  Size input_size,
  double score_threshold,
  double nms_threshold,
  int top_k,
  int backend_id,
  int target_id,
  ffi.Pointer<FaceDetectorYN> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(FaceDetectorYN, Size)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_SetInputSize(
  FaceDetectorYN self,
  Size input_size,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Float)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_SetNMSThreshold(
  FaceDetectorYN self,
  double nms_threshold,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Float)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_SetScoreThreshold(
  FaceDetectorYN self,
  double score_threshold,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Int)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_SetTopK(
  FaceDetectorYN self,
  int top_k,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FaceRecognizerSF, Mat, Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> FaceRecognizerSF_AlignCrop(
  FaceRecognizerSF self,
  Mat src_img,
  Mat face_box,
  ffi.Pointer<Mat> aligned_img,
);

@ffi.Native<ffi.Void Function(FaceRecognizerSFPtr)>()
external void FaceRecognizerSF_Close(
  FaceRecognizerSFPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FaceRecognizerSF, Mat, ffi.Bool, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> FaceRecognizerSF_Feature(
  FaceRecognizerSF self,
  Mat aligned_img,
  bool clone,
  ffi.Pointer<Mat> face_feature,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FaceRecognizerSF, Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> FaceRecognizerSF_Match(
  FaceRecognizerSF self,
  Mat face_feature1,
  Mat face_feature2,
  int dis_type,
  ffi.Pointer<ffi.Double> distance,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Int, ffi.Int, ffi.Pointer<FaceRecognizerSF>)>()
external ffi.Pointer<CvStatus> FaceRecognizerSF_New(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<ffi.Char> config,
  int backend_id,
  int target_id,
  ffi.Pointer<FaceRecognizerSF> rval,
);

@ffi.Native<ffi.Void Function(FastFeatureDetectorPtr)>()
external void FastFeatureDetector_Close(
  FastFeatureDetectorPtr f,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<FastFeatureDetector>)>()
external ffi.Pointer<CvStatus> FastFeatureDetector_Create(
  ffi.Pointer<FastFeatureDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Bool, ffi.Int, ffi.Pointer<FastFeatureDetector>)>()
external ffi.Pointer<CvStatus> FastFeatureDetector_CreateWithParams(
  int threshold,
  bool nonmaxSuppression,
  int type,
  ffi.Pointer<FastFeatureDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FastFeatureDetector, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> FastFeatureDetector_Detect(
  FastFeatureDetector f,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoising(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoisingColored(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecMat, Mat, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoisingColoredMulti(
  VecMat src,
  Mat dst,
  int imgToDenoiseIndex,
  int temporalWindowSize,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecMat, Mat, ffi.Int, ffi.Int, ffi.Float,
        ffi.Float, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoisingColoredMultiWithParams(
  VecMat src,
  Mat dst,
  int imgToDenoiseIndex,
  int temporalWindowSize,
  double h,
  double hColor,
  int templateWindowSize,
  int searchWindowSize,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Float, ffi.Float, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoisingColoredWithParams(
  Mat src,
  Mat dst,
  double h,
  double hColor,
  int templateWindowSize,
  int searchWindowSize,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Float, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoisingWithParams(
  Mat src,
  Mat dst,
  double h,
  int templateWindowSize,
  int searchWindowSize,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, Scalar)>()
external ffi.Pointer<CvStatus> FillPoly(
  Mat img,
  VecVecPoint points,
  Scalar color,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecVecPoint, Scalar, ffi.Int, ffi.Int, Point)>()
external ffi.Pointer<CvStatus> FillPolyWithParams(
  Mat img,
  VecVecPoint points,
  Scalar color,
  int lineType,
  int shift,
  Point offset,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, Mat, Point, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> Filter2D(
  Mat src,
  Mat dst,
  int ddepth,
  Mat kernel,
  Point anchor,
  double delta,
  int borderType,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Size, Mat, ffi.Int, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> FindChessboardCorners(
  Mat image,
  Size patternSize,
  Mat corners,
  int flags,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Size, Mat, ffi.Int, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> FindChessboardCornersSB(
  Mat image,
  Size patternSize,
  Mat corners,
  int flags,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Size, Mat, ffi.Int, Mat, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> FindChessboardCornersSBWithMeta(
  Mat image,
  Size patternSize,
  Mat corners,
  int flags,
  Mat meta,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Int, ffi.Pointer<VecVecPoint>)>()
external ffi.Pointer<CvStatus> FindContours(
  Mat src,
  Mat hierarchy,
  int mode,
  int method,
  ffi.Pointer<VecVecPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Double, Mat, ffi.Int,
        ffi.Double, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> FindHomography(
  Mat src,
  Mat dst,
  int method,
  double ransacReprojThreshold,
  Mat mask,
  int maxIters,
  double confidence,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, TermCriteria, Mat,
        ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> FindTransformECC(
  Mat templateImage,
  Mat inputImage,
  Mat warpMatrix,
  int motionType,
  TermCriteria criteria,
  Mat inputMask,
  int gaussFiltSize,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Size, Mat, Mat, ffi.Double, Size, ffi.Double)>()
external ffi.Pointer<CvStatus>
    Fisheye_EstimateNewCameraMatrixForUndistortRectify(
  Mat k,
  Mat d,
  Size imgSize,
  Mat r,
  Mat p,
  double balance,
  Size newSize,
  double fovScale,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Fisheye_UndistortImage(
  Mat distorted,
  Mat undistorted,
  Mat k,
  Mat d,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, Mat, Size)>()
external ffi.Pointer<CvStatus> Fisheye_UndistortImageWithParams(
  Mat distorted,
  Mat undistorted,
  Mat k,
  Mat d,
  Mat knew,
  Size size,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Fisheye_UndistortPoints(
  Mat distorted,
  Mat undistorted,
  Mat k,
  Mat d,
  Mat R,
  Mat P,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<RotatedRect>)>()
external ffi.Pointer<CvStatus> FitEllipse(
  VecPoint pts,
  ffi.Pointer<RotatedRect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, Mat, ffi.Int, ffi.Double, ffi.Double, ffi.Double)>()
external ffi.Pointer<CvStatus> FitLine(
  VecPoint pts,
  Mat line,
  int distType,
  double param,
  double reps,
  double aeps,
);

@ffi.Native<ffi.Void Function(FlannBasedMatcherPtr)>()
external void FlannBasedMatcher_Close(
  FlannBasedMatcherPtr f,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<FlannBasedMatcher>)>()
external ffi.Pointer<CvStatus> FlannBasedMatcher_Create(
  ffi.Pointer<FlannBasedMatcher> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FlannBasedMatcher, Mat, Mat, ffi.Int, ffi.Pointer<VecVecDMatch>)>()
external ffi.Pointer<CvStatus> FlannBasedMatcher_KnnMatch(
  FlannBasedMatcher f,
  Mat query,
  Mat train,
  int k,
  ffi.Pointer<VecVecDMatch> rval,
);

@ffi.Native<ffi.Void Function(GFTTDetectorPtr)>()
external void GFTTDetector_Close(
  GFTTDetectorPtr a,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<GFTTDetector>)>()
external ffi.Pointer<CvStatus> GFTTDetector_Create(
  ffi.Pointer<GFTTDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        GFTTDetector, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> GFTTDetector_Detect(
  GFTTDetector a,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Size, ffi.Double, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> GaussianBlur(
  Mat src,
  Mat dst,
  Size ps,
  double sX,
  double sY,
  int bt,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, VecPoint, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> GetAffineTransform(
  VecPoint src,
  VecPoint dst,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> GetAffineTransform2f(
  VecPoint2f src,
  VecPoint2f dst,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Int64>)>()
external ffi.Pointer<CvStatus> GetCVTickCount(
  ffi.Pointer<ffi.Int64> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Double, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> GetGaussianKernel(
  int ksize,
  double sigma,
  int ktype,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> GetNumThreads(
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Size, ffi.Double, Size,
        ffi.Pointer<Rect>, ffi.Bool, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> GetOptimalNewCameraMatrixWithParams(
  Mat cameraMatrix,
  Mat distCoeffs,
  Size size,
  double alpha,
  Size newImgSize,
  ffi.Pointer<Rect> validPixROI,
  bool centerPrincipalPoint,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, VecPoint, ffi.Pointer<Mat>, ffi.Int)>()
external ffi.Pointer<CvStatus> GetPerspectiveTransform(
  VecPoint src,
  VecPoint dst,
  ffi.Pointer<Mat> rval,
  int solveMethod,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint2f, VecPoint2f, ffi.Pointer<Mat>, ffi.Int)>()
external ffi.Pointer<CvStatus> GetPerspectiveTransform2f(
  VecPoint2f src,
  VecPoint2f dst,
  ffi.Pointer<Mat> rval,
  int solveMethod,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Size, Point2f, Mat)>()
external ffi.Pointer<CvStatus> GetRectSubPix(
  Mat src,
  Size patchSize,
  Point2f center,
  Mat dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Point2f, ffi.Double, ffi.Double, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> GetRotationMatrix2D(
  Point2f center,
  double angle,
  double scale,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int, Size, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> GetStructuringElement(
  int shape,
  Size ksize,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Double,
        ffi.Int, ffi.Pointer<ffi.Int>, ffi.Pointer<Size>)>()
external ffi.Pointer<CvStatus> GetTextSizeWithBaseline(
  ffi.Pointer<ffi.Char> text,
  int fontFace,
  double fontScale,
  int thickness,
  ffi.Pointer<ffi.Int> baseline,
  ffi.Pointer<Size> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> GetTickFrequency(
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint2f>, ffi.Int,
        ffi.Double, ffi.Double, Mat, ffi.Int, ffi.Bool, ffi.Double)>()
external ffi.Pointer<CvStatus> GoodFeaturesToTrack(
  Mat img,
  ffi.Pointer<VecPoint2f> corners,
  int maxCorners,
  double quality,
  double minDist,
  Mat mask,
  int blockSize,
  bool useHarrisDetector,
  double k,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint2f>, ffi.Int,
        ffi.Double, ffi.Double, Mat, ffi.Int, ffi.Int, ffi.Bool, ffi.Double)>()
external ffi.Pointer<CvStatus> GoodFeaturesToTrackWithGradient(
  Mat img,
  ffi.Pointer<VecPoint2f> corners,
  int maxCorners,
  double quality,
  double minDist,
  Mat mask,
  int blockSize,
  int gradientSize,
  bool useHarrisDetector,
  double k,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Rect, Mat, Mat, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> GrabCut(
  Mat img,
  Mat mask,
  Rect rect,
  Mat bgdModel,
  Mat fgdModel,
  int iterCount,
  int mode,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecRect, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> GroupRectangles(
  VecRect rects,
  int groupThreshold,
  double eps,
);

@ffi.Native<ffi.Void Function(HOGDescriptorPtr)>()
external void HOGDescriptor_Close(
  HOGDescriptorPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecFloat>,
        Size, Size, ffi.Pointer<VecPoint>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_Compute(
  HOGDescriptor self,
  Mat img,
  ffi.Pointer<VecFloat> descriptors,
  Size winStride,
  Size padding,
  ffi.Pointer<VecPoint> locations,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        HOGDescriptor,
        Mat,
        ffi.Pointer<VecPoint>,
        ffi.Pointer<VecDouble>,
        ffi.Double,
        Size,
        Size,
        ffi.Pointer<VecPoint>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_Detect(
  HOGDescriptor self,
  Mat img,
  ffi.Pointer<VecPoint> foundLocations,
  ffi.Pointer<VecDouble> weights,
  double hitThresh,
  Size winStride,
  Size padding,
  ffi.Pointer<VecPoint> searchLocations,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecPoint>,
        ffi.Double, Size, Size, ffi.Pointer<VecPoint>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_Detect2(
  HOGDescriptor self,
  Mat img,
  ffi.Pointer<VecPoint> foundLocations,
  double hitThresh,
  Size winStride,
  Size padding,
  ffi.Pointer<VecPoint> searchLocations,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecRect>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_DetectMultiScale(
  HOGDescriptor self,
  Mat img,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Double, Size, Size,
        ffi.Double, ffi.Double, ffi.Bool, ffi.Pointer<VecRect>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_DetectMultiScaleWithParams(
  HOGDescriptor self,
  Mat img,
  double hitThresh,
  Size winStride,
  Size padding,
  double scale,
  double finalThreshold,
  bool useMeanshiftGrouping,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        HOGDescriptor, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_Load(
  HOGDescriptor self,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<HOGDescriptor>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_New(
  ffi.Pointer<HOGDescriptor> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<HOGDescriptor>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_NewFromFile(
  ffi.Pointer<ffi.Char> filename,
  ffi.Pointer<HOGDescriptor> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(HOGDescriptor, VecFloat)>()
external ffi.Pointer<CvStatus> HOGDescriptor_SetSVMDetector(
  HOGDescriptor self,
  VecFloat det,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, Mat, Mat, Size, Size)>()
external ffi.Pointer<CvStatus> HOGDescriptor_computeGradient(
  HOGDescriptor self,
  Mat img,
  Mat grad,
  Mat angleOfs,
  Size paddingTL,
  Size paddingBR,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecFloat>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_getDaimlerPeopleDetector(
  ffi.Pointer<VecFloat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, ffi.Pointer<ffi.Size>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_getDescriptorSize(
  HOGDescriptor self,
  ffi.Pointer<ffi.Size> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_getWinSigma(
  HOGDescriptor self,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        HOGDescriptor, VecRect, VecDouble, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> HOGDescriptor_groupRectangles(
  HOGDescriptor self,
  VecRect rectList,
  VecDouble weights,
  int groupThreshold,
  double eps,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecFloat>)>()
external ffi.Pointer<CvStatus> HOG_GetDefaultPeopleDetector(
  ffi.Pointer<VecFloat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Double, ffi.Double)>()
external ffi.Pointer<CvStatus> HoughCircles(
  Mat src,
  Mat circles,
  int method,
  double dp,
  double minDist,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Double, ffi.Double,
        ffi.Double, ffi.Double, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> HoughCirclesWithParams(
  Mat src,
  Mat circles,
  int method,
  double dp,
  double minDist,
  double param1,
  double param2,
  int minRadius,
  int maxRadius,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int,
        ffi.Double, ffi.Double, ffi.Double, ffi.Double)>()
external ffi.Pointer<CvStatus> HoughLines(
  Mat src,
  Mat lines,
  double rho,
  double theta,
  int threshold,
  double srn,
  double stn,
  double min_theta,
  double max_theta,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> HoughLinesP(
  Mat src,
  Mat lines,
  double rho,
  double theta,
  int threshold,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Double, ffi.Double)>()
external ffi.Pointer<CvStatus> HoughLinesPWithParams(
  Mat src,
  Mat lines,
  double rho,
  double theta,
  int threshold,
  double minLineLength,
  double maxLineGap,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Double,
        ffi.Double, ffi.Double, ffi.Double, ffi.Double, ffi.Double)>()
external ffi.Pointer<CvStatus> HoughLinesPointSet(
  Mat points,
  Mat lines,
  int lines_max,
  int threshold,
  double min_rho,
  double max_rho,
  double rho_step,
  double min_theta,
  double max_theta,
  double theta_step,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Float, ffi.Float)>()
external ffi.Pointer<CvStatus> IlluminationChange(
  Mat src,
  Mat mask,
  Mat dst,
  double alpha,
  double beta,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecUChar, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Image_IMDecode(
  VecUChar buf,
  int flags,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat,
        ffi.Pointer<ffi.Bool>, ffi.Pointer<VecUChar>)>()
external ffi.Pointer<CvStatus> Image_IMEncode(
  ffi.Pointer<ffi.Char> fileExt,
  Mat img,
  ffi.Pointer<ffi.Bool> success,
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat, VecInt,
        ffi.Pointer<ffi.Bool>, ffi.Pointer<VecUChar>)>()
external ffi.Pointer<CvStatus> Image_IMEncode_WithParams(
  ffi.Pointer<ffi.Char> fileExt,
  Mat img,
  VecInt params,
  ffi.Pointer<ffi.Bool> success,
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Image_IMRead(
  ffi.Pointer<ffi.Char> filename,
  int flags,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> Image_IMWrite(
  ffi.Pointer<ffi.Char> filename,
  Mat img,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, Mat, VecInt, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> Image_IMWrite_WithParams(
  ffi.Pointer<ffi.Char> filename,
  Mat img,
  VecInt params,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, Size, ffi.Int, Mat, Mat)>()
external ffi.Pointer<CvStatus> InitUndistortRectifyMap(
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat r,
  Mat newCameraMatrix,
  Size size,
  int m1type,
  Mat map1,
  Mat map2,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> Integral(
  Mat src,
  Mat sum,
  Mat sqsum,
  Mat tilted,
  int sdepth,
  int sqdepth,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> InvertAffineTransform(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Void Function(KAZEPtr)>()
external void KAZE_Close(
  KAZEPtr a,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<KAZE>)>()
external ffi.Pointer<CvStatus> KAZE_Create(
  ffi.Pointer<KAZE> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KAZE, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> KAZE_Detect(
  KAZE a,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        KAZE, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> KAZE_DetectAndCompute(
  KAZE a,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, Mat, TermCriteria, ffi.Int,
        ffi.Int, Mat, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> KMeans(
  Mat data,
  int k,
  Mat bestLabels,
  TermCriteria criteria,
  int attempts,
  int flags,
  Mat centers,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Int, Mat, TermCriteria,
        ffi.Int, ffi.Int, Mat, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> KMeansPoints(
  VecPoint2f pts,
  int k,
  Mat bestLabels,
  TermCriteria criteria,
  int attempts,
  int flags,
  Mat centers,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Void Function(KalmanFilterPtr)>()
external void KalmanFilter_Close(
  KalmanFilterPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_Correct(
  KalmanFilter self,
  Mat measurement,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetControlMatrix(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetErrorCovPost(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetErrorCovPre(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetGain(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetMeasurementMatrix(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetMeasurementNoiseCov(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetProcessNoiseCov(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetStatePost(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetStatePre(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTemp1(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTemp2(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTemp3(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTemp4(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTemp5(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTransitionMatrix(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> KalmanFilter_Init(
  KalmanFilter self,
  int dynamParams,
  int measureParams,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        KalmanFilter, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> KalmanFilter_InitWithParams(
  KalmanFilter self,
  int dynamParams,
  int measureParams,
  int controlParams,
  int type,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<KalmanFilter>)>()
external ffi.Pointer<CvStatus> KalmanFilter_New(
  int dynamParams,
  int measureParams,
  int controlParams,
  int type,
  ffi.Pointer<KalmanFilter> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_Predict(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_PredictWithParams(
  KalmanFilter self,
  Mat control,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetControlMatrix(
  KalmanFilter self,
  Mat controlMatrix,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetErrorCovPost(
  KalmanFilter self,
  Mat errorCovPost,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetErrorCovPre(
  KalmanFilter self,
  Mat errorCovPre,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetGain(
  KalmanFilter self,
  Mat gain,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetMeasurementMatrix(
  KalmanFilter self,
  Mat measurementMatrix,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetMeasurementNoiseCov(
  KalmanFilter self,
  Mat measurementNoiseCov,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetProcessNoiseCov(
  KalmanFilter self,
  Mat processNoiseCov,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetStatePost(
  KalmanFilter self,
  Mat statePost,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetStatePre(
  KalmanFilter self,
  Mat statePre,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetTransitionMatrix(
  KalmanFilter self,
  Mat transitionMatrix,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> LUT(
  Mat src,
  Mat lut,
  Mat dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Int, ffi.Double, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> Laplacian(
  Mat src,
  Mat dst,
  int dDepth,
  int kSize,
  double scale,
  double delta,
  int borderType,
);

@ffi.Native<ffi.Void Function(LayerPtr)>()
external void Layer_Close(
  LayerPtr layer,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Layer, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> Layer_GetName(
  Layer layer,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Layer, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> Layer_GetType(
  Layer layer,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Layer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Layer_InputNameToIndex(
  Layer layer,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Layer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Layer_OutputNameToIndex(
  Layer layer,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Point, Point, Scalar, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> Line(
  Mat img,
  Point pt1,
  Point pt2,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Point2f, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> LinearPolar(
  Mat src,
  Mat dst,
  Point2f center,
  double maxRadius,
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Point2f, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> LogPolar(
  Mat src,
  Mat dst,
  Point2f center,
  double m,
  int flags,
);

@ffi.Native<ffi.Void Function(MSERPtr)>()
external void MSER_Close(
  MSERPtr a,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<MSER>)>()
external ffi.Pointer<CvStatus> MSER_Create(
  ffi.Pointer<MSER> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(MSER, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> MSER_Detect(
  MSER a,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_AbsDiff(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Accumulate(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_AccumulateProduct(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_AccumulateProductWithMask(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_AccumulateSquare(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_AccumulateSquareWithMask(
  Mat src,
  Mat dst,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_AccumulateWithMask(
  Mat src,
  Mat dst,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double)>()
external ffi.Pointer<CvStatus> Mat_AccumulatedWeighted(
  Mat src,
  Mat dst,
  double alpha,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, Mat)>()
external ffi.Pointer<CvStatus> Mat_AccumulatedWeightedWithMask(
  Mat src,
  Mat dst,
  double alpha,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Add(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, double_t)>()
external ffi.Pointer<CvStatus> Mat_AddF64(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, float_t)>()
external ffi.Pointer<CvStatus> Mat_AddFloat(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>()
external ffi.Pointer<CvStatus> Mat_AddI32(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>()
external ffi.Pointer<CvStatus> Mat_AddSChar(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>()
external ffi.Pointer<CvStatus> Mat_AddUChar(
  Mat m,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Double, Mat, ffi.Double, ffi.Double, Mat)>()
external ffi.Pointer<CvStatus> Mat_AddWeighted(
  Mat src1,
  double alpha,
  Mat src2,
  double beta,
  double gamma,
  Mat dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, Mat, ffi.Int,
        ffi.Int, Mat, ffi.Int, ffi.Bool)>()
external ffi.Pointer<CvStatus> Mat_BatchDistance(
  Mat src1,
  Mat src2,
  Mat dist,
  int dtype,
  Mat nidx,
  int normType,
  int K,
  Mat mask,
  int update,
  bool crosscheck,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_BitwiseAnd(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_BitwiseAndWithMask(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_BitwiseNot(
  Mat src1,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_BitwiseNotWithMask(
  Mat src1,
  Mat dst,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_BitwiseOr(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_BitwiseOrWithMask(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_BitwiseXor(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_BitwiseXorWithMask(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_BorderInterpolate(
  int p,
  int len,
  int borderType,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_CalcCovarMatrix(
  Mat samples,
  Mat covar,
  Mat mean,
  int flags,
  int ctype,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Bool)>()
external ffi.Pointer<CvStatus> Mat_CartToPolar(
  Mat x,
  Mat y,
  Mat magnitude,
  Mat angle,
  bool angleInDegrees,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_Channels(
  Mat m,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Bool, ffi.Pointer<Point>,
        ffi.Double, ffi.Double, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> Mat_CheckRange(
  Mat m,
  bool quiet,
  ffi.Pointer<Point> pos,
  double minVal,
  double maxVal,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_Clone(
  Mat m,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Void Function(MatPtr)>()
external void Mat_Close(
  MatPtr m,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>()
external void Mat_CloseVoid(
  ffi.Pointer<ffi.Void> m,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_Cols(
  Mat m,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Compare(
  Mat src1,
  Mat src2,
  Mat dst,
  int ct,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Bool)>()
external ffi.Pointer<CvStatus> Mat_CompleteSymm(
  Mat m,
  bool lowerToUpper,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_ConvertFp16(
  Mat m,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double)>()
external ffi.Pointer<CvStatus> Mat_ConvertScaleAbs(
  Mat src,
  Mat dst,
  double alpha,
  double beta,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_ConvertTo(
  Mat m,
  Mat dst,
  int type,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Float, ffi.Float)>()
external ffi.Pointer<CvStatus> Mat_ConvertToWithParams(
  Mat m,
  Mat dst,
  int type,
  double alpha,
  double beta,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int, Scalar)>()
external ffi.Pointer<CvStatus> Mat_CopyMakeBorder(
  Mat src,
  Mat dst,
  int top,
  int bottom,
  int left,
  int right,
  int borderType,
  Scalar value,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_CopyTo(
  Mat m,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_CopyToWithMask(
  Mat m,
  Mat dst,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_CountNonZero(
  Mat src,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_DCT(
  Mat src,
  Mat dst,
  int flags,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_DFT(
  Mat m,
  Mat dst,
  int flags,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecUChar>)>()
external ffi.Pointer<CvStatus> Mat_Data(
  Mat m,
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<ffi.Pointer<uchar>>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_DataPtr(
  Mat m,
  ffi.Pointer<ffi.Pointer<uchar>> data,
  ffi.Pointer<ffi.Int> length,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Mat_Determinant(
  Mat m,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Divide(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, double_t)>()
external ffi.Pointer<CvStatus> Mat_DivideF64(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, float_t)>()
external ffi.Pointer<CvStatus> Mat_DivideFloat(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>()
external ffi.Pointer<CvStatus> Mat_DivideI32(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>()
external ffi.Pointer<CvStatus> Mat_DivideSChar(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>()
external ffi.Pointer<CvStatus> Mat_DivideUChar(
  Mat m,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> Mat_Eigen(
  Mat src,
  Mat eigenvalues,
  Mat eigenvectors,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_EigenNonSymmetric(
  Mat src,
  Mat eigenvalues,
  Mat eigenvectors,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_ElemSize(
  Mat m,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> Mat_Empty(
  Mat m,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Exp(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_ExtractChannel(
  Mat src,
  Mat dst,
  int coi,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_FindNonZero(
  Mat src,
  Mat idx,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Flip(
  Mat src,
  Mat dst,
  int flipCode,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_FromCMat(
  Mat m,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_FromPtr(
  Mat m,
  int rows,
  int cols,
  int type,
  int prows,
  int pcols,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, Mat, ffi.Double, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Gemm(
  Mat src1,
  Mat src2,
  double alpha,
  Mat src3,
  double beta,
  Mat dst,
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Mat_GetDouble(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Mat_GetDouble3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Float>)>()
external ffi.Pointer<CvStatus> Mat_GetFloat(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Float>)>()
external ffi.Pointer<CvStatus> Mat_GetFloat3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int32>)>()
external ffi.Pointer<CvStatus> Mat_GetInt(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Int32> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int32>)>()
external ffi.Pointer<CvStatus> Mat_GetInt3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Int32> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_GetOptimalDFTSize(
  int vecsize,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int8>)>()
external ffi.Pointer<CvStatus> Mat_GetSChar(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Int8> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int8>)>()
external ffi.Pointer<CvStatus> Mat_GetSChar3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Int8> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int16>)>()
external ffi.Pointer<CvStatus> Mat_GetShort(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Int16> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int16>)>()
external ffi.Pointer<CvStatus> Mat_GetShort3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Int16> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Uint8>)>()
external ffi.Pointer<CvStatus> Mat_GetUChar(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Uint8> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Uint8>)>()
external ffi.Pointer<CvStatus> Mat_GetUChar3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Uint8> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Uint16>)>()
external ffi.Pointer<CvStatus> Mat_GetUShort(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Uint16> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Uint16>)>()
external ffi.Pointer<CvStatus> Mat_GetUShort3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Uint16> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2b>)>()
external ffi.Pointer<CvStatus> Mat_GetVec2b(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2b> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2d>)>()
external ffi.Pointer<CvStatus> Mat_GetVec2d(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2d> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2f>)>()
external ffi.Pointer<CvStatus> Mat_GetVec2f(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2i>)>()
external ffi.Pointer<CvStatus> Mat_GetVec2i(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2i> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2s>)>()
external ffi.Pointer<CvStatus> Mat_GetVec2s(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2s> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2w>)>()
external ffi.Pointer<CvStatus> Mat_GetVec2w(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2w> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3b>)>()
external ffi.Pointer<CvStatus> Mat_GetVec3b(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3b> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3d>)>()
external ffi.Pointer<CvStatus> Mat_GetVec3d(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3d> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3f>)>()
external ffi.Pointer<CvStatus> Mat_GetVec3f(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3i>)>()
external ffi.Pointer<CvStatus> Mat_GetVec3i(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3i> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3s>)>()
external ffi.Pointer<CvStatus> Mat_GetVec3s(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3s> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3w>)>()
external ffi.Pointer<CvStatus> Mat_GetVec3w(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3w> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4b>)>()
external ffi.Pointer<CvStatus> Mat_GetVec4b(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4b> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4d>)>()
external ffi.Pointer<CvStatus> Mat_GetVec4d(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4d> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4f>)>()
external ffi.Pointer<CvStatus> Mat_GetVec4f(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4i>)>()
external ffi.Pointer<CvStatus> Mat_GetVec4i(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4i> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4s>)>()
external ffi.Pointer<CvStatus> Mat_GetVec4s(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4s> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4w>)>()
external ffi.Pointer<CvStatus> Mat_GetVec4w(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4w> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec6d>)>()
external ffi.Pointer<CvStatus> Mat_GetVec6d(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec6d> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec6f>)>()
external ffi.Pointer<CvStatus> Mat_GetVec6f(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec6f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec6i>)>()
external ffi.Pointer<CvStatus> Mat_GetVec6i(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec6i> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec8i>)>()
external ffi.Pointer<CvStatus> Mat_GetVec8i(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec8i> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Hconcat(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Idct(
  Mat src,
  Mat dst,
  int flags,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Idft(
  Mat src,
  Mat dst,
  int flags,
  int nonzeroRows,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_InRange(
  Mat src,
  Mat lowerb,
  Mat upperb,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, Mat)>()
external ffi.Pointer<CvStatus> Mat_InRangeWithScalar(
  Mat src,
  Scalar lowerb,
  Scalar upperb,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_InsertChannel(
  Mat src,
  Mat dst,
  int coi,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Mat_Invert(
  Mat src,
  Mat dst,
  int flags,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> Mat_IsContinuous(
  Mat m,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Log(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Magnitude(
  Mat x,
  Mat y,
  Mat magnitude,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Max(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>)>()
external ffi.Pointer<CvStatus> Mat_Mean(
  Mat m,
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<Scalar>, ffi.Pointer<Scalar>)>()
external ffi.Pointer<CvStatus> Mat_MeanStdDev(
  Mat src,
  ffi.Pointer<Scalar> dstMean,
  ffi.Pointer<Scalar> dstStdDev,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<Scalar>, ffi.Pointer<Scalar>, Mat)>()
external ffi.Pointer<CvStatus> Mat_MeanStdDevWithMask(
  Mat src,
  ffi.Pointer<Scalar> dstMean,
  ffi.Pointer<Scalar> dstStdDev,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Scalar>)>()
external ffi.Pointer<CvStatus> Mat_MeanWithMask(
  Mat m,
  Mat mask,
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecMat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Merge(
  VecMat mats,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Min(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Double>,
        ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_MinMaxIdx(
  Mat m,
  ffi.Pointer<ffi.Double> minVal,
  ffi.Pointer<ffi.Double> maxVal,
  ffi.Pointer<ffi.Int> minIdx,
  ffi.Pointer<ffi.Int> maxIdx,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Double>,
        ffi.Pointer<ffi.Double>, ffi.Pointer<Point>, ffi.Pointer<Point>)>()
external ffi.Pointer<CvStatus> Mat_MinMaxLoc(
  Mat m,
  ffi.Pointer<ffi.Double> minVal,
  ffi.Pointer<ffi.Double> maxVal,
  ffi.Pointer<Point> minLoc,
  ffi.Pointer<Point> maxLoc,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecMat, VecMat, VecInt)>()
external ffi.Pointer<CvStatus> Mat_MixChannels(
  VecMat src,
  VecMat dst,
  VecInt fromTo,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_MulSpectrums(
  Mat a,
  Mat b,
  Mat c,
  int flags,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Multiply(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, double_t)>()
external ffi.Pointer<CvStatus> Mat_MultiplyF64(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, float_t)>()
external ffi.Pointer<CvStatus> Mat_MultiplyFloat(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>()
external ffi.Pointer<CvStatus> Mat_MultiplyI32(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_MultiplyMatrix(
  Mat x,
  Mat y,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>()
external ffi.Pointer<CvStatus> Mat_MultiplySChar(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>()
external ffi.Pointer<CvStatus> Mat_MultiplyUChar(
  Mat m,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_MultiplyWithParams(
  Mat src1,
  Mat src2,
  Mat dst,
  double scale,
  int dtype,
);

/// @brief Create empty Mat
///
/// ALL return values with a type of `Pointer of Struct`,
/// e.g., Mat, the internal pointer (Mat.ptr) MUST be NULL
/// otherwise the memory of mat.ptr pointed to will NOT be freed correctly.
/// Mat* mat = (Mat*)malloc(sizeof(Mat));
/// CvStatus *status = Mat_New(mat);
/// Mat_Close(mat);
///
/// @param rval Mat*
/// @return CvStatus
@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_New(
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int,
        ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewFromBytes(
  int rows,
  int cols,
  int type,
  ffi.Pointer<ffi.Void> buf,
  int step,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Scalar, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewFromScalar(
  Scalar ar,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewFromVecPoint(
  VecPoint vec,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewFromVecPoint2f(
  VecPoint2f vec,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint3f, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewFromVecPoint3f(
  VecPoint3f vec,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewWithSize(
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Scalar, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewWithSizeFromScalar(
  Scalar ar,
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecInt, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewWithSizes(
  VecInt sizes,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecInt, ffi.Int, VecChar, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewWithSizesFromBytes(
  VecInt sizes,
  int type,
  VecChar buf,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecInt, ffi.Int, Scalar, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewWithSizesFromScalar(
  VecInt sizes,
  int type,
  Scalar ar,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Normalize(
  Mat src,
  Mat dst,
  double alpha,
  double beta,
  int typ,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_PCACompute(
  Mat src,
  Mat mean,
  Mat eigenvectors,
  Mat eigenvalues,
  int maxComponents,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Double)>()
external ffi.Pointer<CvStatus> Mat_PatchNaNs(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_PerspectiveTransform(
  Mat src,
  Mat dst,
  Mat tm,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Bool)>()
external ffi.Pointer<CvStatus> Mat_Phase(
  Mat x,
  Mat y,
  Mat angle,
  bool angleInDegrees,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Bool)>()
external ffi.Pointer<CvStatus> Mat_PolarToCart(
  Mat magnitude,
  Mat degree,
  Mat x,
  Mat y,
  bool angleInDegrees,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Double, Mat)>()
external ffi.Pointer<CvStatus> Mat_Pow(
  Mat src,
  double power,
  Mat dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Float>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_f32_1(
  Mat m,
  int i,
  ffi.Pointer<ffi.Pointer<ffi.Float>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Float>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_f32_2(
  Mat m,
  int i,
  int j,
  ffi.Pointer<ffi.Pointer<ffi.Float>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Float>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_f32_3(
  Mat m,
  int i,
  int j,
  int k,
  ffi.Pointer<ffi.Pointer<ffi.Float>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Double>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_f64_1(
  Mat m,
  int i,
  ffi.Pointer<ffi.Pointer<ffi.Double>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Double>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_f64_2(
  Mat m,
  int i,
  int j,
  ffi.Pointer<ffi.Pointer<ffi.Double>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Double>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_f64_3(
  Mat m,
  int i,
  int j,
  int k,
  ffi.Pointer<ffi.Pointer<ffi.Double>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Short>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i16_1(
  Mat m,
  int i,
  ffi.Pointer<ffi.Pointer<ffi.Short>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Short>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i16_2(
  Mat m,
  int i,
  int j,
  ffi.Pointer<ffi.Pointer<ffi.Short>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Short>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i16_3(
  Mat m,
  int i,
  int j,
  int k,
  ffi.Pointer<ffi.Pointer<ffi.Short>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Int>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i32_1(
  Mat m,
  int i,
  ffi.Pointer<ffi.Pointer<ffi.Int>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Int>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i32_2(
  Mat m,
  int i,
  int j,
  ffi.Pointer<ffi.Pointer<ffi.Int>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Int>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i32_3(
  Mat m,
  int i,
  int j,
  int k,
  ffi.Pointer<ffi.Pointer<ffi.Int>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i8_1(
  Mat m,
  int i,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i8_2(
  Mat m,
  int i,
  int j,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i8_3(
  Mat m,
  int i,
  int j,
  int k,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<ffi.Pointer<ushort>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_u16_1(
  Mat m,
  int i,
  ffi.Pointer<ffi.Pointer<ushort>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ushort>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_u16_2(
  Mat m,
  int i,
  int j,
  ffi.Pointer<ffi.Pointer<ushort>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ushort>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_u16_3(
  Mat m,
  int i,
  int j,
  int k,
  ffi.Pointer<ffi.Pointer<ushort>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<ffi.Pointer<uchar>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_u8_1(
  Mat m,
  int i,
  ffi.Pointer<ffi.Pointer<uchar>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<uchar>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_u8_2(
  Mat m,
  int i,
  int j,
  ffi.Pointer<ffi.Pointer<uchar>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<uchar>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_u8_3(
  Mat m,
  int i,
  int j,
  int k,
  ffi.Pointer<ffi.Pointer<uchar>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Reduce(
  Mat src,
  Mat dst,
  int dim,
  int rType,
  int dType,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Bool)>()
external ffi.Pointer<CvStatus> Mat_ReduceArgMax(
  Mat src,
  Mat dst,
  int axis,
  bool lastIndex,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Bool)>()
external ffi.Pointer<CvStatus> Mat_ReduceArgMin(
  Mat src,
  Mat dst,
  int axis,
  bool lastIndex,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Rect, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_Region(
  Mat m,
  Rect r,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_Release(
  ffi.Pointer<Mat> m,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Mat)>()
external ffi.Pointer<CvStatus> Mat_Repeat(
  Mat src,
  int nY,
  int nX,
  Mat dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_Reshape(
  Mat m,
  int cn,
  int rows,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_Rows(
  Mat m,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Double, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_ScaleAdd(
  Mat src1,
  double alpha,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> Mat_SetDouble(
  Mat m,
  int row,
  int col,
  double val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> Mat_SetDouble3(
  Mat m,
  int x,
  int y,
  int z,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Float)>()
external ffi.Pointer<CvStatus> Mat_SetFloat(
  Mat m,
  int row,
  int col,
  double val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Float)>()
external ffi.Pointer<CvStatus> Mat_SetFloat3(
  Mat m,
  int x,
  int y,
  int z,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Double)>()
external ffi.Pointer<CvStatus> Mat_SetIdentity(
  Mat src,
  double scalar,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int32)>()
external ffi.Pointer<CvStatus> Mat_SetInt(
  Mat m,
  int row,
  int col,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int32)>()
external ffi.Pointer<CvStatus> Mat_SetInt3(
  Mat m,
  int x,
  int y,
  int z,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int8)>()
external ffi.Pointer<CvStatus> Mat_SetSChar(
  Mat m,
  int row,
  int col,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int8)>()
external ffi.Pointer<CvStatus> Mat_SetSChar3(
  Mat m,
  int x,
  int y,
  int z,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int16)>()
external ffi.Pointer<CvStatus> Mat_SetShort(
  Mat m,
  int row,
  int col,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int16)>()
external ffi.Pointer<CvStatus> Mat_SetShort3(
  Mat m,
  int x,
  int y,
  int z,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Scalar)>()
external ffi.Pointer<CvStatus> Mat_SetTo(
  Mat m,
  Scalar value,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Uint8)>()
external ffi.Pointer<CvStatus> Mat_SetUChar(
  Mat m,
  int row,
  int col,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Uint8)>()
external ffi.Pointer<CvStatus> Mat_SetUChar3(
  Mat m,
  int x,
  int y,
  int z,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Uint16)>()
external ffi.Pointer<CvStatus> Mat_SetUShort(
  Mat m,
  int row,
  int col,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Uint16)>()
external ffi.Pointer<CvStatus> Mat_SetUShort3(
  Mat m,
  int x,
  int y,
  int z,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec2b)>()
external ffi.Pointer<CvStatus> Mat_SetVec2b(
  Mat m,
  int row,
  int col,
  Vec2b val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec2d)>()
external ffi.Pointer<CvStatus> Mat_SetVec2d(
  Mat m,
  int row,
  int col,
  Vec2d val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec2f)>()
external ffi.Pointer<CvStatus> Mat_SetVec2f(
  Mat m,
  int row,
  int col,
  Vec2f val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec2i)>()
external ffi.Pointer<CvStatus> Mat_SetVec2i(
  Mat m,
  int row,
  int col,
  Vec2i val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec2s)>()
external ffi.Pointer<CvStatus> Mat_SetVec2s(
  Mat m,
  int row,
  int col,
  Vec2s val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec2w)>()
external ffi.Pointer<CvStatus> Mat_SetVec2w(
  Mat m,
  int row,
  int col,
  Vec2w val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec3b)>()
external ffi.Pointer<CvStatus> Mat_SetVec3b(
  Mat m,
  int row,
  int col,
  Vec3b val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec3d)>()
external ffi.Pointer<CvStatus> Mat_SetVec3d(
  Mat m,
  int row,
  int col,
  Vec3d val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec3f)>()
external ffi.Pointer<CvStatus> Mat_SetVec3f(
  Mat m,
  int row,
  int col,
  Vec3f val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec3i)>()
external ffi.Pointer<CvStatus> Mat_SetVec3i(
  Mat m,
  int row,
  int col,
  Vec3i val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec3s)>()
external ffi.Pointer<CvStatus> Mat_SetVec3s(
  Mat m,
  int row,
  int col,
  Vec3s val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec3w)>()
external ffi.Pointer<CvStatus> Mat_SetVec3w(
  Mat m,
  int row,
  int col,
  Vec3w val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec4b)>()
external ffi.Pointer<CvStatus> Mat_SetVec4b(
  Mat m,
  int row,
  int col,
  Vec4b val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec4d)>()
external ffi.Pointer<CvStatus> Mat_SetVec4d(
  Mat m,
  int row,
  int col,
  Vec4d val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec4f)>()
external ffi.Pointer<CvStatus> Mat_SetVec4f(
  Mat m,
  int row,
  int col,
  Vec4f val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec4i)>()
external ffi.Pointer<CvStatus> Mat_SetVec4i(
  Mat m,
  int row,
  int col,
  Vec4i val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec4s)>()
external ffi.Pointer<CvStatus> Mat_SetVec4s(
  Mat m,
  int row,
  int col,
  Vec4s val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec4w)>()
external ffi.Pointer<CvStatus> Mat_SetVec4w(
  Mat m,
  int row,
  int col,
  Vec4w val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec6d)>()
external ffi.Pointer<CvStatus> Mat_SetVec6d(
  Mat m,
  int row,
  int col,
  Vec6d val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec6f)>()
external ffi.Pointer<CvStatus> Mat_SetVec6f(
  Mat m,
  int row,
  int col,
  Vec6f val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec6i)>()
external ffi.Pointer<CvStatus> Mat_SetVec6i(
  Mat m,
  int row,
  int col,
  Vec6i val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec8i)>()
external ffi.Pointer<CvStatus> Mat_SetVec8i(
  Mat m,
  int row,
  int col,
  Vec8i val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecInt>)>()
external ffi.Pointer<CvStatus> Mat_Size(
  Mat m,
  ffi.Pointer<VecInt> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Int, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> Mat_Solve(
  Mat src1,
  Mat src2,
  Mat dst,
  int flags,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_SolveCubic(
  Mat coeffs,
  Mat roots,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Mat_SolvePoly(
  Mat coeffs,
  Mat roots,
  int maxIters,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Sort(
  Mat src,
  Mat dst,
  int flags,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_SortIdx(
  Mat src,
  Mat dst,
  int flags,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecMat>)>()
external ffi.Pointer<CvStatus> Mat_Split(
  Mat src,
  ffi.Pointer<VecMat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_Sqrt(
  Mat m,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_Step(
  Mat m,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Subtract(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, double_t)>()
external ffi.Pointer<CvStatus> Mat_SubtractF64(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, float_t)>()
external ffi.Pointer<CvStatus> Mat_SubtractFloat(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>()
external ffi.Pointer<CvStatus> Mat_SubtractI32(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>()
external ffi.Pointer<CvStatus> Mat_SubtractSChar(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>()
external ffi.Pointer<CvStatus> Mat_SubtractUChar(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>)>()
external ffi.Pointer<CvStatus> Mat_Sum(
  Mat src,
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_T(
  Mat x,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecChar>)>()
external ffi.Pointer<CvStatus> Mat_ToVecChar(
  Mat m,
  ffi.Pointer<VecChar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecUChar>)>()
external ffi.Pointer<CvStatus> Mat_ToVecUChar(
  Mat m,
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_Total(
  Mat m,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>)>()
external ffi.Pointer<CvStatus> Mat_Trace(
  Mat src,
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Transform(
  Mat src,
  Mat dst,
  Mat tm,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Transpose(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_Type(
  Mat m,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Vconcat(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_colRange(
  Mat m,
  int start,
  int end,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_rowRange(
  Mat m,
  int start,
  int end,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, VecPoint, ffi.Int, ffi.Double, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> MatchShapes(
  VecPoint contour1,
  VecPoint contour2,
  int method,
  double parameter,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, Mat)>()
external ffi.Pointer<CvStatus> MatchTemplate(
  Mat image,
  Mat templ,
  Mat result,
  int method,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> MedianBlur(
  Mat src,
  Mat dst,
  int ksize,
);

@ffi.Native<ffi.Void Function(MergeMertensPtr)>()
external void MergeMertens_Close(
  MergeMertensPtr b,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<MergeMertens>)>()
external ffi.Pointer<CvStatus> MergeMertens_Create(
  ffi.Pointer<MergeMertens> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Float, ffi.Float, ffi.Float, ffi.Pointer<MergeMertens>)>()
external ffi.Pointer<CvStatus> MergeMertens_CreateWithParams(
  double contrast_weight,
  double saturation_weight,
  double exposure_weight,
  ffi.Pointer<MergeMertens> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(MergeMertens, VecMat, Mat)>()
external ffi.Pointer<CvStatus> MergeMertens_Process(
  MergeMertens b,
  VecMat src,
  Mat dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<RotatedRect>)>()
external ffi.Pointer<CvStatus> MinAreaRect(
  VecPoint pts,
  ffi.Pointer<RotatedRect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, ffi.Pointer<Point2f>, ffi.Pointer<ffi.Float>)>()
external ffi.Pointer<CvStatus> MinEnclosingCircle(
  VecPoint pts,
  ffi.Pointer<Point2f> center,
  ffi.Pointer<ffi.Float> radius,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Bool, ffi.Pointer<Moment>)>()
external ffi.Pointer<CvStatus> Moments(
  Mat src,
  bool binaryImage,
  ffi.Pointer<Moment> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<Scalar>)>()
external ffi.Pointer<CvStatus> MorphologyDefaultBorderValue(
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Mat)>()
external ffi.Pointer<CvStatus> MorphologyEx(
  Mat src,
  Mat dst,
  int op,
  Mat kernel,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, Mat, Point, ffi.Int, ffi.Int, Scalar)>()
external ffi.Pointer<CvStatus> MorphologyExWithParams(
  Mat src,
  Mat dst,
  int op,
  Mat kernel,
  Point pt,
  int iterations,
  int borderType,
  Scalar borderValue,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecRect, VecFloat, ffi.Float, ffi.Float, ffi.Pointer<VecInt>)>()
external ffi.Pointer<CvStatus> NMSBoxes(
  VecRect bboxes,
  VecFloat scores,
  double score_threshold,
  double nms_threshold,
  ffi.Pointer<VecInt> indices,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecRect, VecFloat, ffi.Float, ffi.Float,
        ffi.Pointer<VecInt>, ffi.Float, ffi.Int)>()
external ffi.Pointer<CvStatus> NMSBoxesWithParams(
  VecRect bboxes,
  VecFloat scores,
  double score_threshold,
  double nms_threshold,
  ffi.Pointer<VecInt> indices,
  double eta,
  int top_k,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, Size, Scalar, ffi.Bool, ffi.Bool, ffi.Int)>()
external ffi.Pointer<CvStatus> Net_BlobFromImage(
  Mat image,
  Mat blob,
  double scalefactor,
  Size size,
  Scalar mean,
  bool swapRB,
  bool crop,
  int ddepth,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecMat, Mat, ffi.Double, Size, Scalar, ffi.Bool, ffi.Bool, ffi.Int)>()
external ffi.Pointer<CvStatus> Net_BlobFromImages(
  VecMat images,
  Mat blob,
  double scalefactor,
  Size size,
  Scalar mean,
  bool swapRB,
  bool crop,
  int ddepth,
);

@ffi.Native<ffi.Void Function(NetPtr)>()
external void Net_Close(
  NetPtr net,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_Create(
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> Net_Dump(
  Net net,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> Net_Empty(
  Net net,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Net, ffi.Pointer<ffi.Char>, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Net_Forward(
  Net net,
  ffi.Pointer<ffi.Char> outputName,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<VecMat>, VecVecChar)>()
external ffi.Pointer<CvStatus> Net_ForwardLayers(
  Net net,
  ffi.Pointer<VecMat> outputBlobs,
  VecVecChar outBlobNames,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_FromNet(
  Net net,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Net_GetBlobChannel(
  Mat blob,
  int imgidx,
  int chnidx,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>)>()
external ffi.Pointer<CvStatus> Net_GetBlobSize(
  Mat blob,
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Net, ffi.Pointer<VecFloat>, ffi.Pointer<VecInt>)>()
external ffi.Pointer<CvStatus> Net_GetInputDetails(
  Net net,
  ffi.Pointer<VecFloat> scales,
  ffi.Pointer<VecInt> zeropoints,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Int, ffi.Pointer<Layer>)>()
external ffi.Pointer<CvStatus> Net_GetLayer(
  Net net,
  int layerid,
  ffi.Pointer<Layer> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<VecVecChar>)>()
external ffi.Pointer<CvStatus> Net_GetLayerNames(
  Net net,
  ffi.Pointer<VecVecChar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<ffi.Int64>)>()
external ffi.Pointer<CvStatus> Net_GetPerfProfile(
  Net net,
  ffi.Pointer<ffi.Int64> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<VecInt>)>()
external ffi.Pointer<CvStatus> Net_GetUnconnectedOutLayers(
  Net net,
  ffi.Pointer<VecInt> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecMat>)>()
external ffi.Pointer<CvStatus> Net_ImagesFromBlob(
  Mat blob,
  ffi.Pointer<VecMat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNet(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<ffi.Char> config,
  ffi.Pointer<ffi.Char> framework,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, VecUChar, VecUChar, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetBytes(
  ffi.Pointer<ffi.Char> framework,
  VecUChar model,
  VecUChar config,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromCaffe(
  ffi.Pointer<ffi.Char> prototxt,
  ffi.Pointer<ffi.Char> caffeModel,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecUChar, VecUChar, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromCaffeBytes(
  VecUChar prototxt,
  VecUChar caffeModel,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromONNX(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<Net> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecUChar, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromONNXBytes(
  VecUChar model,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromTFLite(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<Net> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecUChar, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromTFLiteBytes(
  VecUChar bufferModel,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromTensorflow(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<ffi.Char> config,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecUChar, VecUChar, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromTensorflowBytes(
  VecUChar model,
  VecUChar config,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Bool, ffi.Bool, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromTorch(
  ffi.Pointer<ffi.Char> model,
  bool isBinary,
  bool evaluate,
  ffi.Pointer<Net> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, Mat, ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<CvStatus> Net_SetInput(
  Net net,
  Mat blob,
  ffi.Pointer<ffi.Char> name,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Int)>()
external ffi.Pointer<CvStatus> Net_SetPreferableBackend(
  Net net,
  int backend,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Int)>()
external ffi.Pointer<CvStatus> Net_SetPreferableTarget(
  Net net,
  int target,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Net, ffi.Pointer<ffi.Char>, ffi.Pointer<AsyncArray>)>()
external ffi.Pointer<CvStatus> Net_forwardAsync(
  Net net,
  ffi.Pointer<ffi.Char> outputName,
  ffi.Pointer<AsyncArray> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Norm(
  Mat src1,
  int normType,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> NormWithMats(
  Mat src1,
  Mat src2,
  int normType,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Void Function(ORBPtr)>()
external void ORB_Close(
  ORBPtr o,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ORB>)>()
external ffi.Pointer<CvStatus> ORB_Create(
  ffi.Pointer<ORB> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Float, ffi.Int, ffi.Int,
        ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ORB>)>()
external ffi.Pointer<CvStatus> ORB_CreateWithParams(
  int nfeatures,
  double scaleFactor,
  int nlevels,
  int edgeThreshold,
  int firstLevel,
  int WTA_K,
  int scoreType,
  int patchSize,
  int fastThreshold,
  ffi.Pointer<ORB> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ORB, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> ORB_Detect(
  ORB o,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ORB, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> ORB_DetectAndCompute(
  ORB o,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Ones(
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Float)>()
external ffi.Pointer<CvStatus> PencilSketch(
  Mat src,
  Mat dst1,
  Mat dst2,
  double sigma_s,
  double sigma_r,
  double shade_factor,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Pointer<ffi.Double>, ffi.Pointer<Point2f>)>()
external ffi.Pointer<CvStatus> PhaseCorrelate(
  Mat src1,
  Mat src2,
  Mat window,
  ffi.Pointer<ffi.Double> response,
  ffi.Pointer<Point2f> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Float, ffi.Int)>()
external ffi.Pointer<CvStatus> PhotoInpaint(
  Mat src,
  Mat mask,
  Mat dst,
  double inpaint_radius,
  int algorithm_type,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, Point2f, ffi.Bool, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> PointPolygonTest(
  VecPoint pts,
  Point2f pt,
  bool measureDist,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecVecPoint, ffi.Bool, Scalar, ffi.Int)>()
external ffi.Pointer<CvStatus> Polylines(
  Mat img,
  VecVecPoint points,
  bool isClosed,
  Scalar color,
  int thickness,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>, Point, ffi.Int,
        ffi.Double, Scalar, ffi.Int)>()
external ffi.Pointer<CvStatus> PutText(
  Mat img,
  ffi.Pointer<ffi.Char> text,
  Point org,
  int fontFace,
  double fontScale,
  Scalar color,
  int thickness,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>, Point, ffi.Int,
        ffi.Double, Scalar, ffi.Int, ffi.Int, ffi.Bool)>()
external ffi.Pointer<CvStatus> PutTextWithParams(
  Mat img,
  ffi.Pointer<ffi.Char> text,
  Point org,
  int fontFace,
  double fontScale,
  Scalar color,
  int thickness,
  int lineType,
  bool bottomLeftOrigin,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Size, ffi.Int)>()
external ffi.Pointer<CvStatus> PyrDown(
  Mat src,
  Mat dst,
  Size dstsize,
  int borderType,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Size, ffi.Int)>()
external ffi.Pointer<CvStatus> PyrUp(
  Mat src,
  Mat dst,
  Size dstsize,
  int borderType,
);

@ffi.Native<ffi.Void Function(QRCodeDetectorPtr)>()
external void QRCodeDetector_Close(
  QRCodeDetectorPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>,
        Mat, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> QRCodeDetector_Decode(
  QRCodeDetector self,
  Mat input,
  ffi.Pointer<VecPoint> points,
  Mat straight_qrcode,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QRCodeDetector, Mat, ffi.Pointer<VecPoint>, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> QRCodeDetector_Detect(
  QRCodeDetector self,
  Mat input,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>,
        ffi.Pointer<Mat>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> QRCodeDetector_DetectAndDecode(
  QRCodeDetector self,
  Mat input,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<Mat> straight_qrcode,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecVecChar>,
        ffi.Pointer<VecPoint>, ffi.Pointer<VecMat>, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> QRCodeDetector_DetectAndDecodeMulti(
  QRCodeDetector self,
  Mat input,
  ffi.Pointer<VecVecChar> decoded,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<VecMat> straight_code,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QRCodeDetector, Mat, ffi.Pointer<VecPoint>, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> QRCodeDetector_DetectMulti(
  QRCodeDetector self,
  Mat input,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<QRCodeDetector>)>()
external ffi.Pointer<CvStatus> QRCodeDetector_New(
  ffi.Pointer<QRCodeDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, VecPoint,
        ffi.Pointer<Mat>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> QRCodeDetector_decodeCurved(
  QRCodeDetector self,
  Mat img,
  VecPoint points,
  ffi.Pointer<Mat> straight_qrcode,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>,
        ffi.Pointer<Mat>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> QRCodeDetector_detectAndDecodeCurved(
  QRCodeDetector self,
  Mat img,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<Mat> straight_qrcode,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(QRCodeDetector, ffi.Double)>()
external ffi.Pointer<CvStatus> QRCodeDetector_setEpsX(
  QRCodeDetector self,
  double epsX,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(QRCodeDetector, ffi.Double)>()
external ffi.Pointer<CvStatus> QRCodeDetector_setEpsY(
  QRCodeDetector self,
  double epsY,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(QRCodeDetector, ffi.Bool)>()
external ffi.Pointer<CvStatus> QRCodeDetector_setUseAlignmentMarkers(
  QRCodeDetector self,
  bool useAlignmentMarkers,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        RNG, Mat, ffi.Int, ffi.Double, ffi.Double, ffi.Bool)>()
external ffi.Pointer<CvStatus> RNG_Fill(
  RNG rng,
  Mat mat,
  int distType,
  double a,
  double b,
  bool saturateRange,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(RNG, ffi.Double, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> RNG_Gaussian(
  RNG rng,
  double sigma,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(RNG, ffi.Pointer<ffi.Uint32>)>()
external ffi.Pointer<CvStatus> RNG_Next(
  RNG rng,
  ffi.Pointer<ffi.Uint32> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        RNG, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> RNG_Uniform(
  RNG rng,
  int a,
  int b,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        RNG, ffi.Double, ffi.Double, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> RNG_UniformDouble(
  RNG rng,
  double a,
  double b,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar)>()
external ffi.Pointer<CvStatus> RandN(
  Mat mat,
  Scalar mean,
  Scalar stddev,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat)>()
external ffi.Pointer<CvStatus> RandShuffle(
  Mat mat,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Double, RNG)>()
external ffi.Pointer<CvStatus> RandShuffleWithParams(
  Mat mat,
  double iterFactor,
  RNG rng,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar)>()
external ffi.Pointer<CvStatus> RandU(
  Mat mat,
  Scalar low,
  Scalar high,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Rect, Scalar, ffi.Int)>()
external ffi.Pointer<CvStatus> Rectangle(
  Mat img,
  Rect rect,
  Scalar color,
  int thickness,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Rect, Scalar, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> RectangleWithParams(
  Mat img,
  Rect rect,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, ffi.Int, ffi.Int, Scalar)>()
external ffi.Pointer<CvStatus> Remap(
  Mat src,
  Mat dst,
  Mat map1,
  Mat map2,
  int interpolation,
  int borderMode,
  Scalar borderValue,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Size, ffi.Double, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> Resize(
  Mat src,
  Mat dst,
  Size sz,
  double fx,
  double fy,
  int interp,
);

@ffi.Native<ffi.Void Function(RNGPtr)>()
external void Rng_Close(
  RNGPtr rng,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<RNG>)>()
external ffi.Pointer<CvStatus> Rng_New(
  ffi.Pointer<RNG> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Uint64, ffi.Pointer<RNG>)>()
external ffi.Pointer<CvStatus> Rng_NewWithState(
  int state,
  ffi.Pointer<RNG> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Rotate(
  Mat src,
  Mat dst,
  int rotateCode,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<Rect>)>()
external ffi.Pointer<CvStatus> RotatedRect_BoundingRect(
  RotatedRect rect,
  ffi.Pointer<Rect> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<Rect2f>)>()
external ffi.Pointer<CvStatus> RotatedRect_BoundingRect2f(
  RotatedRect rect,
  ffi.Pointer<Rect2f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<VecPoint2f>)>()
external ffi.Pointer<CvStatus> RotatedRect_Points(
  RotatedRect rect,
  ffi.Pointer<VecPoint2f> pts,
);

@ffi.Native<ffi.Void Function(SIFTPtr)>()
external void SIFT_Close(
  SIFTPtr f,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<SIFT>)>()
external ffi.Pointer<CvStatus> SIFT_Create(
  ffi.Pointer<SIFT> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(SIFT, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> SIFT_Detect(
  SIFT f,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        SIFT, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> SIFT_DetectAndCompute(
  SIFT f,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> SVD_Compute(
  Mat src,
  Mat w,
  Mat u,
  Mat vt,
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Double, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> Scharr(
  Mat src,
  Mat dst,
  int dDepth,
  int dx,
  int dy,
  double scale,
  double delta,
  int borderType,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Point, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> SeamlessClone(
  Mat src,
  Mat dst,
  Mat mask,
  Point p,
  Mat blend,
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, Mat, Mat, Point, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> SepFilter2D(
  Mat src,
  Mat dst,
  int ddepth,
  Mat kernelX,
  Mat kernelY,
  Point anchor,
  double delta,
  int borderType,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int)>()
external ffi.Pointer<CvStatus> SetNumThreads(
  int n,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int)>()
external ffi.Pointer<CvStatus> SetRNGSeed(
  int seed,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<SimpleBlobDetectorParams>)>()
external ffi.Pointer<CvStatus> SimpleBlobDetectorParams_Create(
  ffi.Pointer<SimpleBlobDetectorParams> rval,
);

@ffi.Native<ffi.Void Function(SimpleBlobDetectorPtr)>()
external void SimpleBlobDetector_Close(
  SimpleBlobDetectorPtr b,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<SimpleBlobDetector>)>()
external ffi.Pointer<CvStatus> SimpleBlobDetector_Create(
  ffi.Pointer<SimpleBlobDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        SimpleBlobDetectorParams, ffi.Pointer<SimpleBlobDetector>)>()
external ffi.Pointer<CvStatus> SimpleBlobDetector_Create_WithParams(
  SimpleBlobDetectorParams params,
  ffi.Pointer<SimpleBlobDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        SimpleBlobDetector, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> SimpleBlobDetector_Detect(
  SimpleBlobDetector b,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
        ffi.Double, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> Sobel(
  Mat src,
  Mat dst,
  int ddepth,
  int dx,
  int dy,
  int ksize,
  double scale,
  double delta,
  int borderType,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> SpatialGradient(
  Mat src,
  Mat dx,
  Mat dy,
  int ksize,
  int borderType,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Size)>()
external ffi.Pointer<CvStatus> SqBoxFilter(
  Mat src,
  Mat dst,
  int ddepth,
  Size ps,
);

@ffi.Native<ffi.Void Function(PtrStitcherPtr)>()
external void Stitcher_Close(
  PtrStitcherPtr stitcher,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<VecInt>)>()
external ffi.Pointer<CvStatus> Stitcher_Component(
  Stitcher self,
  ffi.Pointer<VecInt> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Stitcher, Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Stitcher_ComposePanorama(
  Stitcher self,
  Mat rpano,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Stitcher, VecMat, Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Stitcher_ComposePanorama_1(
  Stitcher self,
  VecMat mats,
  Mat rpano,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Pointer<PtrStitcher>)>()
external ffi.Pointer<CvStatus> Stitcher_Create(
  int mode,
  ffi.Pointer<PtrStitcher> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Stitcher, VecMat, VecMat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Stitcher_EstimateTransform(
  Stitcher self,
  VecMat mats,
  VecMat masks,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(PtrStitcher, ffi.Pointer<Stitcher>)>()
external ffi.Pointer<CvStatus> Stitcher_Get(
  PtrStitcher self,
  ffi.Pointer<Stitcher> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Stitcher_GetCompositingResol(
  Stitcher self,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Stitcher_GetInterpolationFlags(
  Stitcher self,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Stitcher_GetPanoConfidenceThresh(
  Stitcher self,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Stitcher_GetRegistrationResol(
  Stitcher self,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Stitcher_GetSeamEstimationResol(
  Stitcher self,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Stitcher_GetWaveCorrectKind(
  Stitcher self,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> Stitcher_GetWaveCorrection(
  Stitcher self,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Double)>()
external ffi.Pointer<CvStatus> Stitcher_SetCompositingResol(
  Stitcher self,
  double inval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Int)>()
external ffi.Pointer<CvStatus> Stitcher_SetInterpolationFlags(
  Stitcher self,
  int inval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Double)>()
external ffi.Pointer<CvStatus> Stitcher_SetPanoConfidenceThresh(
  Stitcher self,
  double inval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Double)>()
external ffi.Pointer<CvStatus> Stitcher_SetRegistrationResol(
  Stitcher self,
  double inval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Double)>()
external ffi.Pointer<CvStatus> Stitcher_SetSeamEstimationResol(
  Stitcher self,
  double inval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Int)>()
external ffi.Pointer<CvStatus> Stitcher_SetWaveCorrectKind(
  Stitcher self,
  int inval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Bool)>()
external ffi.Pointer<CvStatus> Stitcher_SetWaveCorrection(
  Stitcher self,
  bool inval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Stitcher, VecMat, Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Stitcher_Stitch(
  Stitcher self,
  VecMat mats,
  Mat rpano,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Stitcher, VecMat, VecMat, Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Stitcher_Stitch_1(
  Stitcher self,
  VecMat mats,
  VecMat masks,
  Mat rpano,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Float, ffi.Float)>()
external ffi.Pointer<CvStatus> Stylization(
  Mat src,
  Mat dst,
  double sigma_s,
  double sigma_r,
);

@ffi.Native<ffi.Void Function(Subdiv2DPtr)>()
external void Subdiv2D_Close(
  Subdiv2DPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Int, ffi.Pointer<Point2f>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_EdgeDst(
  Subdiv2D self,
  int edge,
  ffi.Pointer<Point2f> dstpt,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Int, ffi.Pointer<Point2f>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_EdgeOrg(
  Subdiv2D self,
  int edge,
  ffi.Pointer<Point2f> orgpt,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, Point2f, ffi.Pointer<Point2f>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_FindNearest(
  Subdiv2D self,
  Point2f pt,
  ffi.Pointer<Point2f> nearestPt,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetEdge(
  Subdiv2D self,
  int edge,
  int nextEdgeType,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Pointer<ffi.Pointer<Vec4f>>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetEdgeList(
  Subdiv2D self,
  ffi.Pointer<ffi.Pointer<Vec4f>> rval,
  ffi.Pointer<ffi.Int> size,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Pointer<VecInt>)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetLeadingEdgeList(
  Subdiv2D self,
  ffi.Pointer<VecInt> leadingEdgeList,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Pointer<ffi.Pointer<Vec6f>>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetTriangleList(
  Subdiv2D self,
  ffi.Pointer<ffi.Pointer<Vec6f>> rval,
  ffi.Pointer<ffi.Int> size,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Int, ffi.Pointer<ffi.Int>, ffi.Pointer<Point2f>)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetVertex(
  Subdiv2D self,
  int vertex,
  ffi.Pointer<ffi.Int> firstEdge,
  ffi.Pointer<Point2f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, VecInt, ffi.Pointer<VecVecPoint2f>,
        ffi.Pointer<VecPoint2f>)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetVoronoiFacetList(
  Subdiv2D self,
  VecInt idx,
  ffi.Pointer<VecVecPoint2f> facetList,
  ffi.Pointer<VecPoint2f> facetCenters,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Subdiv2D, Rect)>()
external ffi.Pointer<CvStatus> Subdiv2D_InitDelaunay(
  Subdiv2D self,
  Rect rect,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, Point2f, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_Insert(
  Subdiv2D self,
  Point2f pt,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Subdiv2D, VecPoint2f)>()
external ffi.Pointer<CvStatus> Subdiv2D_InsertVec(
  Subdiv2D self,
  VecPoint2f ptvec,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, Point2f, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_Locate(
  Subdiv2D self,
  Point2f pt,
  ffi.Pointer<ffi.Int> edge,
  ffi.Pointer<ffi.Int> vertex,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<Subdiv2D>)>()
external ffi.Pointer<CvStatus> Subdiv2D_NewEmpty(
  ffi.Pointer<Subdiv2D> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Rect, ffi.Pointer<Subdiv2D>)>()
external ffi.Pointer<CvStatus> Subdiv2D_NewWithRect(
  Rect rect,
  ffi.Pointer<Subdiv2D> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_NextEdge(
  Subdiv2D self,
  int edge,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_RotateEdge(
  Subdiv2D self,
  int edge,
  int rotate,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_SymEdge(
  Subdiv2D self,
  int edge,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Int)>()
external ffi.Pointer<CvStatus> TextureFlattening(
  Mat src,
  Mat mask,
  Mat dst,
  double low_threshold,
  double high_threshold,
  int kernel_size,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<RNG>)>()
external ffi.Pointer<CvStatus> TheRNG(
  ffi.Pointer<RNG> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Threshold(
  Mat src,
  Mat dst,
  double thresh,
  double maxvalue,
  int typ,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>()
external ffi.Pointer<CvStatus> Trackbar_Create(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  int max,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Int>, ffi.Int)>()
external ffi.Pointer<CvStatus> Trackbar_CreateWithValue(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  ffi.Pointer<ffi.Int> value,
  int max,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Trackbar_GetPos(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>()
external ffi.Pointer<CvStatus> Trackbar_SetMax(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  int pos,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>()
external ffi.Pointer<CvStatus> Trackbar_SetMin(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  int pos,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>()
external ffi.Pointer<CvStatus> Trackbar_SetPos(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  int pos,
);

@ffi.Native<ffi.Void Function(TrackerMILPtr)>()
external void TrackerMIL_Close(
  TrackerMILPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<TrackerMIL>)>()
external ffi.Pointer<CvStatus> TrackerMIL_Create(
  ffi.Pointer<TrackerMIL> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(TrackerMIL, Mat, Rect)>()
external ffi.Pointer<CvStatus> TrackerMIL_Init(
  TrackerMIL self,
  Mat image,
  Rect bbox,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        TrackerMIL, Mat, ffi.Pointer<Rect>, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> TrackerMIL_Update(
  TrackerMIL self,
  Mat image,
  ffi.Pointer<Rect> boundingBox,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Undistort(
  Mat src,
  Mat dst,
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat newCameraMatrix,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, Mat, Mat, TermCriteria)>()
external ffi.Pointer<CvStatus> UndistortPoints(
  Mat distorted,
  Mat undistorted,
  Mat k,
  Mat d,
  Mat r,
  Mat p,
  TermCriteria criteria,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecChar, ffi.Char)>()
external ffi.Pointer<CvStatus> VecChar_Append(
  VecChar vec,
  int i,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecChar, ffi.Int, ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<CvStatus> VecChar_At(
  VecChar vec,
  int idx,
  ffi.Pointer<ffi.Char> rval,
);

@ffi.Native<ffi.Void Function(VecCharPtr)>()
external void VecChar_Close(
  VecCharPtr vec,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecChar, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> VecChar_Data(
  VecChar vec,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecChar>)>()
external ffi.Pointer<CvStatus> VecChar_New(
  ffi.Pointer<VecChar> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<VecChar>)>()
external ffi.Pointer<CvStatus> VecChar_NewFromPointer(
  ffi.Pointer<ffi.Char> p,
  int length,
  ffi.Pointer<VecChar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecChar, ffi.Pointer<VecChar>)>()
external ffi.Pointer<CvStatus> VecChar_NewFromVec(
  VecChar vec,
  ffi.Pointer<VecChar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecChar, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecChar_Size(
  VecChar vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecChar, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecChar_ToString(
  VecChar vec,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ffi.Pointer<ffi.Int> length,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecDMatch, DMatch)>()
external ffi.Pointer<CvStatus> VecDMatch_Append(
  VecDMatch vec,
  DMatch dm,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecDMatch, ffi.Int, ffi.Pointer<DMatch>)>()
external ffi.Pointer<CvStatus> VecDMatch_At(
  VecDMatch vec,
  int idx,
  ffi.Pointer<DMatch> rval,
);

@ffi.Native<ffi.Void Function(VecDMatchPtr)>()
external void VecDMatch_Close(
  VecDMatchPtr vec,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecDMatch>)>()
external ffi.Pointer<CvStatus> VecDMatch_New(
  ffi.Pointer<VecDMatch> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<DMatch>, ffi.Int, ffi.Pointer<VecDMatch>)>()
external ffi.Pointer<CvStatus> VecDMatch_NewFromPointer(
  ffi.Pointer<DMatch> matches,
  int length,
  ffi.Pointer<VecDMatch> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecDMatch, ffi.Pointer<VecDMatch>)>()
external ffi.Pointer<CvStatus> VecDMatch_NewFromVec(
  VecDMatch vec,
  ffi.Pointer<VecDMatch> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecDMatch, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecDMatch_Size(
  VecDMatch vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecDouble, ffi.Double)>()
external ffi.Pointer<CvStatus> VecDouble_Append(
  VecDouble vec,
  double d,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecDouble, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> VecDouble_At(
  VecDouble vec,
  int idx,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Void Function(VecDoublePtr)>()
external void VecDouble_Close(
  VecDoublePtr vec,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecDouble, ffi.Pointer<ffi.Pointer<ffi.Double>>)>()
external ffi.Pointer<CvStatus> VecDouble_Data(
  VecDouble vec,
  ffi.Pointer<ffi.Pointer<ffi.Double>> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecDouble>)>()
external ffi.Pointer<CvStatus> VecDouble_New(
  ffi.Pointer<VecDouble> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Double>, ffi.Int, ffi.Pointer<VecDouble>)>()
external ffi.Pointer<CvStatus> VecDouble_NewFromPointer(
  ffi.Pointer<ffi.Double> p,
  int length,
  ffi.Pointer<VecDouble> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecDouble, ffi.Pointer<VecDouble>)>()
external ffi.Pointer<CvStatus> VecDouble_NewFromVec(
  VecDouble vec,
  ffi.Pointer<VecDouble> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecDouble, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecDouble_Size(
  VecDouble vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecFloat, ffi.Float)>()
external ffi.Pointer<CvStatus> VecFloat_Append(
  VecFloat vec,
  double f,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecFloat, ffi.Int, ffi.Pointer<ffi.Float>)>()
external ffi.Pointer<CvStatus> VecFloat_At(
  VecFloat vec,
  int idx,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<ffi.Void Function(VecFloatPtr)>()
external void VecFloat_Close(
  VecFloatPtr vec,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecFloat, ffi.Pointer<ffi.Pointer<ffi.Float>>)>()
external ffi.Pointer<CvStatus> VecFloat_Data(
  VecFloat vec,
  ffi.Pointer<ffi.Pointer<ffi.Float>> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecFloat>)>()
external ffi.Pointer<CvStatus> VecFloat_New(
  ffi.Pointer<VecFloat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<VecFloat>)>()
external ffi.Pointer<CvStatus> VecFloat_NewFromPointer(
  ffi.Pointer<ffi.Float> p,
  int length,
  ffi.Pointer<VecFloat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecFloat, ffi.Pointer<VecFloat>)>()
external ffi.Pointer<CvStatus> VecFloat_NewFromVec(
  VecFloat vec,
  ffi.Pointer<VecFloat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecFloat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecFloat_Size(
  VecFloat vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecInt, ffi.Int)>()
external ffi.Pointer<CvStatus> VecInt_Append(
  VecInt vec,
  int i,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecInt, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecInt_At(
  VecInt vec,
  int idx,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecInt, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecInt_AtNoBoundCheck(
  VecInt vec,
  int idx,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Void Function(VecIntPtr)>()
external void VecInt_Close(
  VecIntPtr vec,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecInt, ffi.Pointer<ffi.Pointer<ffi.Int>>)>()
external ffi.Pointer<CvStatus> VecInt_Data(
  VecInt vec,
  ffi.Pointer<ffi.Pointer<ffi.Int>> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecInt>)>()
external ffi.Pointer<CvStatus> VecInt_New(
  ffi.Pointer<VecInt> rval,
);

/// Copy from a pointer
@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<VecInt>)>()
external ffi.Pointer<CvStatus> VecInt_NewFromPointer(
  ffi.Pointer<ffi.Int> p,
  int length,
  ffi.Pointer<VecInt> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecInt, ffi.Pointer<VecInt>)>()
external ffi.Pointer<CvStatus> VecInt_NewFromVec(
  VecInt vec,
  ffi.Pointer<VecInt> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecInt, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecInt_Size(
  VecInt vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecKeyPoint, KeyPoint)>()
external ffi.Pointer<CvStatus> VecKeyPoint_Append(
  VecKeyPoint vec,
  KeyPoint kp,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecKeyPoint, ffi.Int, ffi.Pointer<KeyPoint>)>()
external ffi.Pointer<CvStatus> VecKeyPoint_At(
  VecKeyPoint vec,
  int idx,
  ffi.Pointer<KeyPoint> rval,
);

@ffi.Native<ffi.Void Function(VecKeyPointPtr)>()
external void VecKeyPoint_Close(
  VecKeyPointPtr vec,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> VecKeyPoint_New(
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<KeyPoint>, ffi.Int, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> VecKeyPoint_NewFromPointer(
  ffi.Pointer<KeyPoint> keypoints,
  int length,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecKeyPoint, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> VecKeyPoint_NewFromVec(
  VecKeyPoint vec,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecKeyPoint, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecKeyPoint_Size(
  VecKeyPoint vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecMat, Mat)>()
external ffi.Pointer<CvStatus> VecMat_Append(
  VecMat vec,
  Mat mat,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecMat, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> VecMat_At(
  VecMat vec,
  int i,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Void Function(VecMatPtr)>()
external void VecMat_Close(
  VecMatPtr vec,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecMat>)>()
external ffi.Pointer<CvStatus> VecMat_New(
  ffi.Pointer<VecMat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<Mat>, ffi.Int, ffi.Pointer<VecMat>)>()
external ffi.Pointer<CvStatus> VecMat_NewFromPointer(
  ffi.Pointer<Mat> mats,
  int length,
  ffi.Pointer<VecMat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecMat, ffi.Pointer<VecMat>)>()
external ffi.Pointer<CvStatus> VecMat_NewFromVec(
  VecMat vec,
  ffi.Pointer<VecMat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecMat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecMat_Size(
  VecMat vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint2f, Point2f)>()
external ffi.Pointer<CvStatus> VecPoint2f_Append(
  VecPoint2f vec,
  Point2f p,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Int, ffi.Pointer<Point2f>)>()
external ffi.Pointer<CvStatus> VecPoint2f_At(
  VecPoint2f vec,
  int idx,
  ffi.Pointer<Point2f> rval,
);

@ffi.Native<ffi.Void Function(VecPoint2fPtr)>()
external void VecPoint2f_Close(
  VecPoint2fPtr vec,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecPoint2f>)>()
external ffi.Pointer<CvStatus> VecPoint2f_New(
  ffi.Pointer<VecPoint2f> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint2f>)>()
external ffi.Pointer<CvStatus> VecPoint2f_NewFromMat(
  Mat mat,
  ffi.Pointer<VecPoint2f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<Point2f>, ffi.Int, ffi.Pointer<VecPoint2f>)>()
external ffi.Pointer<CvStatus> VecPoint2f_NewFromPointer(
  ffi.Pointer<Point2f> pts,
  int length,
  ffi.Pointer<VecPoint2f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Pointer<VecPoint2f>)>()
external ffi.Pointer<CvStatus> VecPoint2f_NewFromVec(
  VecPoint2f vec,
  ffi.Pointer<VecPoint2f> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecPoint2f_Size(
  VecPoint2f vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint3f, Point3f)>()
external ffi.Pointer<CvStatus> VecPoint3f_Append(
  VecPoint3f vec,
  Point3f point,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint3f, ffi.Int, ffi.Pointer<Point3f>)>()
external ffi.Pointer<CvStatus> VecPoint3f_At(
  VecPoint3f vec,
  int idx,
  ffi.Pointer<Point3f> rval,
);

@ffi.Native<ffi.Void Function(VecPoint3fPtr)>()
external void VecPoint3f_Close(
  VecPoint3fPtr vec,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecPoint3f>)>()
external ffi.Pointer<CvStatus> VecPoint3f_New(
  ffi.Pointer<VecPoint3f> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint3f>)>()
external ffi.Pointer<CvStatus> VecPoint3f_NewFromMat(
  Mat mat,
  ffi.Pointer<VecPoint3f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<Point3f>, ffi.Int, ffi.Pointer<VecPoint3f>)>()
external ffi.Pointer<CvStatus> VecPoint3f_NewFromPointer(
  ffi.Pointer<Point3f> points,
  int length,
  ffi.Pointer<VecPoint3f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint3f, ffi.Pointer<VecPoint3f>)>()
external ffi.Pointer<CvStatus> VecPoint3f_NewFromVec(
  VecPoint3f vec,
  ffi.Pointer<VecPoint3f> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint3f, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecPoint3f_Size(
  VecPoint3f vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, Point)>()
external ffi.Pointer<CvStatus> VecPoint_Append(
  VecPoint vec,
  Point p,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, ffi.Int, ffi.Pointer<Point>)>()
external ffi.Pointer<CvStatus> VecPoint_At(
  VecPoint vec,
  int idx,
  ffi.Pointer<Point> rval,
);

@ffi.Native<ffi.Void Function(VecPointPtr)>()
external void VecPoint_Close(
  VecPointPtr vec,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecPoint>)>()
external ffi.Pointer<CvStatus> VecPoint_New(
  ffi.Pointer<VecPoint> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint>)>()
external ffi.Pointer<CvStatus> VecPoint_NewFromMat(
  Mat mat,
  ffi.Pointer<VecPoint> rval,
);

/// Copy from a pointer
@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<Point>, ffi.Int, ffi.Pointer<VecPoint>)>()
external ffi.Pointer<CvStatus> VecPoint_NewFromPointer(
  ffi.Pointer<Point> points,
  int length,
  ffi.Pointer<VecPoint> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<VecPoint>)>()
external ffi.Pointer<CvStatus> VecPoint_NewFromVec(
  VecPoint vec,
  ffi.Pointer<VecPoint> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecPoint_Size(
  VecPoint vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecRect, Rect)>()
external ffi.Pointer<CvStatus> VecRect_Append(
  VecRect vec,
  Rect rect,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecRect, ffi.Int, ffi.Pointer<Rect>)>()
external ffi.Pointer<CvStatus> VecRect_At(
  VecRect vec,
  int idx,
  ffi.Pointer<Rect> rval,
);

@ffi.Native<ffi.Void Function(VecRectPtr)>()
external void VecRect_Close(
  VecRectPtr vec,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecRect>)>()
external ffi.Pointer<CvStatus> VecRect_New(
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<Rect>, ffi.Int, ffi.Pointer<VecRect>)>()
external ffi.Pointer<CvStatus> VecRect_NewFromPointer(
  ffi.Pointer<Rect> rects,
  int length,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecRect, ffi.Pointer<VecRect>)>()
external ffi.Pointer<CvStatus> VecRect_NewFromVec(
  VecRect vec,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecRect, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecRect_Size(
  VecRect vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecUChar, uchar)>()
external ffi.Pointer<CvStatus> VecUChar_Append(
  VecUChar vec,
  int i,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecUChar, ffi.Int, ffi.Pointer<uchar>)>()
external ffi.Pointer<CvStatus> VecUChar_At(
  VecUChar vec,
  int idx,
  ffi.Pointer<uchar> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecUChar, ffi.Int, ffi.Pointer<uchar>)>()
external ffi.Pointer<CvStatus> VecUChar_AtNoBoundCheck(
  VecUChar vec,
  int idx,
  ffi.Pointer<uchar> rval,
);

@ffi.Native<ffi.Void Function(VecUCharPtr)>()
external void VecUChar_Close(
  VecUCharPtr vec,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecUChar, ffi.Pointer<ffi.Pointer<uchar>>)>()
external ffi.Pointer<CvStatus> VecUChar_Data(
  VecUChar vec,
  ffi.Pointer<ffi.Pointer<uchar>> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecUChar>)>()
external ffi.Pointer<CvStatus> VecUChar_New(
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<uchar>, ffi.Int, ffi.Pointer<VecUChar>)>()
external ffi.Pointer<CvStatus> VecUChar_NewFromPointer(
  ffi.Pointer<uchar> p,
  int length,
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecUChar, ffi.Pointer<VecUChar>)>()
external ffi.Pointer<CvStatus> VecUChar_NewFromVec(
  VecUChar vec,
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecUChar, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecUChar_Size(
  VecUChar vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecVecChar, VecChar)>()
external ffi.Pointer<CvStatus> VecVecChar_Append(
  VecVecChar vec,
  VecChar v,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecVecChar, ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<CvStatus> VecVecChar_Append_Str(
  VecVecChar vec,
  ffi.Pointer<ffi.Char> str,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecVecChar, ffi.Int, ffi.Pointer<VecChar>)>()
external ffi.Pointer<CvStatus> VecVecChar_At(
  VecVecChar vec,
  int idx,
  ffi.Pointer<VecChar> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecVecChar, ffi.Int,
        ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecVecChar_At_Str(
  VecVecChar vec,
  int idx,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
  ffi.Pointer<ffi.Int> length,
);

@ffi.Native<ffi.Void Function(VecVecCharPtr)>()
external void VecVecChar_Close(
  VecVecCharPtr vec,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecVecChar>)>()
external ffi.Pointer<CvStatus> VecVecChar_New(
  ffi.Pointer<VecVecChar> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecVecChar, ffi.Pointer<VecVecChar>)>()
external ffi.Pointer<CvStatus> VecVecChar_NewFromVec(
  VecVecChar vec,
  ffi.Pointer<VecVecChar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecVecChar, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecVecChar_Size(
  VecVecChar vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecVecDMatch, VecDMatch)>()
external ffi.Pointer<CvStatus> VecVecDMatch_Append(
  VecVecDMatch vec,
  VecDMatch dm,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecVecDMatch, ffi.Int, ffi.Pointer<VecDMatch>)>()
external ffi.Pointer<CvStatus> VecVecDMatch_At(
  VecVecDMatch vec,
  int idx,
  ffi.Pointer<VecDMatch> rval,
);

@ffi.Native<ffi.Void Function(VecVecDMatchPtr)>()
external void VecVecDMatch_Close(
  VecVecDMatchPtr vec,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecVecDMatch, ffi.Pointer<ffi.Pointer<VecDMatch>>)>()
external ffi.Pointer<CvStatus> VecVecDMatch_Data(
  VecVecDMatch vec,
  ffi.Pointer<ffi.Pointer<VecDMatch>> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecVecDMatch>)>()
external ffi.Pointer<CvStatus> VecVecDMatch_New(
  ffi.Pointer<VecVecDMatch> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<VecDMatch>, ffi.Int, ffi.Pointer<VecVecDMatch>)>()
external ffi.Pointer<CvStatus> VecVecDMatch_NewFromPointer(
  ffi.Pointer<VecDMatch> matches,
  int length,
  ffi.Pointer<VecVecDMatch> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecVecDMatch, ffi.Pointer<VecVecDMatch>)>()
external ffi.Pointer<CvStatus> VecVecDMatch_NewFromVec(
  VecVecDMatch vec,
  ffi.Pointer<VecVecDMatch> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecVecDMatch, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecVecDMatch_Size(
  VecVecDMatch vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecVecPoint2f, VecPoint2f)>()
external ffi.Pointer<CvStatus> VecVecPoint2f_Append(
  VecVecPoint2f vec,
  VecPoint2f pv,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecVecPoint2f, ffi.Int, ffi.Pointer<VecPoint2f>)>()
external ffi.Pointer<CvStatus> VecVecPoint2f_At(
  VecVecPoint2f vec,
  int idx,
  ffi.Pointer<VecPoint2f> rval,
);

@ffi.Native<ffi.Void Function(VecVecPoint2fPtr)>()
external void VecVecPoint2f_Close(
  VecVecPoint2fPtr vec,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecVecPoint2f>)>()
external ffi.Pointer<CvStatus> VecVecPoint2f_New(
  ffi.Pointer<VecVecPoint2f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<VecPoint2f>, ffi.Int, ffi.Pointer<VecVecPoint2f>)>()
external ffi.Pointer<CvStatus> VecVecPoint2f_NewFromPointer(
  ffi.Pointer<VecPoint2f> points,
  int length,
  ffi.Pointer<VecVecPoint2f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecVecPoint2f, ffi.Pointer<VecVecPoint2f>)>()
external ffi.Pointer<CvStatus> VecVecPoint2f_NewFromVec(
  VecVecPoint2f vec,
  ffi.Pointer<VecVecPoint2f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecVecPoint2f, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecVecPoint2f_Size(
  VecVecPoint2f vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecVecPoint3f, VecPoint3f)>()
external ffi.Pointer<CvStatus> VecVecPoint3f_Append(
  VecVecPoint3f vec,
  VecPoint3f pv,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecVecPoint3f, ffi.Int, ffi.Pointer<VecPoint3f>)>()
external ffi.Pointer<CvStatus> VecVecPoint3f_At(
  VecVecPoint3f vec,
  int idx,
  ffi.Pointer<VecPoint3f> rval,
);

@ffi.Native<ffi.Void Function(VecVecPoint3fPtr)>()
external void VecVecPoint3f_Close(
  VecVecPoint3fPtr vec,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecVecPoint3f>)>()
external ffi.Pointer<CvStatus> VecVecPoint3f_New(
  ffi.Pointer<VecVecPoint3f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<VecPoint3f>, ffi.Int, ffi.Pointer<VecVecPoint3f>)>()
external ffi.Pointer<CvStatus> VecVecPoint3f_NewFromPointer(
  ffi.Pointer<VecPoint3f> points,
  int length,
  ffi.Pointer<VecVecPoint3f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecVecPoint3f, ffi.Pointer<VecVecPoint3f>)>()
external ffi.Pointer<CvStatus> VecVecPoint3f_NewFromVec(
  VecVecPoint3f vec,
  ffi.Pointer<VecVecPoint3f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecVecPoint3f, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecVecPoint3f_Size(
  VecVecPoint3f vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecVecPoint, VecPoint)>()
external ffi.Pointer<CvStatus> VecVecPoint_Append(
  VecVecPoint vec,
  VecPoint pv,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecVecPoint, ffi.Int, ffi.Pointer<VecPoint>)>()
external ffi.Pointer<CvStatus> VecVecPoint_At(
  VecVecPoint vec,
  int idx,
  ffi.Pointer<VecPoint> rval,
);

@ffi.Native<ffi.Void Function(VecVecPointPtr)>()
external void VecVecPoint_Close(
  VecVecPointPtr vec,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecVecPoint>)>()
external ffi.Pointer<CvStatus> VecVecPoint_New(
  ffi.Pointer<VecVecPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<VecPoint>, ffi.Int, ffi.Pointer<VecVecPoint>)>()
external ffi.Pointer<CvStatus> VecVecPoint_NewFromPointer(
  ffi.Pointer<VecPoint> points,
  int length,
  ffi.Pointer<VecVecPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecVecPoint, ffi.Pointer<VecVecPoint>)>()
external ffi.Pointer<CvStatus> VecVecPoint_NewFromVec(
  VecVecPoint vec,
  ffi.Pointer<VecVecPoint> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecVecPoint, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VecVecPoint_Size(
  VecVecPoint vec,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Void Function(VideoCapturePtr)>()
external void VideoCapture_Close(
  VideoCapturePtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> VideoCapture_Get(
  VideoCapture self,
  int prop,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Int)>()
external ffi.Pointer<CvStatus> VideoCapture_Grab(
  VideoCapture self,
  int skip,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VideoCapture_IsOpened(
  VideoCapture self,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VideoCapture>)>()
external ffi.Pointer<CvStatus> VideoCapture_New(
  ffi.Pointer<VideoCapture> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<VideoCapture>)>()
external ffi.Pointer<CvStatus> VideoCapture_NewFromFile(
  ffi.Pointer<ffi.Char> filename,
  int apiPreference,
  ffi.Pointer<VideoCapture> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Pointer<VideoCapture>)>()
external ffi.Pointer<CvStatus> VideoCapture_NewFromIndex(
  int index,
  int apiPreference,
  ffi.Pointer<VideoCapture> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> VideoCapture_Open(
  VideoCapture self,
  ffi.Pointer<ffi.Char> uri,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, ffi.Int, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> VideoCapture_OpenDevice(
  VideoCapture self,
  int device,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, ffi.Int, ffi.Int, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> VideoCapture_OpenDeviceWithAPI(
  VideoCapture self,
  int device,
  int apiPreference,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> VideoCapture_OpenWithAPI(
  VideoCapture self,
  ffi.Pointer<ffi.Char> uri,
  int apiPreference,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VideoCapture, Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VideoCapture_Read(
  VideoCapture self,
  Mat buf,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoCapture)>()
external ffi.Pointer<CvStatus> VideoCapture_Release(
  VideoCapture self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> VideoCapture_Set(
  VideoCapture self,
  int prop,
  double param,
);

@ffi.Native<ffi.Void Function(VideoWriterPtr)>()
external void VideoWriter_Close(
  VideoWriterPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Char, ffi.Char, ffi.Char, ffi.Char, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VideoWriter_Fourcc(
  int c1,
  int c2,
  int c3,
  int c4,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoWriter, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VideoWriter_IsOpened(
  VideoWriter self,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VideoWriter>)>()
external ffi.Pointer<CvStatus> VideoWriter_New(
  ffi.Pointer<VideoWriter> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VideoWriter, ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>, ffi.Double, ffi.Int, ffi.Int, ffi.Bool)>()
external ffi.Pointer<CvStatus> VideoWriter_Open(
  VideoWriter self,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Char> codec,
  double fps,
  int width,
  int height,
  bool isColor,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoWriter)>()
external ffi.Pointer<CvStatus> VideoWriter_Release(
  VideoWriter self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoWriter, Mat)>()
external ffi.Pointer<CvStatus> VideoWriter_Write(
  VideoWriter self,
  Mat img,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Size)>()
external ffi.Pointer<CvStatus> WarpAffine(
  Mat src,
  Mat dst,
  Mat rot_mat,
  Size dsize,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Size, ffi.Int, ffi.Int, Scalar)>()
external ffi.Pointer<CvStatus> WarpAffineWithParams(
  Mat src,
  Mat dst,
  Mat rot_mat,
  Size dsize,
  int flags,
  int borderMode,
  Scalar borderValue,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Size)>()
external ffi.Pointer<CvStatus> WarpPerspective(
  Mat src,
  Mat dst,
  Mat m,
  Size dsize,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Size, ffi.Int, ffi.Int, Scalar)>()
external ffi.Pointer<CvStatus> WarpPerspectiveWithParams(
  Mat src,
  Mat dst,
  Mat rot_mat,
  Size dsize,
  int flags,
  int borderMode,
  Scalar borderValue,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Watershed(
  Mat image,
  Mat markers,
);

@ffi.Native<ffi.Void Function(WeChatQRCodePtr)>()
external void WeChatQRCode_Close(
  WeChatQRCodePtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<WeChatQRCode>, Mat,
        ffi.Pointer<VecMat>, ffi.Pointer<VecVecChar>)>()
external ffi.Pointer<CvStatus> WeChatQRCode_DetectAndDecode(
  ffi.Pointer<WeChatQRCode> self,
  Mat img,
  ffi.Pointer<VecMat> points,
  ffi.Pointer<VecVecChar> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<WeChatQRCode>, ffi.Pointer<ffi.Float>)>()
external ffi.Pointer<CvStatus> WeChatQRCode_GetScaleFactor(
  ffi.Pointer<WeChatQRCode> self,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<WeChatQRCode>)>()
external ffi.Pointer<CvStatus> WeChatQRCode_New(
  ffi.Pointer<WeChatQRCode> qrcode,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<WeChatQRCode>)>()
external ffi.Pointer<CvStatus> WeChatQRCode_NewWithParams(
  ffi.Pointer<ffi.Char> detector_prototxt_path,
  ffi.Pointer<ffi.Char> detector_caffe_model_path,
  ffi.Pointer<ffi.Char> super_resolution_prototxt_path,
  ffi.Pointer<ffi.Char> super_resolution_caffe_model_path,
  ffi.Pointer<WeChatQRCode> qrcode,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<WeChatQRCode>, ffi.Float)>()
external ffi.Pointer<CvStatus> WeChatQRCode_SetScaleFactor(
  ffi.Pointer<WeChatQRCode> self,
  double scale_factor,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Char>)>()
external void Window_Close(
  ffi.Pointer<ffi.Char> winname,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Window_GetProperty(
  ffi.Pointer<ffi.Char> winname,
  int flag,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat)>()
external ffi.Pointer<CvStatus> Window_IMShow(
  ffi.Pointer<ffi.Char> winname,
  Mat mat,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> Window_Move(
  ffi.Pointer<ffi.Char> winname,
  int x,
  int y,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int)>()
external ffi.Pointer<CvStatus> Window_New(
  ffi.Pointer<ffi.Char> winname,
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> Window_Resize(
  ffi.Pointer<ffi.Char> winname,
  int width,
  int height,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<Rect>)>()
external ffi.Pointer<CvStatus> Window_SelectROI(
  ffi.Pointer<ffi.Char> winname,
  Mat img,
  ffi.Pointer<Rect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<VecRect>)>()
external ffi.Pointer<CvStatus> Window_SelectROIs(
  ffi.Pointer<ffi.Char> winname,
  Mat img,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> Window_SetProperty(
  ffi.Pointer<ffi.Char> winname,
  int flag,
  double value,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<CvStatus> Window_SetTitle(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> title,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Window_WaitKey(
  int delay,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Zeros(
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> averageHashCompare(
  Mat a,
  Mat b,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> averageHashCompute(
  Mat inputArr,
  Mat outputArr,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> blockMeanHashCompare(
  Mat a,
  Mat b,
  int mode,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> blockMeanHashCompute(
  Mat inputArr,
  Mat outputArr,
  int mode,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> colorMomentHashCompare(
  Mat a,
  Mat b,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> colorMomentHashCompute(
  Mat inputArr,
  Mat outputArr,
);

@ffi.Native<ffi.Pointer<CvStatus> Function()>()
external ffi.Pointer<CvStatus> destroyAllWindows();

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> getBuildInfo(
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Pointer<ArucoDictionary>)>()
external ffi.Pointer<CvStatus> getPredefinedDictionary(
  int dictionaryId,
  ffi.Pointer<ArucoDictionary> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Float, ffi.Float, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> marrHildrethHashCompare(
  Mat a,
  Mat b,
  double alpha,
  double scale,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Float, ffi.Float)>()
external ffi.Pointer<CvStatus> marrHildrethHashCompute(
  Mat inputArr,
  Mat outputArr,
  double alpha,
  double scale,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> openCVVersion(
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> pHashCompare(
  Mat a,
  Mat b,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> pHashCompute(
  Mat inputArr,
  Mat outputArr,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> radialVarianceHashCompare(
  Mat a,
  Mat b,
  double sigma,
  int numOfAngleLine,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> radialVarianceHashCompute(
  Mat inputArr,
  Mat outputArr,
  double sigma,
  int numOfAngleLine,
);

@ffi.Native<ffi.Void Function(ErrorCallback)>()
external void registerErrorCallback(
  ErrorCallback callback,
);

final class AKAZE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AKAZEPtr = ffi.Pointer<AKAZE>;

final class AgastFeatureDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AgastFeatureDetectorPtr = ffi.Pointer<AgastFeatureDetector>;

final class AlignMTB extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AlignMTBPtr = ffi.Pointer<AlignMTB>;

final class ArucoDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class ArucoDetectorParameters extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef ArucoDetectorParametersPtr = ffi.Pointer<ArucoDetectorParameters>;
typedef ArucoDetectorPtr = ffi.Pointer<ArucoDetector>;

final class ArucoDictionary extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef ArucoDictionaryPtr = ffi.Pointer<ArucoDictionary>;

final class AsyncArray extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AsyncArrayPtr = ffi.Pointer<AsyncArray>;

final class BFMatcher extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BFMatcherPtr = ffi.Pointer<BFMatcher>;

const int BLOCK_MEAN_HASH_MODE_0 = 0;

const int BLOCK_MEAN_HASH_MODE_1 = 1;

final class BRISK extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BRISKPtr = ffi.Pointer<BRISK>;

final class BackgroundSubtractorKNN extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BackgroundSubtractorKNNPtr = ffi.Pointer<BackgroundSubtractorKNN>;

final class BackgroundSubtractorMOG2 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BackgroundSubtractorMOG2Ptr = ffi.Pointer<BackgroundSubtractorMOG2>;

final class BlockMeanHash extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BlockMeanHashPtr = ffi.Pointer<BlockMeanHash>;

final class CLAHE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef CLAHEPtr = ffi.Pointer<CLAHE>;

final class CascadeClassifier extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef CascadeClassifierPtr = ffi.Pointer<CascadeClassifier>;

final class CvStatus extends ffi.Struct {
  @ffi.Int()
  external int code;

  external ffi.Pointer<ffi.Char> msg;

  external ffi.Pointer<ffi.Char> err;

  external ffi.Pointer<ffi.Char> func;

  external ffi.Pointer<ffi.Char> file;

  @ffi.Int()
  external int line;
}

final class DMatch extends ffi.Struct {
  @ffi.Int()
  external int queryIdx;

  @ffi.Int()
  external int trainIdx;

  @ffi.Int()
  external int imgIdx;

  @ffi.Float()
  external double distance;
}

typedef ErrorCallback = ffi.Pointer<ffi.NativeFunction<ErrorCallbackFunction>>;
typedef ErrorCallbackFunction = ffi.Void Function(
    ffi.Int status,
    ffi.Pointer<ffi.Char> func_name,
    ffi.Pointer<ffi.Char> err_msg,
    ffi.Pointer<ffi.Char> file_name,
    ffi.Int line,
    ffi.Pointer<ffi.Void> userdata);
typedef DartErrorCallbackFunction = void Function(
    int status,
    ffi.Pointer<ffi.Char> func_name,
    ffi.Pointer<ffi.Char> err_msg,
    ffi.Pointer<ffi.Char> file_name,
    int line,
    ffi.Pointer<ffi.Void> userdata);

final class FaceDetectorYN extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef FaceDetectorYNPtr = ffi.Pointer<FaceDetectorYN>;

final class FaceRecognizerSF extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef FaceRecognizerSFPtr = ffi.Pointer<FaceRecognizerSF>;

final class FastFeatureDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef FastFeatureDetectorPtr = ffi.Pointer<FastFeatureDetector>;

final class FlannBasedMatcher extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef FlannBasedMatcherPtr = ffi.Pointer<FlannBasedMatcher>;

final class GFTTDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GFTTDetectorPtr = ffi.Pointer<GFTTDetector>;

final class HOGDescriptor extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef HOGDescriptorPtr = ffi.Pointer<HOGDescriptor>;

final class InputOutputArray extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class KAZE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef KAZEPtr = ffi.Pointer<KAZE>;

final class KalmanFilter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef KalmanFilterPtr = ffi.Pointer<KalmanFilter>;

final class KeyPoint extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double size;

  @ffi.Double()
  external double angle;

  @ffi.Double()
  external double response;

  @ffi.Int()
  external int octave;

  @ffi.Int()
  external int classID;
}

final class Layer extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef LayerPtr = ffi.Pointer<Layer>;

final class MSER extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef MSERPtr = ffi.Pointer<MSER>;

final class Mat extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef MatPtr = ffi.Pointer<Mat>;

final class MergeMertens extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef MergeMertensPtr = ffi.Pointer<MergeMertens>;

final class Moment extends ffi.Struct {
  @ffi.Double()
  external double m00;

  @ffi.Double()
  external double m10;

  @ffi.Double()
  external double m01;

  @ffi.Double()
  external double m20;

  @ffi.Double()
  external double m11;

  @ffi.Double()
  external double m02;

  @ffi.Double()
  external double m30;

  @ffi.Double()
  external double m21;

  @ffi.Double()
  external double m12;

  @ffi.Double()
  external double m03;

  @ffi.Double()
  external double mu20;

  @ffi.Double()
  external double mu11;

  @ffi.Double()
  external double mu02;

  @ffi.Double()
  external double mu30;

  @ffi.Double()
  external double mu21;

  @ffi.Double()
  external double mu12;

  @ffi.Double()
  external double mu03;

  @ffi.Double()
  external double nu20;

  @ffi.Double()
  external double nu11;

  @ffi.Double()
  external double nu02;

  @ffi.Double()
  external double nu30;

  @ffi.Double()
  external double nu21;

  @ffi.Double()
  external double nu12;

  @ffi.Double()
  external double nu03;
}

final class Net extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef NetPtr = ffi.Pointer<Net>;

final class ORB extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef ORBPtr = ffi.Pointer<ORB>;

final class Point extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;
}

final class Point2f extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;
}

final class Point3f extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;

  @ffi.Float()
  external double z;
}

final class PtrStitcher extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef PtrStitcherPtr = ffi.Pointer<PtrStitcher>;

final class QRCodeDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QRCodeDetectorPtr = ffi.Pointer<QRCodeDetector>;

final class RNG extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef RNGPtr = ffi.Pointer<RNG>;

final class Rect extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;
}

final class Rect2f extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;

  @ffi.Float()
  external double width;

  @ffi.Float()
  external double height;
}

final class RotatedRect extends ffi.Struct {
  external Point2f center;

  external Size2f size;

  @ffi.Double()
  external double angle;
}

final class SIFT extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef SIFTPtr = ffi.Pointer<SIFT>;

const int STITCHING_ERR_CAMERA_PARAMS_ADJUST_FAIL = 3;

const int STITCHING_ERR_HOMOGRAPHY_EST_FAIL = 2;

const int STITCHING_ERR_NEED_MORE_IMGS = 1;

const int STITCHING_OK = 0;

const int STITCHING_PANORAMA = 0;

const int STITCHING_SCANS = 1;

final class Scalar extends ffi.Struct {
  @ffi.Double()
  external double val1;

  @ffi.Double()
  external double val2;

  @ffi.Double()
  external double val3;

  @ffi.Double()
  external double val4;
}

final class SimpleBlobDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class SimpleBlobDetectorParams extends ffi.Struct {
  @ffi.UnsignedChar()
  external int blobColor;

  @ffi.Bool()
  external bool filterByArea;

  @ffi.Bool()
  external bool filterByCircularity;

  @ffi.Bool()
  external bool filterByColor;

  @ffi.Bool()
  external bool filterByConvexity;

  @ffi.Bool()
  external bool filterByInertia;

  @ffi.Float()
  external double maxArea;

  @ffi.Float()
  external double maxCircularity;

  @ffi.Float()
  external double maxConvexity;

  @ffi.Float()
  external double maxInertiaRatio;

  @ffi.Float()
  external double maxThreshold;

  @ffi.Float()
  external double minArea;

  @ffi.Float()
  external double minCircularity;

  @ffi.Float()
  external double minConvexity;

  @ffi.Float()
  external double minDistBetweenBlobs;

  @ffi.Float()
  external double minInertiaRatio;

  @ffi.Size()
  external int minRepeatability;

  @ffi.Float()
  external double minThreshold;

  @ffi.Float()
  external double thresholdStep;
}

typedef SimpleBlobDetectorPtr = ffi.Pointer<SimpleBlobDetector>;

final class Size extends ffi.Struct {
  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;
}

final class Size2f extends ffi.Struct {
  @ffi.Float()
  external double width;

  @ffi.Float()
  external double height;
}

final class Stitcher extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class Subdiv2D extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef Subdiv2DPtr = ffi.Pointer<Subdiv2D>;

final class TermCriteria extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.Int()
  external int maxCount;

  @ffi.Double()
  external double epsilon;
}

final class Tracker extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class TrackerGOTURN extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class TrackerMIL extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef TrackerMILPtr = ffi.Pointer<TrackerMIL>;

final class Vec2b extends ffi.Struct {
  @uchar()
  external int val1;

  @uchar()
  external int val2;
}

final class Vec2d extends ffi.Struct {
  @ffi.Double()
  external double val1;

  @ffi.Double()
  external double val2;
}

final class Vec2f extends ffi.Struct {
  @ffi.Float()
  external double val1;

  @ffi.Float()
  external double val2;
}

final class Vec2i extends ffi.Struct {
  @ffi.Int()
  external int val1;

  @ffi.Int()
  external int val2;
}

final class Vec2s extends ffi.Struct {
  @ffi.Short()
  external int val1;

  @ffi.Short()
  external int val2;
}

final class Vec2w extends ffi.Struct {
  @ushort()
  external int val1;

  @ushort()
  external int val2;
}

final class Vec3b extends ffi.Struct {
  @uchar()
  external int val1;

  @uchar()
  external int val2;

  @uchar()
  external int val3;
}

final class Vec3d extends ffi.Struct {
  @ffi.Double()
  external double val1;

  @ffi.Double()
  external double val2;

  @ffi.Double()
  external double val3;
}

final class Vec3f extends ffi.Struct {
  @ffi.Float()
  external double val1;

  @ffi.Float()
  external double val2;

  @ffi.Float()
  external double val3;
}

final class Vec3i extends ffi.Struct {
  @ffi.Int()
  external int val1;

  @ffi.Int()
  external int val2;

  @ffi.Int()
  external int val3;
}

final class Vec3s extends ffi.Struct {
  @ffi.Short()
  external int val1;

  @ffi.Short()
  external int val2;

  @ffi.Short()
  external int val3;
}

final class Vec3w extends ffi.Struct {
  @ushort()
  external int val1;

  @ushort()
  external int val2;

  @ushort()
  external int val3;
}

final class Vec4b extends ffi.Struct {
  @uchar()
  external int val1;

  @uchar()
  external int val2;

  @uchar()
  external int val3;

  @uchar()
  external int val4;
}

final class Vec4d extends ffi.Struct {
  @ffi.Double()
  external double val1;

  @ffi.Double()
  external double val2;

  @ffi.Double()
  external double val3;

  @ffi.Double()
  external double val4;
}

final class Vec4f extends ffi.Struct {
  @ffi.Float()
  external double val1;

  @ffi.Float()
  external double val2;

  @ffi.Float()
  external double val3;

  @ffi.Float()
  external double val4;
}

final class Vec4i extends ffi.Struct {
  @ffi.Int()
  external int val1;

  @ffi.Int()
  external int val2;

  @ffi.Int()
  external int val3;

  @ffi.Int()
  external int val4;
}

final class Vec4s extends ffi.Struct {
  @ffi.Short()
  external int val1;

  @ffi.Short()
  external int val2;

  @ffi.Short()
  external int val3;

  @ffi.Short()
  external int val4;
}

final class Vec4w extends ffi.Struct {
  @ushort()
  external int val1;

  @ushort()
  external int val2;

  @ushort()
  external int val3;

  @ushort()
  external int val4;
}

final class Vec6d extends ffi.Struct {
  @ffi.Double()
  external double val1;

  @ffi.Double()
  external double val2;

  @ffi.Double()
  external double val3;

  @ffi.Double()
  external double val4;

  @ffi.Double()
  external double val5;

  @ffi.Double()
  external double val6;
}

final class Vec6f extends ffi.Struct {
  @ffi.Float()
  external double val1;

  @ffi.Float()
  external double val2;

  @ffi.Float()
  external double val3;

  @ffi.Float()
  external double val4;

  @ffi.Float()
  external double val5;

  @ffi.Float()
  external double val6;
}

final class Vec6i extends ffi.Struct {
  @ffi.Int()
  external int val1;

  @ffi.Int()
  external int val2;

  @ffi.Int()
  external int val3;

  @ffi.Int()
  external int val4;

  @ffi.Int()
  external int val5;

  @ffi.Int()
  external int val6;
}

final class Vec8i extends ffi.Struct {
  @ffi.Int()
  external int val1;

  @ffi.Int()
  external int val2;

  @ffi.Int()
  external int val3;

  @ffi.Int()
  external int val4;

  @ffi.Int()
  external int val5;

  @ffi.Int()
  external int val6;

  @ffi.Int()
  external int val7;

  @ffi.Int()
  external int val8;
}

final class VecChar extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecCharPtr = ffi.Pointer<VecChar>;

final class VecDMatch extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecDMatchPtr = ffi.Pointer<VecDMatch>;

final class VecDouble extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecDoublePtr = ffi.Pointer<VecDouble>;

final class VecFloat extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecFloatPtr = ffi.Pointer<VecFloat>;

final class VecInt extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecIntPtr = ffi.Pointer<VecInt>;

final class VecKeyPoint extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecKeyPointPtr = ffi.Pointer<VecKeyPoint>;

final class VecMat extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecMatPtr = ffi.Pointer<VecMat>;

final class VecPoint extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class VecPoint2f extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecPoint2fPtr = ffi.Pointer<VecPoint2f>;

final class VecPoint3f extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecPoint3fPtr = ffi.Pointer<VecPoint3f>;
typedef VecPointPtr = ffi.Pointer<VecPoint>;

final class VecRect extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecRectPtr = ffi.Pointer<VecRect>;

final class VecUChar extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecUCharPtr = ffi.Pointer<VecUChar>;

final class VecVecChar extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecVecCharPtr = ffi.Pointer<VecVecChar>;

final class VecVecDMatch extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecVecDMatchPtr = ffi.Pointer<VecVecDMatch>;

final class VecVecPoint extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class VecVecPoint2f extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecVecPoint2fPtr = ffi.Pointer<VecVecPoint2f>;

final class VecVecPoint3f extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VecVecPoint3fPtr = ffi.Pointer<VecVecPoint3f>;
typedef VecVecPointPtr = ffi.Pointer<VecVecPoint>;

final class VideoCapture extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VideoCapturePtr = ffi.Pointer<VideoCapture>;

final class VideoWriter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VideoWriterPtr = ffi.Pointer<VideoWriter>;

final class WeChatQRCode extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef WeChatQRCodePtr = ffi.Pointer<WeChatQRCode>;
typedef double_t = ffi.Double;
typedef Dartdouble_t = double;
typedef float_t = ffi.Float;
typedef Dartfloat_t = double;
typedef uchar = ffi.UnsignedChar;
typedef Dartuchar = int;
typedef ushort = ffi.UnsignedShort;
typedef Dartushort = int;
