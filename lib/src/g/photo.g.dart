// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:opencv_dart/opencv_dart.dart')
library;

import 'dart:ffi' as ffi;
import 'package:opencv_dart/src/g/types.g.dart' as imp1;
import '' as self;

@ffi.Native<ffi.Void Function(AlignMTBPtr)>()
external void AlignMTB_Close(
  AlignMTBPtr b,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<AlignMTB>)>()
external ffi.Pointer<CvStatus> AlignMTB_Create(
  ffi.Pointer<AlignMTB> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Bool, ffi.Pointer<AlignMTB>)>()
external ffi.Pointer<CvStatus> AlignMTB_CreateWithParams(
  int max_bits,
  int exclude_range,
  bool cut,
  ffi.Pointer<AlignMTB> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> AlignMTB_CreateWithParams_Async(
  int max_bits,
  int exclude_range,
  bool cut,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> AlignMTB_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(AlignMTB, VecMat, ffi.Pointer<VecMat>)>()
external ffi.Pointer<CvStatus> AlignMTB_Process(
  AlignMTB b,
  VecMat src,
  ffi.Pointer<VecMat> dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(AlignMTB, VecMat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> AlignMTB_Process_Async(
  AlignMTB b,
  VecMat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Float)>()
external ffi.Pointer<CvStatus> ColorChange(
  Mat src,
  Mat mask,
  Mat dst,
  double red_mul,
  double green_mul,
  double blue_mul,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Float, ffi.Float, ffi.Float, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> ColorChange_Async(
  Mat src,
  Mat mask,
  double red_mul,
  double green_mul,
  double blue_mul,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Float, ffi.Float)>()
external ffi.Pointer<CvStatus> DetailEnhance(
  Mat src,
  Mat dst,
  double sigma_s,
  double sigma_r,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Float, ffi.Float, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> DetailEnhance_Async(
  Mat src,
  double sigma_s,
  double sigma_r,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Float, ffi.Float)>()
external ffi.Pointer<CvStatus> EdgePreservingFilter(
  Mat src,
  Mat dst,
  int filter,
  double sigma_s,
  double sigma_r,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Float, ffi.Float, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> EdgePreservingFilter_Async(
  Mat src,
  int filter,
  double sigma_s,
  double sigma_r,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoising(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoisingColored(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecMat, Mat, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoisingColoredMulti(
  VecMat src,
  Mat dst,
  int imgToDenoiseIndex,
  int temporalWindowSize,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecMat, Mat, ffi.Int, ffi.Int, ffi.Float,
        ffi.Float, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoisingColoredMultiWithParams(
  VecMat src,
  Mat dst,
  int imgToDenoiseIndex,
  int temporalWindowSize,
  double h,
  double hColor,
  int templateWindowSize,
  int searchWindowSize,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecMat, ffi.Int, ffi.Int, ffi.Float,
        ffi.Float, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoisingColoredMultiWithParams_Async(
  VecMat src,
  int imgToDenoiseIndex,
  int temporalWindowSize,
  double h,
  double hColor,
  int templateWindowSize,
  int searchWindowSize,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecMat, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoisingColoredMulti_Async(
  VecMat src,
  int imgToDenoiseIndex,
  int temporalWindowSize,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Float, ffi.Float, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoisingColoredWithParams(
  Mat src,
  Mat dst,
  double h,
  double hColor,
  int templateWindowSize,
  int searchWindowSize,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Float, ffi.Float, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoisingColoredWithParams_Async(
  Mat src,
  double h,
  double hColor,
  int templateWindowSize,
  int searchWindowSize,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoisingColored_Async(
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Float, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoisingWithParams(
  Mat src,
  Mat dst,
  double h,
  int templateWindowSize,
  int searchWindowSize,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Float, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoisingWithParams_Async(
  Mat src,
  double h,
  int templateWindowSize,
  int searchWindowSize,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FastNlMeansDenoising_Async(
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Float, ffi.Float)>()
external ffi.Pointer<CvStatus> IlluminationChange(
  Mat src,
  Mat mask,
  Mat dst,
  double alpha,
  double beta,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Float, ffi.Float, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> IlluminationChange_Async(
  Mat src,
  Mat mask,
  double alpha,
  double beta,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(MergeMertensPtr)>()
external void MergeMertens_Close(
  MergeMertensPtr b,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<MergeMertens>)>()
external ffi.Pointer<CvStatus> MergeMertens_Create(
  ffi.Pointer<MergeMertens> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Float, ffi.Float, ffi.Float, ffi.Pointer<MergeMertens>)>()
external ffi.Pointer<CvStatus> MergeMertens_CreateWithParams(
  double contrast_weight,
  double saturation_weight,
  double exposure_weight,
  ffi.Pointer<MergeMertens> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Float, ffi.Float, ffi.Float, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> MergeMertens_CreateWithParams_Async(
  double contrast_weight,
  double saturation_weight,
  double exposure_weight,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> MergeMertens_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(MergeMertens, VecMat, Mat)>()
external ffi.Pointer<CvStatus> MergeMertens_Process(
  MergeMertens b,
  VecMat src,
  Mat dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(MergeMertens, VecMat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> MergeMertens_Process_Async(
  MergeMertens b,
  VecMat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Float)>()
external ffi.Pointer<CvStatus> PencilSketch(
  Mat src,
  Mat dst1,
  Mat dst2,
  double sigma_s,
  double sigma_r,
  double shade_factor,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Float, ffi.Float, ffi.Float, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> PencilSketch_Async(
  Mat src,
  double sigma_s,
  double sigma_r,
  double shade_factor,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Float, ffi.Int)>()
external ffi.Pointer<CvStatus> PhotoInpaint(
  Mat src,
  Mat mask,
  Mat dst,
  double inpaint_radius,
  int algorithm_type,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Float, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> PhotoInpaint_Async(
  Mat src,
  Mat mask,
  double inpaint_radius,
  int algorithm_type,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Point, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> SeamlessClone(
  Mat src,
  Mat dst,
  Mat mask,
  Point p,
  Mat blend,
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Point, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> SeamlessClone_Async(
  Mat src,
  Mat dst,
  Mat mask,
  Point p,
  int flags,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Float, ffi.Float)>()
external ffi.Pointer<CvStatus> Stylization(
  Mat src,
  Mat dst,
  double sigma_s,
  double sigma_r,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Float, ffi.Float, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Stylization_Async(
  Mat src,
  double sigma_s,
  double sigma_r,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Int)>()
external ffi.Pointer<CvStatus> TextureFlattening(
  Mat src,
  Mat mask,
  Mat dst,
  double low_threshold,
  double high_threshold,
  int kernel_size,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Float, ffi.Float, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> TextureFlattening_Async(
  Mat src,
  Mat mask,
  double low_threshold,
  double high_threshold,
  int kernel_size,
  imp1.CvCallback_1 callback,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AlignMTBPtr)>>
      get AlignMTB_Close => ffi.Native.addressOf(self.AlignMTB_Close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(MergeMertensPtr)>>
      get MergeMertens_Close => ffi.Native.addressOf(self.MergeMertens_Close);
}

final class AlignMTB extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AlignMTBPtr = ffi.Pointer<AlignMTB>;
typedef CvStatus = imp1.CvStatus;
typedef Mat = imp1.Mat;

final class MergeMertens extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef MergeMertensPtr = ffi.Pointer<MergeMertens>;
typedef Point = imp1.Point;
typedef VecMat = imp1.VecMat;
