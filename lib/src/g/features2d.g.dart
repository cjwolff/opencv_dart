// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:opencv_dart/opencv_dart.dart')
library;

import 'dart:ffi' as ffi;
import 'package:opencv_dart/src/g/types.g.dart' as imp1;
import '' as self;

@ffi.Native<ffi.Void Function(AKAZEPtr)>()
external void AKAZE_Close(
  AKAZEPtr a,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(AKAZEPtr, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> AKAZE_Close_Async(
  AKAZEPtr self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<AKAZE>)>()
external ffi.Pointer<CvStatus> AKAZE_Create(
  ffi.Pointer<AKAZE> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> AKAZE_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(AKAZE, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> AKAZE_Detect(
  AKAZE a,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        AKAZE, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> AKAZE_DetectAndCompute(
  AKAZE a,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(AKAZE, Mat, Mat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> AKAZE_DetectAndCompute_Async(
  AKAZE self,
  Mat src,
  Mat mask,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(AKAZE, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> AKAZE_Detect_Async(
  AKAZE self,
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(AgastFeatureDetectorPtr)>()
external void AgastFeatureDetector_Close(
  AgastFeatureDetectorPtr a,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        AgastFeatureDetectorPtr, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> AgastFeatureDetector_Close_Async(
  AgastFeatureDetectorPtr self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<AgastFeatureDetector>)>()
external ffi.Pointer<CvStatus> AgastFeatureDetector_Create(
  ffi.Pointer<AgastFeatureDetector> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> AgastFeatureDetector_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        AgastFeatureDetector, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> AgastFeatureDetector_Detect(
  AgastFeatureDetector a,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        AgastFeatureDetector, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> AgastFeatureDetector_Detect_Async(
  AgastFeatureDetector self,
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(BFMatcherPtr)>()
external void BFMatcher_Close(
  BFMatcherPtr b,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(BFMatcherPtr, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> BFMatcher_Close_Async(
  BFMatcherPtr self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<BFMatcher>)>()
external ffi.Pointer<CvStatus> BFMatcher_Create(
  ffi.Pointer<BFMatcher> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Bool, ffi.Pointer<BFMatcher>)>()
external ffi.Pointer<CvStatus> BFMatcher_CreateWithParams(
  int normType,
  bool crossCheck,
  ffi.Pointer<BFMatcher> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> BFMatcher_CreateWithParams_Async(
  int normType,
  bool crossCheck,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> BFMatcher_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BFMatcher, Mat, Mat, ffi.Int, ffi.Pointer<VecVecDMatch>)>()
external ffi.Pointer<CvStatus> BFMatcher_KnnMatch(
  BFMatcher b,
  Mat query,
  Mat train,
  int k,
  ffi.Pointer<VecVecDMatch> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BFMatcher, Mat, Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> BFMatcher_KnnMatch_Async(
  BFMatcher self,
  Mat query,
  Mat train,
  int k,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BFMatcher, Mat, Mat, ffi.Pointer<VecDMatch>)>()
external ffi.Pointer<CvStatus> BFMatcher_Match(
  BFMatcher b,
  Mat query,
  Mat train,
  ffi.Pointer<VecDMatch> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(BFMatcher, Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> BFMatcher_Match_Async(
  BFMatcher self,
  Mat query,
  Mat train,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(BRISKPtr)>()
external void BRISK_Close(
  BRISKPtr b,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(BRISKPtr, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> BRISK_Close_Async(
  BRISKPtr self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<BRISK>)>()
external ffi.Pointer<CvStatus> BRISK_Create(
  ffi.Pointer<BRISK> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> BRISK_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(BRISK, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> BRISK_Detect(
  BRISK b,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BRISK, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> BRISK_DetectAndCompute(
  BRISK b,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(BRISK, Mat, Mat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> BRISK_DetectAndCompute_Async(
  BRISK self,
  Mat src,
  Mat mask,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(BRISK, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> BRISK_Detect_Async(
  BRISK self,
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, VecKeyPoint, Mat, Scalar, ffi.Int)>()
external ffi.Pointer<CvStatus> DrawKeyPoints(
  Mat src,
  VecKeyPoint kp,
  Mat dst,
  Scalar color,
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecKeyPoint, Mat, Scalar, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> DrawKeyPoints_Async(
  Mat src,
  VecKeyPoint kp,
  Mat dst,
  Scalar color,
  int flags,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, VecKeyPoint, Mat, VecKeyPoint,
        VecDMatch, Mat, Scalar, Scalar, VecChar, ffi.Int)>()
external ffi.Pointer<CvStatus> DrawMatches(
  Mat img1,
  VecKeyPoint kp1,
  Mat img2,
  VecKeyPoint kp2,
  VecDMatch matches1to2,
  Mat outImg,
  Scalar matchesColor,
  Scalar pointColor,
  VecChar matchesMask,
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, VecKeyPoint, Mat, VecKeyPoint,
        VecDMatch, Mat, Scalar, Scalar, VecChar, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> DrawMatches_Async(
  Mat img1,
  VecKeyPoint kp1,
  Mat img2,
  VecKeyPoint kp2,
  VecDMatch matches1to2,
  Mat outImg,
  Scalar matchesColor,
  Scalar pointColor,
  VecChar matchesMask,
  int flags,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(FastFeatureDetectorPtr)>()
external void FastFeatureDetector_Close(
  FastFeatureDetectorPtr f,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(FastFeatureDetectorPtr, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> FastFeatureDetector_Close_Async(
  FastFeatureDetectorPtr self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<FastFeatureDetector>)>()
external ffi.Pointer<CvStatus> FastFeatureDetector_Create(
  ffi.Pointer<FastFeatureDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Bool, ffi.Int, ffi.Pointer<FastFeatureDetector>)>()
external ffi.Pointer<CvStatus> FastFeatureDetector_CreateWithParams(
  int threshold,
  bool nonmaxSuppression,
  int type,
  ffi.Pointer<FastFeatureDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Bool, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FastFeatureDetector_CreateWithParams_Async(
  int threshold,
  bool nonmaxSuppression,
  int type,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FastFeatureDetector_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FastFeatureDetector, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> FastFeatureDetector_Detect(
  FastFeatureDetector f,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FastFeatureDetector, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FastFeatureDetector_Detect_Async(
  FastFeatureDetector self,
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(FlannBasedMatcherPtr)>()
external void FlannBasedMatcher_Close(
  FlannBasedMatcherPtr f,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(FlannBasedMatcherPtr, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> FlannBasedMatcher_Close_Async(
  FlannBasedMatcherPtr self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<FlannBasedMatcher>)>()
external ffi.Pointer<CvStatus> FlannBasedMatcher_Create(
  ffi.Pointer<FlannBasedMatcher> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FlannBasedMatcher_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FlannBasedMatcher, Mat, Mat, ffi.Int, ffi.Pointer<VecVecDMatch>)>()
external ffi.Pointer<CvStatus> FlannBasedMatcher_KnnMatch(
  FlannBasedMatcher f,
  Mat query,
  Mat train,
  int k,
  ffi.Pointer<VecVecDMatch> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FlannBasedMatcher, Mat, Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FlannBasedMatcher_KnnMatch_Async(
  FlannBasedMatcher self,
  Mat query,
  Mat train,
  int k,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(GFTTDetectorPtr)>()
external void GFTTDetector_Close(
  GFTTDetectorPtr a,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(GFTTDetectorPtr, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> GFTTDetector_Close_Async(
  GFTTDetectorPtr self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<GFTTDetector>)>()
external ffi.Pointer<CvStatus> GFTTDetector_Create(
  ffi.Pointer<GFTTDetector> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> GFTTDetector_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        GFTTDetector, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> GFTTDetector_Detect(
  GFTTDetector a,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(GFTTDetector, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> GFTTDetector_Detect_Async(
  GFTTDetector self,
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(KAZEPtr)>()
external void KAZE_Close(
  KAZEPtr a,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KAZEPtr, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> KAZE_Close_Async(
  KAZEPtr self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<KAZE>)>()
external ffi.Pointer<CvStatus> KAZE_Create(
  ffi.Pointer<KAZE> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KAZE_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KAZE, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> KAZE_Detect(
  KAZE a,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        KAZE, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> KAZE_DetectAndCompute(
  KAZE a,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KAZE, Mat, Mat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> KAZE_DetectAndCompute_Async(
  KAZE self,
  Mat src,
  Mat mask,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KAZE, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KAZE_Detect_Async(
  KAZE self,
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(MSERPtr)>()
external void MSER_Close(
  MSERPtr a,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(MSERPtr, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> MSER_Close_Async(
  MSERPtr self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<MSER>)>()
external ffi.Pointer<CvStatus> MSER_Create(
  ffi.Pointer<MSER> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> MSER_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(MSER, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> MSER_Detect(
  MSER a,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(MSER, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> MSER_Detect_Async(
  MSER self,
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(ORBPtr)>()
external void ORB_Close(
  ORBPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ORBPtr, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> ORB_Close_Async(
  ORBPtr self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ORB>)>()
external ffi.Pointer<CvStatus> ORB_Create(
  ffi.Pointer<ORB> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Float, ffi.Int, ffi.Int,
        ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ORB>)>()
external ffi.Pointer<CvStatus> ORB_CreateWithParams(
  int nfeatures,
  double scaleFactor,
  int nlevels,
  int edgeThreshold,
  int firstLevel,
  int WTA_K,
  int scoreType,
  int patchSize,
  int fastThreshold,
  ffi.Pointer<ORB> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Float, ffi.Int, ffi.Int,
        ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> ORB_CreateWithParams_Async(
  int nfeatures,
  double scaleFactor,
  int nlevels,
  int edgeThreshold,
  int firstLevel,
  int WTA_K,
  int scoreType,
  int patchSize,
  int fastThreshold,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> ORB_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ORB, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> ORB_Detect(
  ORB self,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ORB, Mat, Mat, ffi.Pointer<Mat>, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> ORB_DetectAndCompute(
  ORB self,
  Mat src,
  Mat mask,
  ffi.Pointer<Mat> desc,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ORB, Mat, Mat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> ORB_DetectAndCompute_Async(
  ORB self,
  Mat src,
  Mat mask,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ORB, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> ORB_Detect_Async(
  ORB self,
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(SIFTPtr)>()
external void SIFT_Close(
  SIFTPtr f,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(SIFTPtr, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> SIFT_Close_Async(
  SIFTPtr self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<SIFT>)>()
external ffi.Pointer<CvStatus> SIFT_Create(
  ffi.Pointer<SIFT> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> SIFT_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(SIFT, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> SIFT_Detect(
  SIFT f,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        SIFT, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> SIFT_DetectAndCompute(
  SIFT f,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(SIFT, Mat, Mat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> SIFT_DetectAndCompute_Async(
  SIFT self,
  Mat src,
  Mat mask,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(SIFT, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> SIFT_Detect_Async(
  SIFT self,
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<SimpleBlobDetectorParams>)>()
external ffi.Pointer<CvStatus> SimpleBlobDetectorParams_Create(
  ffi.Pointer<SimpleBlobDetectorParams> rval,
);

@ffi.Native<ffi.Void Function(SimpleBlobDetectorPtr)>()
external void SimpleBlobDetector_Close(
  SimpleBlobDetectorPtr b,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(SimpleBlobDetectorPtr, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> SimpleBlobDetector_Close_Async(
  SimpleBlobDetectorPtr self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<SimpleBlobDetector>)>()
external ffi.Pointer<CvStatus> SimpleBlobDetector_Create(
  ffi.Pointer<SimpleBlobDetector> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> SimpleBlobDetector_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        SimpleBlobDetectorParams, ffi.Pointer<SimpleBlobDetector>)>()
external ffi.Pointer<CvStatus> SimpleBlobDetector_Create_WithParams(
  SimpleBlobDetectorParams params,
  ffi.Pointer<SimpleBlobDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        SimpleBlobDetectorParams, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> SimpleBlobDetector_Create_WithParams_Async(
  SimpleBlobDetectorParams params,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        SimpleBlobDetector, Mat, ffi.Pointer<VecKeyPoint>)>()
external ffi.Pointer<CvStatus> SimpleBlobDetector_Detect(
  SimpleBlobDetector b,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        SimpleBlobDetector, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> SimpleBlobDetector_Detect_Async(
  SimpleBlobDetector self,
  Mat src,
  imp1.CvCallback_1 callback,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AKAZEPtr)>>
      get AKAZE_Close => ffi.Native.addressOf(self.AKAZE_Close);
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(AKAZEPtr, imp1.CvCallback_0)>>
      get AKAZE_Close_Async => ffi.Native.addressOf(self.AKAZE_Close_Async);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AgastFeatureDetectorPtr)>>
      get AgastFeatureDetector_Close =>
          ffi.Native.addressOf(self.AgastFeatureDetector_Close);
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  AgastFeatureDetectorPtr, imp1.CvCallback_0)>>
      get AgastFeatureDetector_Close_Async =>
          ffi.Native.addressOf(self.AgastFeatureDetector_Close_Async);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BFMatcherPtr)>>
      get BFMatcher_Close => ffi.Native.addressOf(self.BFMatcher_Close);
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(BFMatcherPtr, imp1.CvCallback_0)>>
      get BFMatcher_Close_Async =>
          ffi.Native.addressOf(self.BFMatcher_Close_Async);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BRISKPtr)>>
      get BRISK_Close => ffi.Native.addressOf(self.BRISK_Close);
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(BRISKPtr, imp1.CvCallback_0)>>
      get BRISK_Close_Async => ffi.Native.addressOf(self.BRISK_Close_Async);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FastFeatureDetectorPtr)>>
      get FastFeatureDetector_Close =>
          ffi.Native.addressOf(self.FastFeatureDetector_Close);
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  FastFeatureDetectorPtr, imp1.CvCallback_0)>>
      get FastFeatureDetector_Close_Async =>
          ffi.Native.addressOf(self.FastFeatureDetector_Close_Async);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FlannBasedMatcherPtr)>>
      get FlannBasedMatcher_Close =>
          ffi.Native.addressOf(self.FlannBasedMatcher_Close);
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  FlannBasedMatcherPtr, imp1.CvCallback_0)>>
      get FlannBasedMatcher_Close_Async =>
          ffi.Native.addressOf(self.FlannBasedMatcher_Close_Async);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(GFTTDetectorPtr)>>
      get GFTTDetector_Close => ffi.Native.addressOf(self.GFTTDetector_Close);
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  GFTTDetectorPtr, imp1.CvCallback_0)>>
      get GFTTDetector_Close_Async =>
          ffi.Native.addressOf(self.GFTTDetector_Close_Async);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KAZEPtr)>> get KAZE_Close =>
      ffi.Native.addressOf(self.KAZE_Close);
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(KAZEPtr, imp1.CvCallback_0)>>
      get KAZE_Close_Async => ffi.Native.addressOf(self.KAZE_Close_Async);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(MSERPtr)>> get MSER_Close =>
      ffi.Native.addressOf(self.MSER_Close);
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(MSERPtr, imp1.CvCallback_0)>>
      get MSER_Close_Async => ffi.Native.addressOf(self.MSER_Close_Async);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ORBPtr)>> get ORB_Close =>
      ffi.Native.addressOf(self.ORB_Close);
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(ORBPtr, imp1.CvCallback_0)>>
      get ORB_Close_Async => ffi.Native.addressOf(self.ORB_Close_Async);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(SIFTPtr)>> get SIFT_Close =>
      ffi.Native.addressOf(self.SIFT_Close);
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(SIFTPtr, imp1.CvCallback_0)>>
      get SIFT_Close_Async => ffi.Native.addressOf(self.SIFT_Close_Async);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(SimpleBlobDetectorPtr)>>
      get SimpleBlobDetector_Close =>
          ffi.Native.addressOf(self.SimpleBlobDetector_Close);
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CvStatus> Function(
                  SimpleBlobDetectorPtr, imp1.CvCallback_0)>>
      get SimpleBlobDetector_Close_Async =>
          ffi.Native.addressOf(self.SimpleBlobDetector_Close_Async);
}

final class AKAZE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AKAZEPtr = ffi.Pointer<AKAZE>;

final class AgastFeatureDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AgastFeatureDetectorPtr = ffi.Pointer<AgastFeatureDetector>;

final class BFMatcher extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BFMatcherPtr = ffi.Pointer<BFMatcher>;

final class BRISK extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BRISKPtr = ffi.Pointer<BRISK>;
typedef CvStatus = imp1.CvStatus;

final class FastFeatureDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef FastFeatureDetectorPtr = ffi.Pointer<FastFeatureDetector>;

final class FlannBasedMatcher extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef FlannBasedMatcherPtr = ffi.Pointer<FlannBasedMatcher>;

final class GFTTDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GFTTDetectorPtr = ffi.Pointer<GFTTDetector>;

final class KAZE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef KAZEPtr = ffi.Pointer<KAZE>;

final class MSER extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef MSERPtr = ffi.Pointer<MSER>;
typedef Mat = imp1.Mat;

final class ORB extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef ORBPtr = ffi.Pointer<ORB>;

final class SIFT extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef SIFTPtr = ffi.Pointer<SIFT>;
typedef Scalar = imp1.Scalar;

final class SimpleBlobDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class SimpleBlobDetectorParams extends ffi.Struct {
  @ffi.UnsignedChar()
  external int blobColor;

  @ffi.Bool()
  external bool filterByArea;

  @ffi.Bool()
  external bool filterByCircularity;

  @ffi.Bool()
  external bool filterByColor;

  @ffi.Bool()
  external bool filterByConvexity;

  @ffi.Bool()
  external bool filterByInertia;

  @ffi.Float()
  external double maxArea;

  @ffi.Float()
  external double maxCircularity;

  @ffi.Float()
  external double maxConvexity;

  @ffi.Float()
  external double maxInertiaRatio;

  @ffi.Float()
  external double maxThreshold;

  @ffi.Float()
  external double minArea;

  @ffi.Float()
  external double minCircularity;

  @ffi.Float()
  external double minConvexity;

  @ffi.Float()
  external double minDistBetweenBlobs;

  @ffi.Float()
  external double minInertiaRatio;

  @ffi.Size()
  external int minRepeatability;

  @ffi.Float()
  external double minThreshold;

  @ffi.Float()
  external double thresholdStep;
}

typedef SimpleBlobDetectorPtr = ffi.Pointer<SimpleBlobDetector>;
typedef VecChar = imp1.VecChar;
typedef VecDMatch = imp1.VecDMatch;
typedef VecKeyPoint = imp1.VecKeyPoint;
typedef VecVecDMatch = imp1.VecVecDMatch;
