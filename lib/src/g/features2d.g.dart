// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:dartcv4/dartcv.dart')
library;

import 'dart:ffi' as ffi;
import 'package:dartcv4/src/g/types.g.dart' as imp1;
import '' as self;

@ffi.Native<ffi.Void Function(AKAZEPtr)>()
external void cv_AKAZE_close(
  AKAZEPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<AKAZE>)>()
external ffi.Pointer<CvStatus> cv_AKAZE_create(
  ffi.Pointer<AKAZE> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        AKAZE, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_AKAZE_detect(
  AKAZE self,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        AKAZE, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_AKAZE_detectAndCompute(
  AKAZE self,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(AgastFeatureDetectorPtr)>()
external void cv_AgastFeatureDetector_close(
  AgastFeatureDetectorPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<AgastFeatureDetector>)>()
external ffi.Pointer<CvStatus> cv_AgastFeatureDetector_create(
  ffi.Pointer<AgastFeatureDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(AgastFeatureDetector, Mat,
        ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_AgastFeatureDetector_detect(
  AgastFeatureDetector self,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(BFMatcherPtr)>()
external void cv_BFMatcher_close(
  BFMatcherPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<BFMatcher>)>()
external ffi.Pointer<CvStatus> cv_BFMatcher_create(
  ffi.Pointer<BFMatcher> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Bool, ffi.Pointer<BFMatcher>)>()
external ffi.Pointer<CvStatus> cv_BFMatcher_create_1(
  int normType,
  bool crossCheck,
  ffi.Pointer<BFMatcher> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(BFMatcher, Mat, Mat, ffi.Int,
        ffi.Pointer<VecVecDMatch>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_BFMatcher_knnMatch(
  BFMatcher self,
  Mat query,
  Mat train,
  int k,
  ffi.Pointer<VecVecDMatch> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BFMatcher, Mat, Mat, ffi.Pointer<VecDMatch>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_BFMatcher_match(
  BFMatcher self,
  Mat query,
  Mat train,
  ffi.Pointer<VecDMatch> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(BRISKPtr)>()
external void cv_BRISK_close(
  BRISKPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<BRISK>)>()
external ffi.Pointer<CvStatus> cv_BRISK_create(
  ffi.Pointer<BRISK> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BRISK, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_BRISK_detect(
  BRISK self,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BRISK, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_BRISK_detectAndCompute(
  BRISK self,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(FastFeatureDetectorPtr)>()
external void cv_FastFeatureDetector_close(
  FastFeatureDetectorPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<FastFeatureDetector>)>()
external ffi.Pointer<CvStatus> cv_FastFeatureDetector_create(
  ffi.Pointer<FastFeatureDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Bool, ffi.Int, ffi.Pointer<FastFeatureDetector>)>()
external ffi.Pointer<CvStatus> cv_FastFeatureDetector_create_1(
  int threshold,
  bool nonmaxSuppression,
  int type,
  ffi.Pointer<FastFeatureDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(FastFeatureDetector, Mat,
        ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_FastFeatureDetector_detect(
  FastFeatureDetector self,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(FlannBasedMatcherPtr)>()
external void cv_FlannBasedMatcher_close(
  FlannBasedMatcherPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<FlannBasedMatcher>)>()
external ffi.Pointer<CvStatus> cv_FlannBasedMatcher_create(
  ffi.Pointer<FlannBasedMatcher> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(FlannBasedMatcher, Mat, Mat, ffi.Int,
        ffi.Pointer<VecVecDMatch>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_FlannBasedMatcher_knnMatch(
  FlannBasedMatcher self,
  Mat query,
  Mat train,
  int k,
  ffi.Pointer<VecVecDMatch> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(GFTTDetectorPtr)>()
external void cv_GFTTDetector_close(
  GFTTDetectorPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<GFTTDetector>)>()
external ffi.Pointer<CvStatus> cv_GFTTDetector_create(
  ffi.Pointer<GFTTDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        GFTTDetector, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_GFTTDetector_detect(
  GFTTDetector self,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(KAZEPtr)>()
external void cv_KAZE_close(
  KAZEPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<KAZE>)>()
external ffi.Pointer<CvStatus> cv_KAZE_create(
  ffi.Pointer<KAZE> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        KAZE, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_KAZE_detect(
  KAZE self,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        KAZE, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_KAZE_detectAndCompute(
  KAZE self,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(MSERPtr)>()
external void cv_MSER_close(
  MSERPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<MSER>)>()
external ffi.Pointer<CvStatus> cv_MSER_create(
  ffi.Pointer<MSER> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        MSER, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_MSER_detect(
  MSER self,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(ORBPtr)>()
external void cv_ORB_close(
  ORBPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ORB>)>()
external ffi.Pointer<CvStatus> cv_ORB_create(
  ffi.Pointer<ORB> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Float, ffi.Int, ffi.Int,
        ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ORB>)>()
external ffi.Pointer<CvStatus> cv_ORB_create_1(
  int nfeatures,
  double scaleFactor,
  int nlevels,
  int edgeThreshold,
  int firstLevel,
  int WTA_K,
  int scoreType,
  int patchSize,
  int fastThreshold,
  ffi.Pointer<ORB> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ORB, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ORB_detect(
  ORB self,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ORB, Mat, Mat, ffi.Pointer<VecKeyPoint>, Mat,
        ffi.Bool, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_ORB_detectAndCompute(
  ORB self,
  Mat src,
  Mat mask,
  ffi.Pointer<VecKeyPoint> out_keypoints,
  Mat desc,
  bool useProvidedKeypoints,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(SIFTPtr)>()
external void cv_SIFT_close(
  SIFTPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<SIFT>)>()
external ffi.Pointer<CvStatus> cv_SIFT_create(
  ffi.Pointer<SIFT> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        SIFT, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_SIFT_detect(
  SIFT self,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        SIFT, Mat, Mat, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_SIFT_detectAndCompute(
  SIFT self,
  Mat src,
  Mat mask,
  Mat desc,
  ffi.Pointer<VecKeyPoint> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<SimpleBlobDetectorParams>)>()
external ffi.Pointer<CvStatus> cv_SimpleBlobDetectorParams_create(
  ffi.Pointer<SimpleBlobDetectorParams> rval,
);

@ffi.Native<ffi.Void Function(SimpleBlobDetectorPtr)>()
external void cv_SimpleBlobDetector_close(
  SimpleBlobDetectorPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<SimpleBlobDetector>)>()
external ffi.Pointer<CvStatus> cv_SimpleBlobDetector_create(
  ffi.Pointer<SimpleBlobDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        SimpleBlobDetectorParams, ffi.Pointer<SimpleBlobDetector>)>()
external ffi.Pointer<CvStatus> cv_SimpleBlobDetector_create_1(
  SimpleBlobDetectorParams params,
  ffi.Pointer<SimpleBlobDetector> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        SimpleBlobDetector, Mat, ffi.Pointer<VecKeyPoint>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_SimpleBlobDetector_detect(
  SimpleBlobDetector self,
  Mat src,
  ffi.Pointer<VecKeyPoint> rval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecKeyPoint, Mat, Scalar, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_drawKeyPoints(
  Mat src,
  VecKeyPoint kp,
  Mat dst,
  Scalar color,
  int flags,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, VecKeyPoint, Mat, VecKeyPoint,
        VecDMatch, Mat, Scalar, Scalar, VecChar, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> cv_drawMatches(
  Mat img1,
  VecKeyPoint kp1,
  Mat img2,
  VecKeyPoint kp2,
  VecDMatch matches1to2,
  Mat outImg,
  Scalar matchesColor,
  Scalar pointColor,
  VecChar matchesMask,
  int flags,
  imp1.CvCallback_0 callback,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AKAZEPtr)>>
      get cv_AKAZE_close => ffi.Native.addressOf(self.cv_AKAZE_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AgastFeatureDetectorPtr)>>
      get cv_AgastFeatureDetector_close =>
          ffi.Native.addressOf(self.cv_AgastFeatureDetector_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BFMatcherPtr)>>
      get cv_BFMatcher_close => ffi.Native.addressOf(self.cv_BFMatcher_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BRISKPtr)>>
      get cv_BRISK_close => ffi.Native.addressOf(self.cv_BRISK_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FastFeatureDetectorPtr)>>
      get cv_FastFeatureDetector_close =>
          ffi.Native.addressOf(self.cv_FastFeatureDetector_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FlannBasedMatcherPtr)>>
      get cv_FlannBasedMatcher_close =>
          ffi.Native.addressOf(self.cv_FlannBasedMatcher_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(GFTTDetectorPtr)>>
      get cv_GFTTDetector_close =>
          ffi.Native.addressOf(self.cv_GFTTDetector_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KAZEPtr)>>
      get cv_KAZE_close => ffi.Native.addressOf(self.cv_KAZE_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(MSERPtr)>>
      get cv_MSER_close => ffi.Native.addressOf(self.cv_MSER_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ORBPtr)>> get cv_ORB_close =>
      ffi.Native.addressOf(self.cv_ORB_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(SIFTPtr)>>
      get cv_SIFT_close => ffi.Native.addressOf(self.cv_SIFT_close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(SimpleBlobDetectorPtr)>>
      get cv_SimpleBlobDetector_close =>
          ffi.Native.addressOf(self.cv_SimpleBlobDetector_close);
}

final class AKAZE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AKAZEPtr = ffi.Pointer<AKAZE>;

final class AgastFeatureDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AgastFeatureDetectorPtr = ffi.Pointer<AgastFeatureDetector>;

final class BFMatcher extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BFMatcherPtr = ffi.Pointer<BFMatcher>;

final class BRISK extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BRISKPtr = ffi.Pointer<BRISK>;
typedef CvStatus = imp1.CvStatus;

final class FastFeatureDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef FastFeatureDetectorPtr = ffi.Pointer<FastFeatureDetector>;

final class FlannBasedMatcher extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef FlannBasedMatcherPtr = ffi.Pointer<FlannBasedMatcher>;

final class GFTTDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef GFTTDetectorPtr = ffi.Pointer<GFTTDetector>;

final class KAZE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef KAZEPtr = ffi.Pointer<KAZE>;

final class MSER extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef MSERPtr = ffi.Pointer<MSER>;
typedef Mat = imp1.Mat;

final class ORB extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef ORBPtr = ffi.Pointer<ORB>;

final class SIFT extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef SIFTPtr = ffi.Pointer<SIFT>;
typedef Scalar = imp1.Scalar;

final class SimpleBlobDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class SimpleBlobDetectorParams extends ffi.Struct {
  @ffi.UnsignedChar()
  external int blobColor;

  @ffi.Bool()
  external bool filterByArea;

  @ffi.Bool()
  external bool filterByCircularity;

  @ffi.Bool()
  external bool filterByColor;

  @ffi.Bool()
  external bool filterByConvexity;

  @ffi.Bool()
  external bool filterByInertia;

  @ffi.Float()
  external double maxArea;

  @ffi.Float()
  external double maxCircularity;

  @ffi.Float()
  external double maxConvexity;

  @ffi.Float()
  external double maxInertiaRatio;

  @ffi.Float()
  external double maxThreshold;

  @ffi.Float()
  external double minArea;

  @ffi.Float()
  external double minCircularity;

  @ffi.Float()
  external double minConvexity;

  @ffi.Float()
  external double minDistBetweenBlobs;

  @ffi.Float()
  external double minInertiaRatio;

  @ffi.Size()
  external int minRepeatability;

  @ffi.Float()
  external double minThreshold;

  @ffi.Float()
  external double thresholdStep;
}

typedef SimpleBlobDetectorPtr = ffi.Pointer<SimpleBlobDetector>;
typedef VecChar = imp1.VecChar;
typedef VecDMatch = imp1.VecDMatch;
typedef VecKeyPoint = imp1.VecKeyPoint;
typedef VecVecDMatch = imp1.VecVecDMatch;
