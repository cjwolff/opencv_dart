// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:opencv_dart/opencv_dart.dart')
library;

import 'dart:ffi' as ffi;
import '' as self;
import 'package:opencv_dart/src/g/types.g.dart' as imp1;

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>()
external ffi.Pointer<CvStatus> Trackbar_Create(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  int max,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Int>, ffi.Int)>()
external ffi.Pointer<CvStatus> Trackbar_CreateWithValue(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  ffi.Pointer<ffi.Int> value,
  int max,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Trackbar_GetPos(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>()
external ffi.Pointer<CvStatus> Trackbar_SetMax(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  int pos,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>()
external ffi.Pointer<CvStatus> Trackbar_SetMin(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  int pos,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>()
external ffi.Pointer<CvStatus> Trackbar_SetPos(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> trackname,
  int pos,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Char>)>()
external void Window_Close(
  ffi.Pointer<ffi.Char> winname,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Window_GetProperty(
  ffi.Pointer<ffi.Char> winname,
  int flag,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat)>()
external ffi.Pointer<CvStatus> Window_IMShow(
  ffi.Pointer<ffi.Char> winname,
  Mat mat,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> Window_Move(
  ffi.Pointer<ffi.Char> winname,
  int x,
  int y,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int)>()
external ffi.Pointer<CvStatus> Window_New(
  ffi.Pointer<ffi.Char> winname,
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> Window_Resize(
  ffi.Pointer<ffi.Char> winname,
  int width,
  int height,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<Rect>)>()
external ffi.Pointer<CvStatus> Window_SelectROI(
  ffi.Pointer<ffi.Char> winname,
  Mat img,
  ffi.Pointer<Rect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<VecRect>)>()
external ffi.Pointer<CvStatus> Window_SelectROIs(
  ffi.Pointer<ffi.Char> winname,
  Mat img,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> Window_SetProperty(
  ffi.Pointer<ffi.Char> winname,
  int flag,
  double value,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<CvStatus> Window_SetTitle(
  ffi.Pointer<ffi.Char> winname,
  ffi.Pointer<ffi.Char> title,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Window_WaitKey(
  int delay,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function()>()
external ffi.Pointer<CvStatus> destroyAllWindows();

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>
      get Window_Close => ffi.Native.addressOf(self.Window_Close);
}

typedef CvStatus = imp1.CvStatus;
typedef Mat = imp1.Mat;
typedef Rect = imp1.Rect;
typedef VecRect = imp1.VecRect;
