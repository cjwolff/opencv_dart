// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:opencv_dart/opencv_dart.dart')
library;

import 'dart:ffi' as ffi;
import 'package:opencv_dart/src/g/types.g.dart' as imp1;

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecUChar, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Image_IMDecode(
  VecUChar buf,
  int flags,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecUChar, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Image_IMDecode_Async(
  VecUChar buf,
  int flags,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat,
        ffi.Pointer<ffi.Bool>, ffi.Pointer<VecUChar>)>()
external ffi.Pointer<CvStatus> Image_IMEncode(
  ffi.Pointer<ffi.Char> fileExt,
  Mat img,
  ffi.Pointer<ffi.Bool> success,
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, Mat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> Image_IMEncode_Async(
  ffi.Pointer<ffi.Char> fileExt,
  Mat img,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, Mat, VecI32,
        ffi.Pointer<ffi.Bool>, ffi.Pointer<VecUChar>)>()
external ffi.Pointer<CvStatus> Image_IMEncode_WithParams(
  ffi.Pointer<ffi.Char> fileExt,
  Mat img,
  VecI32 params,
  ffi.Pointer<ffi.Bool> success,
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, Mat, VecI32, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> Image_IMEncode_WithParams_Async(
  ffi.Pointer<ffi.Char> fileExt,
  Mat img,
  VecI32 params,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Image_IMRead(
  ffi.Pointer<ffi.Char> filename,
  int flags,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Image_IMRead_Async(
  ffi.Pointer<ffi.Char> filename,
  int flags,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> Image_IMWrite(
  ffi.Pointer<ffi.Char> filename,
  Mat img,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Image_IMWrite_Async(
  ffi.Pointer<ffi.Char> filename,
  Mat img,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, Mat, VecI32, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> Image_IMWrite_WithParams(
  ffi.Pointer<ffi.Char> filename,
  Mat img,
  VecI32 params,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, Mat, VecI32, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Image_IMWrite_WithParams_Async(
  ffi.Pointer<ffi.Char> filename,
  Mat img,
  VecI32 params,
  imp1.CvCallback_1 callback,
);

typedef CvStatus = imp1.CvStatus;
typedef Mat = imp1.Mat;
typedef VecI32 = imp1.VecI32;
typedef VecUChar = imp1.VecUChar;
