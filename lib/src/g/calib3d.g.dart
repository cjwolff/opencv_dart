// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:opencv_dart/opencv_dart.dart')
library;

import 'dart:ffi' as ffi;
import 'package:opencv_dart/src/g/types.g.dart' as imp1;

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecVecPoint3f, VecVecPoint2f, Size, Mat, Mat,
        Mat, Mat, ffi.Int, TermCriteria, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> CalibrateCamera(
  VecVecPoint3f objectPoints,
  VecVecPoint2f imagePoints,
  Size imageSize,
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat rvecs,
  Mat tvecs,
  int flag,
  TermCriteria criteria,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Size, Mat, ffi.Bool)>()
external ffi.Pointer<CvStatus> DrawChessboardCorners(
  Mat image,
  Size patternSize,
  Mat corners,
  bool patternWasFound,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> EstimateAffine2D(
  VecPoint2f from,
  VecPoint2f to,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, Mat, ffi.Int,
        ffi.Double, ffi.Size, ffi.Double, ffi.Size, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> EstimateAffine2DWithParams(
  VecPoint2f from,
  VecPoint2f to,
  Mat inliers,
  int method,
  double ransacReprojThreshold,
  int maxIters,
  double confidence,
  int refineIters,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> EstimateAffinePartial2D(
  VecPoint2f from,
  VecPoint2f to,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, Mat, ffi.Int,
        ffi.Double, ffi.Size, ffi.Double, ffi.Size, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> EstimateAffinePartial2DWithParams(
  VecPoint2f from,
  VecPoint2f to,
  Mat inliers,
  int method,
  double ransacReprojThreshold,
  int maxIters,
  double confidence,
  int refineIters,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Size, Mat, ffi.Int, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> FindChessboardCorners(
  Mat image,
  Size patternSize,
  Mat corners,
  int flags,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Size, Mat, ffi.Int, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> FindChessboardCornersSB(
  Mat image,
  Size patternSize,
  Mat corners,
  int flags,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Size, Mat, ffi.Int, Mat, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> FindChessboardCornersSBWithMeta(
  Mat image,
  Size patternSize,
  Mat corners,
  int flags,
  Mat meta,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Size, Mat, Mat, ffi.Double, Size, ffi.Double)>()
external ffi.Pointer<CvStatus>
    Fisheye_EstimateNewCameraMatrixForUndistortRectify(
  Mat k,
  Mat d,
  Size imgSize,
  Mat r,
  Mat p,
  double balance,
  Size newSize,
  double fovScale,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Fisheye_UndistortImage(
  Mat distorted,
  Mat undistorted,
  Mat k,
  Mat d,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<Mat>, Mat, Mat, Mat, Size)>()
external ffi.Pointer<CvStatus> Fisheye_UndistortImageWithParams(
  Mat distorted,
  ffi.Pointer<Mat> undistorted,
  Mat k,
  Mat d,
  Mat knew,
  Size size,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Fisheye_UndistortPoints(
  Mat distorted,
  Mat undistorted,
  Mat k,
  Mat d,
  Mat R,
  Mat P,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Size, ffi.Double, Size,
        ffi.Pointer<Rect>, ffi.Bool, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> GetOptimalNewCameraMatrixWithParams(
  Mat cameraMatrix,
  Mat distCoeffs,
  Size size,
  double alpha,
  Size newImgSize,
  ffi.Pointer<Rect> validPixROI,
  bool centerPrincipalPoint,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, Size, ffi.Int,
        ffi.Pointer<Mat>, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> InitUndistortRectifyMap(
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat r,
  Mat newCameraMatrix,
  Size size,
  int m1type,
  ffi.Pointer<Mat> map1,
  ffi.Pointer<Mat> map2,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Undistort(
  Mat src,
  Mat dst,
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat newCameraMatrix,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, Mat, Mat, TermCriteria)>()
external ffi.Pointer<CvStatus> UndistortPoints(
  Mat distorted,
  Mat undistorted,
  Mat k,
  Mat d,
  Mat r,
  Mat p,
  TermCriteria criteria,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecVecPoint3f, VecVecPoint2f, Size, Mat, Mat,
        ffi.Int, TermCriteria, imp1.CvCallback_3)>()
external ffi.Pointer<CvStatus> calibrateCamera_Async(
  VecVecPoint3f objectPoints,
  VecVecPoint2f imagePoints,
  Size imageSize,
  Mat cameraMatrix,
  Mat distCoeffs,
  int flag,
  TermCriteria criteria,
  imp1.CvCallback_3 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Size, ffi.Bool, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> drawChessboardCorners_Async(
  Mat image,
  Size patternSize,
  bool patternWasFound,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, ffi.Int, ffi.Double,
        ffi.Size, ffi.Double, ffi.Size, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> estimateAffine2DWithParams_Async(
  VecPoint2f from,
  VecPoint2f to,
  int method,
  double ransacReprojThreshold,
  int maxIters,
  double confidence,
  int refineIters,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> estimateAffine2D_Async(
  VecPoint2f from,
  VecPoint2f to,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, ffi.Int, ffi.Double,
        ffi.Size, ffi.Double, ffi.Size, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> estimateAffinePartial2DWithParams_Async(
  VecPoint2f from,
  VecPoint2f to,
  int method,
  double ransacReprojThreshold,
  int maxIters,
  double confidence,
  int refineIters,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> estimateAffinePartial2D_Async(
  VecPoint2f from,
  VecPoint2f to,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Size, ffi.Int, imp1.CvCallback_3)>()
external ffi.Pointer<CvStatus> findChessboardCornersSBWithMeta_Async(
  Mat image,
  Size patternSize,
  int flags,
  imp1.CvCallback_3 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Size, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> findChessboardCornersSB_Async(
  Mat image,
  Size patternSize,
  int flags,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Size, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> findChessboardCorners_Async(
  Mat image,
  Size patternSize,
  int flags,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Size, Mat, ffi.Double, Size, ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus>
    fisheye_estimateNewCameraMatrixForUndistortRectify_Async(
  Mat k,
  Mat d,
  Size imgSize,
  Mat r,
  double balance,
  Size newSize,
  double fovScale,
  imp1.CvCallback_1 p,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, Size, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> fisheye_undistortImageWithParams_Async(
  Mat distorted,
  Mat k,
  Mat d,
  Mat knew,
  Size size,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> fisheye_undistortImage_Async(
  Mat distorted,
  Mat k,
  Mat d,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> fisheye_undistortPoints_Async(
  Mat distorted,
  Mat k,
  Mat d,
  Mat R,
  Mat P,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Size, ffi.Double, Size, ffi.Bool, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> getOptimalNewCameraMatrix_Async(
  Mat cameraMatrix,
  Mat distCoeffs,
  Size size,
  double alpha,
  Size newImgSize,
  bool centerPrincipalPoint,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, Size, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> initUndistortRectifyMap_Async(
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat r,
  Mat newCameraMatrix,
  Size size,
  int m1type,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, Mat, TermCriteria, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> undistortPoints_Async(
  Mat distorted,
  Mat k,
  Mat d,
  Mat r,
  Mat p,
  TermCriteria criteria,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> undistort_Async(
  Mat src,
  Mat cameraMatrix,
  Mat distCoeffs,
  Mat newCameraMatrix,
  imp1.CvCallback_1 callback,
);

typedef CvStatus = imp1.CvStatus;
typedef Mat = imp1.Mat;
typedef Rect = imp1.Rect;
typedef Size = imp1.Size;
typedef TermCriteria = imp1.TermCriteria;
typedef VecPoint2f = imp1.VecPoint2f;
typedef VecVecPoint2f = imp1.VecVecPoint2f;
typedef VecVecPoint3f = imp1.VecVecPoint3f;
