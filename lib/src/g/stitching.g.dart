// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:opencv_dart/opencv_dart.dart')
library;

import 'dart:ffi' as ffi;
import 'package:opencv_dart/src/g/types.g.dart' as imp1;
import '' as self;

@ffi.Native<ffi.Void Function(StitcherPtr)>()
external void Stitcher_Close(
  StitcherPtr stitcher,
);

@ffi.Native<ffi.Void Function(StitcherPtr, imp1.CvCallback_0)>()
external void Stitcher_Close_Async(
  StitcherPtr stitcher,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<VecI32>)>()
external ffi.Pointer<CvStatus> Stitcher_Component(
  Stitcher self,
  ffi.Pointer<VecI32> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Stitcher_Component_Async(
  Stitcher self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Stitcher, Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Stitcher_ComposePanorama(
  Stitcher self,
  Mat rpano,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Stitcher, VecMat, Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Stitcher_ComposePanorama_1(
  Stitcher self,
  VecMat mats,
  Mat rpano,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Stitcher, VecMat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> Stitcher_ComposePanorama_1_Async(
  Stitcher self,
  VecMat mats,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> Stitcher_ComposePanorama_Async(
  Stitcher self,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Pointer<Stitcher>)>()
external ffi.Pointer<CvStatus> Stitcher_Create(
  int mode,
  ffi.Pointer<Stitcher> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Stitcher_Create_Async(
  int mode,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Stitcher, VecMat, VecMat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Stitcher_EstimateTransform(
  Stitcher self,
  VecMat mats,
  VecMat masks,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Stitcher, VecMat, VecMat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Stitcher_EstimateTransform_Async(
  Stitcher self,
  VecMat mats,
  VecMat masks,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<Stitcher>)>()
external ffi.Pointer<CvStatus> Stitcher_Get(
  Stitcher self,
  ffi.Pointer<Stitcher> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Stitcher_GetCompositingResol(
  Stitcher self,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Stitcher_GetCompositingResol_Async(
  Stitcher self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Stitcher_GetInterpolationFlags(
  Stitcher self,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Stitcher_GetInterpolationFlags_Async(
  Stitcher self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Stitcher_GetPanoConfidenceThresh(
  Stitcher self,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Stitcher_GetPanoConfidenceThresh_Async(
  Stitcher self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Stitcher_GetRegistrationResol(
  Stitcher self,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Stitcher_GetRegistrationResol_Async(
  Stitcher self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Stitcher_GetSeamEstimationResol(
  Stitcher self,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Stitcher_GetSeamEstimationResol_Async(
  Stitcher self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Stitcher_GetWaveCorrectKind(
  Stitcher self,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Stitcher_GetWaveCorrectKind_Async(
  Stitcher self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> Stitcher_GetWaveCorrection(
  Stitcher self,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Stitcher_GetWaveCorrection_Async(
  Stitcher self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Double)>()
external ffi.Pointer<CvStatus> Stitcher_SetCompositingResol(
  Stitcher self,
  double inval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Stitcher, ffi.Double, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Stitcher_SetCompositingResol_Async(
  Stitcher self,
  double inval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Int)>()
external ffi.Pointer<CvStatus> Stitcher_SetInterpolationFlags(
  Stitcher self,
  int inval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Stitcher, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Stitcher_SetInterpolationFlags_Async(
  Stitcher self,
  int inval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Double)>()
external ffi.Pointer<CvStatus> Stitcher_SetPanoConfidenceThresh(
  Stitcher self,
  double inval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Stitcher, ffi.Double, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Stitcher_SetPanoConfidenceThresh_Async(
  Stitcher self,
  double inval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Double)>()
external ffi.Pointer<CvStatus> Stitcher_SetRegistrationResol(
  Stitcher self,
  double inval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Stitcher, ffi.Double, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Stitcher_SetRegistrationResol_Async(
  Stitcher self,
  double inval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Double)>()
external ffi.Pointer<CvStatus> Stitcher_SetSeamEstimationResol(
  Stitcher self,
  double inval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Stitcher, ffi.Double, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Stitcher_SetSeamEstimationResol_Async(
  Stitcher self,
  double inval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Int)>()
external ffi.Pointer<CvStatus> Stitcher_SetWaveCorrectKind(
  Stitcher self,
  int inval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Stitcher, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Stitcher_SetWaveCorrectKind_Async(
  Stitcher self,
  int inval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Stitcher, ffi.Bool)>()
external ffi.Pointer<CvStatus> Stitcher_SetWaveCorrection(
  Stitcher self,
  bool inval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Stitcher, ffi.Bool, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Stitcher_SetWaveCorrection_Async(
  Stitcher self,
  bool inval,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Stitcher, VecMat, Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Stitcher_Stitch(
  Stitcher self,
  VecMat mats,
  Mat rpano,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Stitcher, VecMat, VecMat, Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Stitcher_Stitch_1(
  Stitcher self,
  VecMat mats,
  VecMat masks,
  Mat rpano,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Stitcher, VecMat, VecMat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> Stitcher_Stitch_1_Async(
  Stitcher self,
  VecMat mats,
  VecMat masks,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Stitcher, VecMat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> Stitcher_Stitch_Async(
  Stitcher self,
  VecMat mats,
  imp1.CvCallback_2 callback,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(StitcherPtr)>>
      get Stitcher_Close => ffi.Native.addressOf(self.Stitcher_Close);
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(StitcherPtr, imp1.CvCallback_0)>>
      get Stitcher_Close_Async =>
          ffi.Native.addressOf(self.Stitcher_Close_Async);
}

typedef CvStatus = imp1.CvStatus;
typedef Mat = imp1.Mat;

const int STITCHING_ERR_CAMERA_PARAMS_ADJUST_FAIL = 3;

const int STITCHING_ERR_HOMOGRAPHY_EST_FAIL = 2;

const int STITCHING_ERR_NEED_MORE_IMGS = 1;

const int STITCHING_OK = 0;

const int STITCHING_PANORAMA = 0;

const int STITCHING_SCANS = 1;

final class Stitcher extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef StitcherPtr = ffi.Pointer<Stitcher>;
typedef VecI32 = imp1.VecI32;
typedef VecMat = imp1.VecMat;
