// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:opencv_dart/opencv_dart.dart')
library;

import 'dart:ffi' as ffi;
import 'package:opencv_dart/src/g/types.g.dart' as imp1;
import '' as self;

@ffi.Native<ffi.Void Function(AsyncArrayPtr)>()
external void AsyncArray_Close(
  AsyncArrayPtr a,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(AsyncArray, Mat)>()
external ffi.Pointer<CvStatus> AsyncArray_Get(
  AsyncArray async_out,
  Mat out,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<AsyncArray>)>()
external ffi.Pointer<CvStatus> AsyncArray_New(
  ffi.Pointer<AsyncArray> rval,
);

@ffi.Native<ffi.Void Function(LayerPtr)>()
external void Layer_Close(
  LayerPtr layer,
);

@ffi.Native<ffi.Void Function(LayerPtr, imp1.CvCallback_0)>()
external void Layer_Close_Async(
  LayerPtr layer,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Layer, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> Layer_GetName(
  Layer layer,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Layer, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Layer_GetName_Async(
  Layer layer,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Layer, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> Layer_GetType(
  Layer layer,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Layer, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Layer_GetType_Async(
  Layer layer,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Layer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Layer_InputNameToIndex(
  Layer layer,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Layer, ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Layer_InputNameToIndex_Async(
  Layer layer,
  ffi.Pointer<ffi.Char> name,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Layer, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Layer_OutputNameToIndex(
  Layer layer,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Layer, ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Layer_OutputNameToIndex_Async(
  Layer layer,
  ffi.Pointer<ffi.Char> name,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecRect, VecF32, ffi.Float, ffi.Float, ffi.Pointer<VecI32>)>()
external ffi.Pointer<CvStatus> NMSBoxes(
  VecRect bboxes,
  VecF32 scores,
  double score_threshold,
  double nms_threshold,
  ffi.Pointer<VecI32> indices,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecRect, VecF32, ffi.Float, ffi.Float,
        ffi.Pointer<VecI32>, ffi.Float, ffi.Int)>()
external ffi.Pointer<CvStatus> NMSBoxesWithParams(
  VecRect bboxes,
  VecF32 scores,
  double score_threshold,
  double nms_threshold,
  ffi.Pointer<VecI32> indices,
  double eta,
  int top_k,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecRect, VecF32, ffi.Float, ffi.Float,
        ffi.Float, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> NMSBoxesWithParams_Async(
  VecRect bboxes,
  VecF32 scores,
  double score_threshold,
  double nms_threshold,
  double eta,
  int top_k,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecRect, VecF32, ffi.Float, ffi.Float, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> NMSBoxes_Async(
  VecRect bboxes,
  VecF32 scores,
  double score_threshold,
  double nms_threshold,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, Size, Scalar, ffi.Bool, ffi.Bool, ffi.Int)>()
external ffi.Pointer<CvStatus> Net_BlobFromImage(
  Mat image,
  Mat blob,
  double scalefactor,
  Size size,
  Scalar mean,
  bool swapRB,
  bool crop,
  int ddepth,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Double, Size, Scalar, ffi.Bool,
        ffi.Bool, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_BlobFromImage_Async(
  Mat image,
  double scalefactor,
  Size size,
  Scalar mean,
  bool swapRB,
  bool crop,
  int ddepth,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecMat, Mat, ffi.Double, Size, Scalar, ffi.Bool, ffi.Bool, ffi.Int)>()
external ffi.Pointer<CvStatus> Net_BlobFromImages(
  VecMat images,
  Mat blob,
  double scalefactor,
  Size size,
  Scalar mean,
  bool swapRB,
  bool crop,
  int ddepth,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecMat, ffi.Double, Size, Scalar, ffi.Bool,
        ffi.Bool, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_BlobFromImages_Async(
  VecMat images,
  double scalefactor,
  Size size,
  Scalar mean,
  bool swapRB,
  bool crop,
  int ddepth,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(NetPtr)>()
external void Net_Close(
  NetPtr net,
);

@ffi.Native<ffi.Void Function(NetPtr, imp1.CvCallback_0)>()
external void Net_Close_Async(
  NetPtr net,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_Create(
  ffi.Pointer<Net> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> Net_Dump(
  Net net,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_Dump_Async(
  Net net,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> Net_Empty(
  Net net,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_Empty_Async(
  Net net,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Net, ffi.Pointer<ffi.Char>, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Net_Forward(
  Net net,
  ffi.Pointer<ffi.Char> outputName,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<VecMat>, VecVecChar)>()
external ffi.Pointer<CvStatus> Net_ForwardLayers(
  Net net,
  ffi.Pointer<VecMat> outputBlobs,
  VecVecChar outBlobNames,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Net, VecVecChar, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_ForwardLayers_Async(
  Net net,
  VecVecChar outBlobNames,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Net, ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_Forward_Async(
  Net net,
  ffi.Pointer<ffi.Char> outputName,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_FromNet(
  Net net,
  ffi.Pointer<Net> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_FromNet_Async(
  Net net,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Net_GetBlobChannel(
  Mat blob,
  int imgidx,
  int chnidx,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_GetBlobChannel_Async(
  Mat blob,
  int imgidx,
  int chnidx,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>)>()
external ffi.Pointer<CvStatus> Net_GetBlobSize(
  Mat blob,
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_GetBlobSize_Async(
  Mat blob,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Net, ffi.Pointer<VecF32>, ffi.Pointer<VecI32>)>()
external ffi.Pointer<CvStatus> Net_GetInputDetails(
  Net net,
  ffi.Pointer<VecF32> scales,
  ffi.Pointer<VecI32> zeropoints,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> Net_GetInputDetails_Async(
  Net net,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Int, ffi.Pointer<Layer>)>()
external ffi.Pointer<CvStatus> Net_GetLayer(
  Net net,
  int layerid,
  ffi.Pointer<Layer> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<VecVecChar>)>()
external ffi.Pointer<CvStatus> Net_GetLayerNames(
  Net net,
  ffi.Pointer<VecVecChar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_GetLayerNames_Async(
  Net net,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_GetLayer_Async(
  Net net,
  int layerid,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<ffi.Int64>)>()
external ffi.Pointer<CvStatus> Net_GetPerfProfile(
  Net net,
  ffi.Pointer<ffi.Int64> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_GetPerfProfile_Async(
  Net net,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Pointer<VecI32>)>()
external ffi.Pointer<CvStatus> Net_GetUnconnectedOutLayers(
  Net net,
  ffi.Pointer<VecI32> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_GetUnconnectedOutLayers_Async(
  Net net,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecMat>)>()
external ffi.Pointer<CvStatus> Net_ImagesFromBlob(
  Mat blob,
  ffi.Pointer<VecMat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_ImagesFromBlob_Async(
  Mat blob,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNet(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<ffi.Char> config,
  ffi.Pointer<ffi.Char> framework,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, VecUChar, VecUChar, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetBytes(
  ffi.Pointer<ffi.Char> framework,
  VecUChar model,
  VecUChar config,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, VecUChar, VecUChar, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_ReadNetBytes_Async(
  ffi.Pointer<ffi.Char> framework,
  VecUChar model,
  VecUChar config,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromCaffe(
  ffi.Pointer<ffi.Char> prototxt,
  ffi.Pointer<ffi.Char> caffeModel,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecUChar, VecUChar, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromCaffeBytes(
  VecUChar prototxt,
  VecUChar caffeModel,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecUChar, VecUChar, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromCaffeBytes_Async(
  VecUChar prototxt,
  VecUChar caffeModel,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromCaffe_Async(
  ffi.Pointer<ffi.Char> prototxt,
  ffi.Pointer<ffi.Char> caffeModel,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromONNX(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<Net> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecUChar, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromONNXBytes(
  VecUChar model,
  ffi.Pointer<Net> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecUChar, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromONNXBytes_Async(
  VecUChar model,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromONNX_Async(
  ffi.Pointer<ffi.Char> model,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromTFLite(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<Net> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecUChar, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromTFLiteBytes(
  VecUChar bufferModel,
  ffi.Pointer<Net> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecUChar, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromTFLiteBytes_Async(
  VecUChar bufferModel,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromTFLite_Async(
  ffi.Pointer<ffi.Char> model,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromTensorflow(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<ffi.Char> config,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecUChar, VecUChar, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromTensorflowBytes(
  VecUChar model,
  VecUChar config,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecUChar, VecUChar, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromTensorflowBytes_Async(
  VecUChar model,
  VecUChar config,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromTensorflow_Async(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<ffi.Char> config,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Bool, ffi.Bool, ffi.Pointer<Net>)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromTorch(
  ffi.Pointer<ffi.Char> model,
  bool isBinary,
  bool evaluate,
  ffi.Pointer<Net> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Bool, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_ReadNetFromTorch_Async(
  ffi.Pointer<ffi.Char> model,
  bool isBinary,
  bool evaluate,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Net_ReadNet_Async(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<ffi.Char> config,
  ffi.Pointer<ffi.Char> framework,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, Mat, ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<CvStatus> Net_SetInput(
  Net net,
  Mat blob,
  ffi.Pointer<ffi.Char> name,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Net, Mat, ffi.Pointer<ffi.Char>, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Net_SetInput_Async(
  Net net,
  Mat blob,
  ffi.Pointer<ffi.Char> name,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Int)>()
external ffi.Pointer<CvStatus> Net_SetPreferableBackend(
  Net net,
  int backend,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Net_SetPreferableBackend_Async(
  Net net,
  int backend,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Int)>()
external ffi.Pointer<CvStatus> Net_SetPreferableTarget(
  Net net,
  int target,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Net, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Net_SetPreferableTarget_Async(
  Net net,
  int target,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Net, ffi.Pointer<ffi.Char>, ffi.Pointer<AsyncArray>)>()
external ffi.Pointer<CvStatus> Net_forwardAsync(
  Net net,
  ffi.Pointer<ffi.Char> outputName,
  ffi.Pointer<AsyncArray> rval,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AsyncArrayPtr)>>
      get AsyncArray_Close => ffi.Native.addressOf(self.AsyncArray_Close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(LayerPtr)>>
      get Layer_Close => ffi.Native.addressOf(self.Layer_Close);
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(LayerPtr, imp1.CvCallback_0)>>
      get Layer_Close_Async => ffi.Native.addressOf(self.Layer_Close_Async);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(NetPtr)>> get Net_Close =>
      ffi.Native.addressOf(self.Net_Close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(NetPtr, imp1.CvCallback_0)>>
      get Net_Close_Async => ffi.Native.addressOf(self.Net_Close_Async);
}

final class AsyncArray extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef AsyncArrayPtr = ffi.Pointer<AsyncArray>;
typedef CvStatus = imp1.CvStatus;

final class Layer extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef LayerPtr = ffi.Pointer<Layer>;
typedef Mat = imp1.Mat;

final class Net extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef NetPtr = ffi.Pointer<Net>;
typedef Scalar = imp1.Scalar;
typedef Size = imp1.Size;
typedef VecF32 = imp1.VecF32;
typedef VecI32 = imp1.VecI32;
typedef VecMat = imp1.VecMat;
typedef VecRect = imp1.VecRect;
typedef VecUChar = imp1.VecUChar;
typedef VecVecChar = imp1.VecVecChar;
