// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:opencv_dart/opencv_dart.dart')
library;

import 'dart:ffi' as ffi;
import 'package:opencv_dart/src/g/types.g.dart' as imp1;
import '' as self;

@ffi.Native<ffi.Void Function(ffi.Pointer<CvStatus>)>()
external void CvStatus_Close(
  ffi.Pointer<CvStatus> self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Eye(
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Int64>)>()
external ffi.Pointer<CvStatus> GetCVTickCount(
  ffi.Pointer<ffi.Int64> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> GetNumThreads(
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> GetTickFrequency(
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, Mat, TermCriteria, ffi.Int,
        ffi.Int, Mat, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> KMeans(
  Mat data,
  int k,
  Mat bestLabels,
  TermCriteria criteria,
  int attempts,
  int flags,
  Mat centers,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Int, Mat, TermCriteria,
        ffi.Int, ffi.Int, Mat, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> KMeansPoints(
  VecPoint2f pts,
  int k,
  Mat bestLabels,
  TermCriteria criteria,
  int attempts,
  int flags,
  Mat centers,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> LUT(
  Mat src,
  Mat lut,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_AbsDiff(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Add(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
  int dtype,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, double_t)>()
external ffi.Pointer<CvStatus> Mat_AddF64(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, float_t)>()
external ffi.Pointer<CvStatus> Mat_AddFloat(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>()
external ffi.Pointer<CvStatus> Mat_AddI16(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>()
external ffi.Pointer<CvStatus> Mat_AddI32(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_AddMat(
  Mat m,
  Mat val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>()
external ffi.Pointer<CvStatus> Mat_AddSChar(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>()
external ffi.Pointer<CvStatus> Mat_AddU16(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>()
external ffi.Pointer<CvStatus> Mat_AddUChar(
  Mat m,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Double, Mat, ffi.Double, ffi.Double, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_AddWeighted(
  Mat src1,
  double alpha,
  Mat src2,
  double beta,
  double gamma,
  Mat dst,
  int dtype,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_AdjustROI(
  Mat m,
  int dtop,
  int dbottom,
  int dleft,
  int dright,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, Mat, ffi.Int,
        ffi.Int, Mat, ffi.Int, ffi.Bool)>()
external ffi.Pointer<CvStatus> Mat_BatchDistance(
  Mat src1,
  Mat src2,
  Mat dist,
  int dtype,
  Mat nidx,
  int normType,
  int K,
  Mat mask,
  int update,
  bool crosscheck,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_BitwiseAnd(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_BitwiseAndWithMask(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_BitwiseNot(
  Mat src1,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_BitwiseNotWithMask(
  Mat src1,
  Mat dst,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_BitwiseOr(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_BitwiseOrWithMask(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_BitwiseXor(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_BitwiseXorWithMask(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_BorderInterpolate(
  int p,
  int len,
  int borderType,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_CalcCovarMatrix(
  Mat samples,
  Mat covar,
  Mat mean,
  int flags,
  int ctype,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Bool)>()
external ffi.Pointer<CvStatus> Mat_CartToPolar(
  Mat x,
  Mat y,
  Mat magnitude,
  Mat angle,
  bool angleInDegrees,
);

@ffi.Native<ffi.Int Function(Mat)>(isLeaf: true)
external int Mat_Channels(
  Mat m,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Bool, ffi.Pointer<Point>,
        ffi.Double, ffi.Double, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> Mat_CheckRange(
  Mat m,
  bool quiet,
  ffi.Pointer<Point> pos,
  double minVal,
  double maxVal,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_Clone(
  Mat m,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_Clone_Async(
  Mat self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(imp1.MatPtr)>()
external void Mat_Close(
  imp1.MatPtr m,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>()
external void Mat_CloseVoid(
  ffi.Pointer<ffi.Void> m,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_Col(
  Mat m,
  int x,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Int Function(Mat)>(isLeaf: true)
external int Mat_Cols(
  Mat m,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Compare(
  Mat src1,
  Mat src2,
  Mat dst,
  int ct,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Bool)>()
external ffi.Pointer<CvStatus> Mat_CompleteSymm(
  Mat m,
  bool lowerToUpper,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_ConvertFp16(
  Mat m,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double)>()
external ffi.Pointer<CvStatus> Mat_ConvertScaleAbs(
  Mat src,
  Mat dst,
  double alpha,
  double beta,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_ConvertTo(
  Mat m,
  Mat dst,
  int type,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Float, ffi.Float)>()
external ffi.Pointer<CvStatus> Mat_ConvertToWithParams(
  Mat m,
  Mat dst,
  int type,
  double alpha,
  double beta,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Float, ffi.Float, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_ConvertToWithParams_Async(
  Mat self,
  int type,
  double alpha,
  double beta,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_ConvertTo_Async(
  Mat self,
  int type,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int, Scalar)>()
external ffi.Pointer<CvStatus> Mat_CopyMakeBorder(
  Mat src,
  Mat dst,
  int top,
  int bottom,
  int left,
  int right,
  int borderType,
  Scalar value,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_CopyTo(
  Mat m,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_CopyToWithMask(
  Mat m,
  Mat dst,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Mat_CopyToWithMask_Async(
  Mat self,
  Mat dst,
  Mat mask,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Mat_CopyTo_Async(
  Mat self,
  Mat dst,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_CountNonZero(
  Mat src,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_DCT(
  Mat src,
  Mat dst,
  int flags,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_DFT(
  Mat src,
  Mat dst,
  int flags,
  int nonzeroRows,
);

@ffi.Native<ffi.Pointer<imp1.uchar> Function(Mat)>(isLeaf: true)
external ffi.Pointer<imp1.uchar> Mat_Data(
  Mat m,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Mat_Determinant(
  Mat m,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Int Function(Mat)>(isLeaf: true)
external int Mat_Dims(
  Mat m,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Divide(
  Mat src1,
  Mat src2,
  Mat dst,
  double scale,
  int dtype,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, double_t)>()
external ffi.Pointer<CvStatus> Mat_DivideF64(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, float_t)>()
external ffi.Pointer<CvStatus> Mat_DivideFloat(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>()
external ffi.Pointer<CvStatus> Mat_DivideI16(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>()
external ffi.Pointer<CvStatus> Mat_DivideI32(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_DivideMat(
  Mat m,
  Mat val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>()
external ffi.Pointer<CvStatus> Mat_DivideSChar(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>()
external ffi.Pointer<CvStatus> Mat_DivideU16(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>()
external ffi.Pointer<CvStatus> Mat_DivideUChar(
  Mat m,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> Mat_Eigen(
  Mat src,
  Mat eigenvalues,
  Mat eigenvectors,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_EigenNonSymmetric(
  Mat src,
  Mat eigenvalues,
  Mat eigenvectors,
);

@ffi.Native<ffi.Int Function(Mat)>(isLeaf: true)
external int Mat_ElemSize(
  Mat m,
);

@ffi.Native<ffi.Int Function(Mat)>(isLeaf: true)
external int Mat_ElemSize1(
  Mat m,
);

@ffi.Native<ffi.Bool Function(Mat)>()
external bool Mat_Empty(
  Mat m,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Exp(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_ExtractChannel(
  Mat src,
  Mat dst,
  int coi,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_Eye_Async(
  int rows,
  int cols,
  int type,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_FindNonZero(
  Mat src,
  Mat idx,
);

@ffi.Native<ffi.Int Function(Mat)>(isLeaf: true)
external int Mat_Flags(
  Mat m,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Flip(
  Mat src,
  Mat dst,
  int flipCode,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_FromCMat(
  Mat m,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_FromPtr(
  Mat m,
  int rows,
  int cols,
  int type,
  int prows,
  int pcols,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_FromRange(
  Mat m,
  int rowStart,
  int rowEnd,
  int colStart,
  int colEnd,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, Mat, ffi.Double, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Gemm(
  Mat src1,
  Mat src2,
  double alpha,
  Mat src3,
  double beta,
  Mat dst,
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Mat_GetDouble(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Mat_GetDouble3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Float>)>()
external ffi.Pointer<CvStatus> Mat_GetFloat(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Float>)>()
external ffi.Pointer<CvStatus> Mat_GetFloat3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Float> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int32>)>()
external ffi.Pointer<CvStatus> Mat_GetInt(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Int32> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int32>)>()
external ffi.Pointer<CvStatus> Mat_GetInt3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Int32> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_GetOptimalDFTSize(
  int vecsize,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int8>)>()
external ffi.Pointer<CvStatus> Mat_GetSChar(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Int8> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int8>)>()
external ffi.Pointer<CvStatus> Mat_GetSChar3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Int8> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int16>)>()
external ffi.Pointer<CvStatus> Mat_GetShort(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Int16> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int16>)>()
external ffi.Pointer<CvStatus> Mat_GetShort3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Int16> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Uint8>)>()
external ffi.Pointer<CvStatus> Mat_GetUChar(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Uint8> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Uint8>)>()
external ffi.Pointer<CvStatus> Mat_GetUChar3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Uint8> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Uint16>)>()
external ffi.Pointer<CvStatus> Mat_GetUShort(
  Mat m,
  int row,
  int col,
  ffi.Pointer<ffi.Uint16> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Uint16>)>()
external ffi.Pointer<CvStatus> Mat_GetUShort3(
  Mat m,
  int x,
  int y,
  int z,
  ffi.Pointer<ffi.Uint16> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2b>)>()
external ffi.Pointer<CvStatus> Mat_GetVec2b(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2b> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2d>)>()
external ffi.Pointer<CvStatus> Mat_GetVec2d(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2d> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2f>)>()
external ffi.Pointer<CvStatus> Mat_GetVec2f(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2i>)>()
external ffi.Pointer<CvStatus> Mat_GetVec2i(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2i> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2s>)>()
external ffi.Pointer<CvStatus> Mat_GetVec2s(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2s> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec2w>)>()
external ffi.Pointer<CvStatus> Mat_GetVec2w(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec2w> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3b>)>()
external ffi.Pointer<CvStatus> Mat_GetVec3b(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3b> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3d>)>()
external ffi.Pointer<CvStatus> Mat_GetVec3d(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3d> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3f>)>()
external ffi.Pointer<CvStatus> Mat_GetVec3f(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3i>)>()
external ffi.Pointer<CvStatus> Mat_GetVec3i(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3i> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3s>)>()
external ffi.Pointer<CvStatus> Mat_GetVec3s(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3s> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec3w>)>()
external ffi.Pointer<CvStatus> Mat_GetVec3w(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec3w> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4b>)>()
external ffi.Pointer<CvStatus> Mat_GetVec4b(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4b> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4d>)>()
external ffi.Pointer<CvStatus> Mat_GetVec4d(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4d> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4f>)>()
external ffi.Pointer<CvStatus> Mat_GetVec4f(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4i>)>()
external ffi.Pointer<CvStatus> Mat_GetVec4i(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4i> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4s>)>()
external ffi.Pointer<CvStatus> Mat_GetVec4s(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4s> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec4w>)>()
external ffi.Pointer<CvStatus> Mat_GetVec4w(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec4w> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec6d>)>()
external ffi.Pointer<CvStatus> Mat_GetVec6d(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec6d> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec6f>)>()
external ffi.Pointer<CvStatus> Mat_GetVec6f(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec6f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec6i>)>()
external ffi.Pointer<CvStatus> Mat_GetVec6i(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec6i> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Vec8i>)>()
external ffi.Pointer<CvStatus> Mat_GetVec8i(
  Mat m,
  int row,
  int col,
  ffi.Pointer<Vec8i> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Hconcat(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Idct(
  Mat src,
  Mat dst,
  int flags,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Idft(
  Mat src,
  Mat dst,
  int flags,
  int nonzeroRows,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_InRange(
  Mat src,
  Mat lowerb,
  Mat upperb,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, Mat)>()
external ffi.Pointer<CvStatus> Mat_InRangeWithScalar(
  Mat src,
  Scalar lowerb,
  Scalar upperb,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_InsertChannel(
  Mat src,
  Mat dst,
  int coi,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Mat_Invert(
  Mat src,
  Mat dst,
  int flags,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Bool Function(Mat)>(isLeaf: true)
external bool Mat_IsContinuous(
  Mat m,
);

@ffi.Native<ffi.Bool Function(Mat)>(isLeaf: true)
external bool Mat_IsSubmatrix(
  Mat m,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<Size>, ffi.Pointer<Point>)>()
external ffi.Pointer<CvStatus> Mat_LocateROI(
  Mat m,
  ffi.Pointer<Size> wholeSize,
  ffi.Pointer<Point> ofs,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Log(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Magnitude(
  Mat x,
  Mat y,
  Mat magnitude,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Max(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>)>()
external ffi.Pointer<CvStatus> Mat_Mean(
  Mat m,
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<Scalar>, ffi.Pointer<Scalar>)>()
external ffi.Pointer<CvStatus> Mat_MeanStdDev(
  Mat src,
  ffi.Pointer<Scalar> dstMean,
  ffi.Pointer<Scalar> dstStdDev,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<Scalar>, ffi.Pointer<Scalar>, Mat)>()
external ffi.Pointer<CvStatus> Mat_MeanStdDevWithMask(
  Mat src,
  ffi.Pointer<Scalar> dstMean,
  ffi.Pointer<Scalar> dstStdDev,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Scalar>)>()
external ffi.Pointer<CvStatus> Mat_MeanWithMask(
  Mat m,
  Mat mask,
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecMat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_Merge(
  VecMat mats,
  ffi.Pointer<Mat> dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Min(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Double>,
        ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_MinMaxIdx(
  Mat m,
  ffi.Pointer<ffi.Double> minVal,
  ffi.Pointer<ffi.Double> maxVal,
  ffi.Pointer<ffi.Int> minIdx,
  ffi.Pointer<ffi.Int> maxIdx,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Double>,
        ffi.Pointer<ffi.Double>, ffi.Pointer<Point>, ffi.Pointer<Point>)>()
external ffi.Pointer<CvStatus> Mat_MinMaxLoc(
  Mat m,
  ffi.Pointer<ffi.Double> minVal,
  ffi.Pointer<ffi.Double> maxVal,
  ffi.Pointer<Point> minLoc,
  ffi.Pointer<Point> maxLoc,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecMat, VecMat, VecI32)>()
external ffi.Pointer<CvStatus> Mat_MixChannels(
  VecMat src,
  VecMat dst,
  VecI32 fromTo,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Mat>, ffi.Double)>()
external ffi.Pointer<CvStatus> Mat_Mul(
  Mat m,
  Mat val,
  ffi.Pointer<Mat> dst,
  double scale,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, ffi.Bool)>()
external ffi.Pointer<CvStatus> Mat_MulSpectrums(
  Mat a,
  Mat b,
  Mat c,
  int flags,
  bool conjB,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Multiply(
  Mat src1,
  Mat src2,
  Mat dst,
  double scale,
  int dtype,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, double_t)>()
external ffi.Pointer<CvStatus> Mat_MultiplyF64(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, float_t)>()
external ffi.Pointer<CvStatus> Mat_MultiplyFloat(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>()
external ffi.Pointer<CvStatus> Mat_MultiplyI16(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>()
external ffi.Pointer<CvStatus> Mat_MultiplyI32(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_MultiplyMat(
  Mat m,
  Mat val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_MultiplyMatrix(
  Mat x,
  Mat y,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>()
external ffi.Pointer<CvStatus> Mat_MultiplySChar(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>()
external ffi.Pointer<CvStatus> Mat_MultiplyU16(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>()
external ffi.Pointer<CvStatus> Mat_MultiplyUChar(
  Mat m,
  int val,
);

/// @brief Create empty Mat
///
/// ALL return values with a type of `Pointer of Struct`,
/// e.g., Mat, the internal pointer (Mat.ptr) MUST be NULL
/// otherwise the memory of mat.ptr pointed to will NOT be freed correctly.
/// Mat* mat = (Mat*)malloc(sizeof(Mat));
/// CvStatus *status = Mat_New(mat);
/// Mat_Close(mat);
///
/// @param rval Mat*
/// @return CvStatus
@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_New(
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewFromBytes(
  int rows,
  int cols,
  int type,
  ffi.Pointer<ffi.Void> buf,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, ffi.Int,
        ffi.Pointer<ffi.Void>, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_NewFromBytes_Async(
  int rows,
  int cols,
  int type,
  ffi.Pointer<ffi.Void> buf,
  int step,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Scalar, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewFromScalar(
  Scalar ar,
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Scalar, ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_NewFromScalar_Async(
  Scalar s,
  int rows,
  int cols,
  int type,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewFromVecPoint(
  VecPoint vec,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewFromVecPoint2f(
  VecPoint2f vec,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint2f, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_NewFromVecPoint2f_Async(
  VecPoint2f vec,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint3f, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewFromVecPoint3f(
  VecPoint3f vec,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint3f, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_NewFromVecPoint3f_Async(
  VecPoint3f vec,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint3i, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewFromVecPoint3i(
  VecPoint3i vec,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_NewFromVecPoint_Async(
  VecPoint vec,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewWithSize(
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_NewWithSize_Async(
  int rows,
  int cols,
  int type,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecI32, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewWithSizes(
  VecI32 sizes,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecI32, ffi.Int, VecChar, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewWithSizesFromBytes(
  VecI32 sizes,
  int type,
  VecChar buf,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecI32, ffi.Int, VecChar, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_NewWithSizesFromBytes_Async(
  VecI32 sizes,
  int type,
  VecChar buf,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecI32, ffi.Int, Scalar, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_NewWithSizesFromScalar(
  VecI32 sizes,
  int type,
  Scalar ar,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecI32, ffi.Int, Scalar, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_NewWithSizesScalar_Async(
  VecI32 sizes,
  int type,
  Scalar s,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecI32, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_NewWithSizes_Async(
  VecI32 sizes,
  int type,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_New_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Int, Mat)>()
external ffi.Pointer<CvStatus> Mat_Normalize(
  Mat src,
  Mat dst,
  double alpha,
  double beta,
  int typ,
  int dtype,
  Mat mask,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_Ones_Async(
  int rows,
  int cols,
  int type,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_PCACompute(
  Mat src,
  Mat mean,
  Mat eigenvectors,
  Mat eigenvalues,
  int maxComponents,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Double)>()
external ffi.Pointer<CvStatus> Mat_PatchNaNs(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_PerspectiveTransform(
  Mat src,
  Mat dst,
  Mat tm,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Bool)>()
external ffi.Pointer<CvStatus> Mat_Phase(
  Mat x,
  Mat y,
  Mat angle,
  bool angleInDegrees,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Bool)>()
external ffi.Pointer<CvStatus> Mat_PolarToCart(
  Mat magnitude,
  Mat degree,
  Mat x,
  Mat y,
  bool angleInDegrees,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Double, Mat)>()
external ffi.Pointer<CvStatus> Mat_Pow(
  Mat src,
  double power,
  Mat dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Float>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_f32_1(
  Mat m,
  int i,
  ffi.Pointer<ffi.Pointer<ffi.Float>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Float>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_f32_2(
  Mat m,
  int i,
  int j,
  ffi.Pointer<ffi.Pointer<ffi.Float>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Float>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_f32_3(
  Mat m,
  int i,
  int j,
  int k,
  ffi.Pointer<ffi.Pointer<ffi.Float>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Double>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_f64_1(
  Mat m,
  int i,
  ffi.Pointer<ffi.Pointer<ffi.Double>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Double>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_f64_2(
  Mat m,
  int i,
  int j,
  ffi.Pointer<ffi.Pointer<ffi.Double>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Double>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_f64_3(
  Mat m,
  int i,
  int j,
  int k,
  ffi.Pointer<ffi.Pointer<ffi.Double>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Short>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i16_1(
  Mat m,
  int i,
  ffi.Pointer<ffi.Pointer<ffi.Short>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Short>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i16_2(
  Mat m,
  int i,
  int j,
  ffi.Pointer<ffi.Pointer<ffi.Short>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Short>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i16_3(
  Mat m,
  int i,
  int j,
  int k,
  ffi.Pointer<ffi.Pointer<ffi.Short>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Int>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i32_1(
  Mat m,
  int i,
  ffi.Pointer<ffi.Pointer<ffi.Int>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Int>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i32_2(
  Mat m,
  int i,
  int j,
  ffi.Pointer<ffi.Pointer<ffi.Int>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Int>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i32_3(
  Mat m,
  int i,
  int j,
  int k,
  ffi.Pointer<ffi.Pointer<ffi.Int>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i8_1(
  Mat m,
  int i,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i8_2(
  Mat m,
  int i,
  int j,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_i8_3(
  Mat m,
  int i,
  int j,
  int k,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<ffi.Pointer<imp1.ushort>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_u16_1(
  Mat m,
  int i,
  ffi.Pointer<ffi.Pointer<imp1.ushort>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<imp1.ushort>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_u16_2(
  Mat m,
  int i,
  int j,
  ffi.Pointer<ffi.Pointer<imp1.ushort>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int,
        ffi.Pointer<ffi.Pointer<imp1.ushort>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_u16_3(
  Mat m,
  int i,
  int j,
  int k,
  ffi.Pointer<ffi.Pointer<imp1.ushort>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Pointer<ffi.Pointer<imp1.uchar>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_u8_1(
  Mat m,
  int i,
  ffi.Pointer<ffi.Pointer<imp1.uchar>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<imp1.uchar>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_u8_2(
  Mat m,
  int i,
  int j,
  ffi.Pointer<ffi.Pointer<imp1.uchar>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Pointer<imp1.uchar>>)>()
external ffi.Pointer<CvStatus> Mat_Ptr_u8_3(
  Mat m,
  int i,
  int j,
  int k,
  ffi.Pointer<ffi.Pointer<imp1.uchar>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Reduce(
  Mat src,
  Mat dst,
  int dim,
  int rType,
  int dType,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Bool)>()
external ffi.Pointer<CvStatus> Mat_ReduceArgMax(
  Mat src,
  Mat dst,
  int axis,
  bool lastIndex,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Bool)>()
external ffi.Pointer<CvStatus> Mat_ReduceArgMin(
  Mat src,
  Mat dst,
  int axis,
  bool lastIndex,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Rect, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_Region(
  Mat m,
  Rect r,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Rect, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_Region_Async(
  Mat self,
  Rect r,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_Release(
  ffi.Pointer<Mat> m,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Mat)>()
external ffi.Pointer<CvStatus> Mat_Repeat(
  Mat src,
  int nY,
  int nX,
  Mat dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_Reshape(
  Mat m,
  int cn,
  int rows,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, VecI32, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_ReshapeByVec(
  Mat m,
  int cn,
  VecI32 newshape,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_Reshape_Async(
  Mat self,
  int cn,
  int rows,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_Row(
  Mat m,
  int y,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Int Function(Mat)>(isLeaf: true)
external int Mat_Rows(
  Mat m,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Double, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_ScaleAdd(
  Mat src1,
  double alpha,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> Mat_SetDouble(
  Mat m,
  int row,
  int col,
  double val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> Mat_SetDouble3(
  Mat m,
  int x,
  int y,
  int z,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Float)>()
external ffi.Pointer<CvStatus> Mat_SetFloat(
  Mat m,
  int row,
  int col,
  double val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Float)>()
external ffi.Pointer<CvStatus> Mat_SetFloat3(
  Mat m,
  int x,
  int y,
  int z,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Double)>()
external ffi.Pointer<CvStatus> Mat_SetIdentity(
  Mat src,
  double scalar,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int32)>()
external ffi.Pointer<CvStatus> Mat_SetInt(
  Mat m,
  int row,
  int col,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int32)>()
external ffi.Pointer<CvStatus> Mat_SetInt3(
  Mat m,
  int x,
  int y,
  int z,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int8)>()
external ffi.Pointer<CvStatus> Mat_SetSChar(
  Mat m,
  int row,
  int col,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int8)>()
external ffi.Pointer<CvStatus> Mat_SetSChar3(
  Mat m,
  int x,
  int y,
  int z,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int16)>()
external ffi.Pointer<CvStatus> Mat_SetShort(
  Mat m,
  int row,
  int col,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int16)>()
external ffi.Pointer<CvStatus> Mat_SetShort3(
  Mat m,
  int x,
  int y,
  int z,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Scalar, Mat)>()
external ffi.Pointer<CvStatus> Mat_SetTo(
  Mat m,
  Scalar value,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Uint8)>()
external ffi.Pointer<CvStatus> Mat_SetUChar(
  Mat m,
  int row,
  int col,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Uint8)>()
external ffi.Pointer<CvStatus> Mat_SetUChar3(
  Mat m,
  int x,
  int y,
  int z,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Uint16)>()
external ffi.Pointer<CvStatus> Mat_SetUShort(
  Mat m,
  int row,
  int col,
  int val,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Uint16)>()
external ffi.Pointer<CvStatus> Mat_SetUShort3(
  Mat m,
  int x,
  int y,
  int z,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec2b)>()
external ffi.Pointer<CvStatus> Mat_SetVec2b(
  Mat m,
  int row,
  int col,
  Vec2b val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec2d)>()
external ffi.Pointer<CvStatus> Mat_SetVec2d(
  Mat m,
  int row,
  int col,
  Vec2d val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec2f)>()
external ffi.Pointer<CvStatus> Mat_SetVec2f(
  Mat m,
  int row,
  int col,
  Vec2f val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec2i)>()
external ffi.Pointer<CvStatus> Mat_SetVec2i(
  Mat m,
  int row,
  int col,
  Vec2i val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec2s)>()
external ffi.Pointer<CvStatus> Mat_SetVec2s(
  Mat m,
  int row,
  int col,
  Vec2s val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec2w)>()
external ffi.Pointer<CvStatus> Mat_SetVec2w(
  Mat m,
  int row,
  int col,
  Vec2w val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec3b)>()
external ffi.Pointer<CvStatus> Mat_SetVec3b(
  Mat m,
  int row,
  int col,
  Vec3b val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec3d)>()
external ffi.Pointer<CvStatus> Mat_SetVec3d(
  Mat m,
  int row,
  int col,
  Vec3d val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec3f)>()
external ffi.Pointer<CvStatus> Mat_SetVec3f(
  Mat m,
  int row,
  int col,
  Vec3f val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec3i)>()
external ffi.Pointer<CvStatus> Mat_SetVec3i(
  Mat m,
  int row,
  int col,
  Vec3i val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec3s)>()
external ffi.Pointer<CvStatus> Mat_SetVec3s(
  Mat m,
  int row,
  int col,
  Vec3s val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec3w)>()
external ffi.Pointer<CvStatus> Mat_SetVec3w(
  Mat m,
  int row,
  int col,
  Vec3w val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec4b)>()
external ffi.Pointer<CvStatus> Mat_SetVec4b(
  Mat m,
  int row,
  int col,
  Vec4b val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec4d)>()
external ffi.Pointer<CvStatus> Mat_SetVec4d(
  Mat m,
  int row,
  int col,
  Vec4d val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec4f)>()
external ffi.Pointer<CvStatus> Mat_SetVec4f(
  Mat m,
  int row,
  int col,
  Vec4f val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec4i)>()
external ffi.Pointer<CvStatus> Mat_SetVec4i(
  Mat m,
  int row,
  int col,
  Vec4i val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec4s)>()
external ffi.Pointer<CvStatus> Mat_SetVec4s(
  Mat m,
  int row,
  int col,
  Vec4s val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec4w)>()
external ffi.Pointer<CvStatus> Mat_SetVec4w(
  Mat m,
  int row,
  int col,
  Vec4w val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec6d)>()
external ffi.Pointer<CvStatus> Mat_SetVec6d(
  Mat m,
  int row,
  int col,
  Vec6d val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec6f)>()
external ffi.Pointer<CvStatus> Mat_SetVec6f(
  Mat m,
  int row,
  int col,
  Vec6f val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec6i)>()
external ffi.Pointer<CvStatus> Mat_SetVec6i(
  Mat m,
  int row,
  int col,
  Vec6i val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, Vec8i)>()
external ffi.Pointer<CvStatus> Mat_SetVec8i(
  Mat m,
  int row,
  int col,
  Vec8i val,
);

@ffi.Native<ffi.Pointer<VecI32> Function(Mat)>(isLeaf: true)
external ffi.Pointer<VecI32> Mat_Size(
  Mat m,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Int, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> Mat_Solve(
  Mat src1,
  Mat src2,
  Mat dst,
  int flags,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Mat_SolveCubic(
  Mat coeffs,
  Mat roots,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Mat_SolvePoly(
  Mat coeffs,
  Mat roots,
  int maxIters,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Sort(
  Mat src,
  Mat dst,
  int flags,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_SortIdx(
  Mat src,
  Mat dst,
  int flags,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecMat>)>()
external ffi.Pointer<CvStatus> Mat_Split(
  Mat src,
  ffi.Pointer<VecMat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_Sqrt(
  Mat m,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<MatStep Function(Mat)>(isLeaf: true)
external MatStep Mat_Step(
  Mat m,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Mat_Subtract(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
  int dtype,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, double_t)>()
external ffi.Pointer<CvStatus> Mat_SubtractF64(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, float_t)>()
external ffi.Pointer<CvStatus> Mat_SubtractFloat(
  Mat m,
  double val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int16)>()
external ffi.Pointer<CvStatus> Mat_SubtractI16(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int32)>()
external ffi.Pointer<CvStatus> Mat_SubtractI32(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_SubtractMat(
  Mat m,
  Mat val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int8)>()
external ffi.Pointer<CvStatus> Mat_SubtractSChar(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint16)>()
external ffi.Pointer<CvStatus> Mat_SubtractU16(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Uint8)>()
external ffi.Pointer<CvStatus> Mat_SubtractUChar(
  Mat m,
  int val,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>)>()
external ffi.Pointer<CvStatus> Mat_Sum(
  Mat src,
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_T(
  Mat x,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecChar>)>()
external ffi.Pointer<CvStatus> Mat_ToVecChar(
  Mat m,
  ffi.Pointer<VecChar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_ToVecChar_Async(
  Mat self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecUChar>)>()
external ffi.Pointer<CvStatus> Mat_ToVecUChar(
  Mat m,
  ffi.Pointer<VecUChar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_ToVecUChar_Async(
  Mat self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Int Function(Mat)>(isLeaf: true)
external int Mat_Total(
  Mat m,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<Scalar>)>()
external ffi.Pointer<CvStatus> Mat_Trace(
  Mat src,
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Transform(
  Mat src,
  Mat dst,
  Mat tm,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Transpose(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Int Function(Mat)>(isLeaf: true)
external int Mat_Type(
  Mat m,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Vconcat(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Mat_Zeros_Async(
  int rows,
  int cols,
  int type,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_colRange(
  Mat m,
  int start,
  int end,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Mat_rowRange(
  Mat m,
  int start,
  int end,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
        ffi.Bool, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> Mat_toString(
  Mat self,
  int fmtType,
  int f16Precision,
  int f32Precision,
  int f64Precision,
  bool multiLine,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint>)>()
external ffi.Pointer<CvStatus> Mat_toVecPoint(
  Mat self,
  ffi.Pointer<VecPoint> vec,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint2f>)>()
external ffi.Pointer<CvStatus> Mat_toVecPoint2f(
  Mat self,
  ffi.Pointer<VecPoint2f> vec,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint3f>)>()
external ffi.Pointer<CvStatus> Mat_toVecPoint3f(
  Mat self,
  ffi.Pointer<VecPoint3f> vec,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint3i>)>()
external ffi.Pointer<CvStatus> Mat_toVecPoint3i(
  Mat self,
  ffi.Pointer<VecPoint3i> vec,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, Mat, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Norm(
  Mat src1,
  int normType,
  Mat mask,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, Mat, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> NormWithMats(
  Mat src1,
  Mat src2,
  int normType,
  Mat mask,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Ones(
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        RNG, Mat, ffi.Int, ffi.Double, ffi.Double, ffi.Bool)>()
external ffi.Pointer<CvStatus> RNG_Fill(
  RNG rng,
  Mat mat,
  int distType,
  double a,
  double b,
  bool saturateRange,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(RNG, Mat, ffi.Int, ffi.Double, ffi.Double,
        ffi.Bool, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> RNG_Fill_Async(
  RNG rng,
  Mat mat,
  int distType,
  double a,
  double b,
  bool saturateRange,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(RNG, ffi.Double, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> RNG_Gaussian(
  RNG rng,
  double sigma,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(RNG, ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> RNG_Gaussian_Async(
  RNG rng,
  double sigma,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(RNG, ffi.Pointer<ffi.Uint32>)>()
external ffi.Pointer<CvStatus> RNG_Next(
  RNG rng,
  ffi.Pointer<ffi.Uint32> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(RNG, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> RNG_Next_Async(
  RNG rng,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        RNG, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> RNG_Uniform(
  RNG rng,
  int a,
  int b,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        RNG, ffi.Double, ffi.Double, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> RNG_UniformDouble(
  RNG rng,
  double a,
  double b,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        RNG, ffi.Double, ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> RNG_UniformDouble_Async(
  RNG rng,
  double a,
  double b,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(RNG, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> RNG_Uniform_Async(
  RNG rng,
  int a,
  int b,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar)>()
external ffi.Pointer<CvStatus> RandN(
  Mat mat,
  Scalar mean,
  Scalar stddev,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> RandN_Async(
  Mat mat,
  Scalar mean,
  Scalar stddev,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat)>()
external ffi.Pointer<CvStatus> RandShuffle(
  Mat mat,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Double, RNG)>()
external ffi.Pointer<CvStatus> RandShuffleWithParams(
  Mat mat,
  double iterFactor,
  RNG rng,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Double, RNG, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> RandShuffleWithParams_Async(
  Mat mat,
  double iterFactor,
  RNG rng,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> RandShuffle_Async(
  Mat mat,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar)>()
external ffi.Pointer<CvStatus> RandU(
  Mat mat,
  Scalar low,
  Scalar high,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> RandU_Async(
  Mat mat,
  Scalar low,
  Scalar high,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(imp1.RNGPtr)>()
external void Rng_Close(
  imp1.RNGPtr rng,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<RNG>)>()
external ffi.Pointer<CvStatus> Rng_New(
  ffi.Pointer<RNG> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Uint64, ffi.Pointer<RNG>)>()
external ffi.Pointer<CvStatus> Rng_NewWithState(
  int state,
  ffi.Pointer<RNG> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Uint64, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Rng_NewWithState_Async(
  int state,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Rng_New_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> Rotate(
  Mat src,
  Mat dst,
  int rotateCode,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<Rect>)>()
external ffi.Pointer<CvStatus> RotatedRect_BoundingRect(
  RotatedRect rect,
  ffi.Pointer<Rect> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<Rect2f>)>()
external ffi.Pointer<CvStatus> RotatedRect_BoundingRect2f(
  RotatedRect rect,
  ffi.Pointer<Rect2f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<VecPoint2f>)>()
external ffi.Pointer<CvStatus> RotatedRect_Points(
  RotatedRect rect,
  ffi.Pointer<VecPoint2f> pts,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Pointer<Mat>, ffi.Pointer<Mat>, ffi.Pointer<Mat>, ffi.Int)>()
external ffi.Pointer<CvStatus> SVD_Compute(
  Mat src,
  ffi.Pointer<Mat> w,
  ffi.Pointer<Mat> u,
  ffi.Pointer<Mat> vt,
  int flags,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, imp1.CvCallback_3)>()
external ffi.Pointer<CvStatus> SVD_Compute_Async(
  Mat src,
  int flags,
  imp1.CvCallback_3 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> SVD_backSubst(
  Mat w,
  Mat u,
  Mat vt,
  Mat rhs,
  ffi.Pointer<Mat> dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> SVD_backSubst_Async(
  Mat w,
  Mat u,
  Mat vt,
  Mat rhs,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int)>()
external ffi.Pointer<CvStatus> SetNumThreads(
  int n,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int)>()
external ffi.Pointer<CvStatus> SetRNGSeed(
  int seed,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<RNG>)>()
external ffi.Pointer<CvStatus> TheRNG(
  ffi.Pointer<RNG> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> Zeros(
  int rows,
  int cols,
  int type,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_AbsDiff_Async(
  Mat src1,
  Mat src2,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Double, Mat, ffi.Double, ffi.Double,
        ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_AddWeighted_Async(
  Mat src1,
  double alpha,
  Mat src2,
  double beta,
  double gamma,
  int dtype,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Add_Async(
  Mat src1,
  Mat src2,
  Mat mask,
  int dtype,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int, Mat,
        ffi.Int, ffi.Bool, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> core_BatchDistance_Async(
  Mat src1,
  Mat src2,
  int dtype,
  int normType,
  int K,
  Mat mask,
  int update,
  bool crosscheck,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_BitwiseAndWithMask_Async(
  Mat src1,
  Mat src2,
  Mat mask,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_BitwiseAnd_Async(
  Mat src1,
  Mat src2,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_BitwiseNotWithMask_Async(
  Mat src1,
  Mat mask,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_BitwiseNot_Async(
  Mat src1,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_BitwiseOrWithMask_Async(
  Mat src1,
  Mat src2,
  Mat mask,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_BitwiseOr_Async(
  Mat src1,
  Mat src2,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_BitwiseXorWithMask_Async(
  Mat src1,
  Mat src2,
  Mat mask,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_BitwiseXor_Async(
  Mat src1,
  Mat src2,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_BorderInterpolate_Async(
  int p,
  int len,
  int borderType,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_CalcCovarMatrix_Async(
  Mat samples,
  Mat mean,
  int flags,
  int ctype,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Bool, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> core_CartToPolar_Async(
  Mat x,
  Mat y,
  bool angleInDegrees,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Bool, ffi.Double, ffi.Double, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> core_CheckRange_Async(
  Mat self,
  bool quiet,
  double minVal,
  double maxVal,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Compare_Async(
  Mat src1,
  Mat src2,
  int ct,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Bool, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> core_CompleteSymm_Async(
  Mat self,
  bool lowerToUpper,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Double, ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_ConvertScaleAbs_Async(
  Mat src,
  double alpha,
  double beta,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
        ffi.Int, Scalar, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_CopyMakeBorder_Async(
  Mat src,
  int top,
  int bottom,
  int left,
  int right,
  int borderType,
  Scalar value,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_CountNonZero_Async(
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_DCT_Async(
  Mat src,
  int flags,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_DFT_Async(
  Mat self,
  int flags,
  int nonzeroRows,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Determinant_Async(
  Mat self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Divide_Async(
  Mat src1,
  Mat src2,
  double scale,
  int dtype,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> core_EigenNonSymmetric_Async(
  Mat src,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_3)>()
external ffi.Pointer<CvStatus> core_Eigen_Async(
  Mat src,
  imp1.CvCallback_3 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Exp_Async(
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_ExtractChannel_Async(
  Mat src,
  int coi,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_FindNonZero_Async(
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Flip_Async(
  Mat src,
  int flipCode,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, Mat, ffi.Double, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Gemm_Async(
  Mat src1,
  Mat src2,
  double alpha,
  Mat src3,
  double beta,
  int flags,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_GetOptimalDFTSize_Async(
  int vecsize,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Hconcat_Async(
  Mat src1,
  Mat src2,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Idct_Async(
  Mat src,
  int flags,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Idft_Async(
  Mat src,
  int flags,
  int nonzeroRows,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Scalar, Scalar, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_InRangeWithScalar_Async(
  Mat src,
  Scalar lowerb,
  Scalar upperb,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_InRange_Async(
  Mat src,
  Mat lowerb,
  Mat upperb,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> core_InsertChannel_Async(
  Mat src,
  Mat dst,
  int coi,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> core_Invert_Async(
  Mat src,
  int flags,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, Mat, TermCriteria, ffi.Int, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> core_KMeans_Async(
  Mat data,
  int k,
  Mat bestLabels,
  TermCriteria criteria,
  int attempts,
  int flags,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, ffi.Int, Mat, TermCriteria,
        ffi.Int, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> core_KMeans_Points_Async(
  VecPoint2f pts,
  int k,
  Mat bestLabels,
  TermCriteria criteria,
  int attempts,
  int flags,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_LUT_Async(
  Mat src,
  Mat lut,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Log_Async(
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Magnitude_Async(
  Mat x,
  Mat y,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Max_Async(
  Mat src1,
  Mat src2,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> core_MeanStdDevWithMask_Async(
  Mat src,
  Mat mask,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> core_MeanStdDev_Async(
  Mat src,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_MeanWithMask_Async(
  Mat self,
  Mat mask,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Mean_Async(
  Mat self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecMat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Merge_Async(
  VecMat mats,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_4)>()
external ffi.Pointer<CvStatus> core_MinMaxIdx_Async(
  Mat self,
  imp1.CvCallback_4 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_4)>()
external ffi.Pointer<CvStatus> core_MinMaxIdx_Mask_Async(
  Mat self,
  Mat mask,
  imp1.CvCallback_4 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_4)>()
external ffi.Pointer<CvStatus> core_MinMaxLoc_Async(
  Mat self,
  imp1.CvCallback_4 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_4)>()
external ffi.Pointer<CvStatus> core_MinMaxLoc_Mask_Async(
  Mat self,
  Mat mask,
  imp1.CvCallback_4 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Min_Async(
  Mat src1,
  Mat src2,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecMat, VecMat, VecI32, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> core_MixChannels_Async(
  VecMat src,
  VecMat dst,
  VecI32 fromTo,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_MulSpectrums_Async(
  Mat a,
  Mat b,
  int flags,
  bool conjB,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_MultiplyWithParams_Async(
  Mat src1,
  Mat src2,
  double scale,
  int dtype,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Multiply_Async(
  Mat src1,
  Mat src2,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_NormWithMats_Async(
  Mat src1,
  Mat src2,
  int normType,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Norm_Async(
  Mat src1,
  int normType,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Norm_Mask_Async(
  Mat src1,
  int normType,
  Mat mask,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int,
        ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> core_Normalize_Async(
  Mat src,
  Mat dst,
  double alpha,
  double beta,
  int typ,
  int dtype,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int,
        ffi.Int, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> core_Normalize_Mask_Async(
  Mat src,
  Mat dst,
  double alpha,
  double beta,
  int typ,
  int dtype,
  Mat mask,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_PCABackProject_Async(
  Mat src,
  Mat mean,
  Mat eigenvectors,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_PCACompute_1_Async(
  Mat src,
  Mat mean,
  int maxComponents,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> core_PCACompute_2_Async(
  Mat src,
  Mat mean,
  double retainedVariance,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_PCACompute_3_Async(
  Mat src,
  Mat mean,
  double retainedVariance,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> core_PCACompute_Async(
  Mat src,
  Mat mean,
  int maxComponents,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_PCAProject_Async(
  Mat src,
  Mat mean,
  Mat eigenvectors,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Double, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> core_PatchNaNs_Async(
  Mat self,
  double val,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_PerspectiveTransform_Async(
  Mat src,
  Mat tm,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Phase_Async(
  Mat x,
  Mat y,
  bool angleInDegrees,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Bool, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> core_PolarToCart_Async(
  Mat magnitude,
  Mat degree,
  bool angleInDegrees,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Pow_Async(
  Mat src,
  double power,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_ReduceArgMax_Async(
  Mat src,
  int axis,
  bool lastIndex,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_ReduceArgMin_Async(
  Mat src,
  int axis,
  bool lastIndex,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Reduce_Async(
  Mat src,
  int dim,
  int rType,
  int dType,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Repeat_Async(
  Mat src,
  int nY,
  int nX,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Rotate_Async(
  Mat src,
  int rotateCode,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Double, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_ScaleAdd_Async(
  Mat src1,
  double alpha,
  Mat src2,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Scalar, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> core_SetIdentity_Async(
  Mat src,
  Scalar scalar,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> core_SolveCubic_Async(
  Mat coeffs,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> core_SolvePoly_Async(
  Mat coeffs,
  int maxIters,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> core_Solve_Async(
  Mat src1,
  Mat src2,
  int flags,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_SortIdx_Async(
  Mat src,
  int flags,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Sort_Async(
  Mat src,
  int flags,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Split_Async(
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Sqrt_Async(
  Mat self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Subtract_Async(
  Mat src1,
  Mat src2,
  Mat mask,
  int dtype,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Sum_Async(
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_T_Async(
  Mat x,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Trace_Async(
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Transform_Async(
  Mat src,
  Mat tm,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Transpose_Async(
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_Vconcat_Async(
  Mat src1,
  Mat src2,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_colRange_Async(
  Mat self,
  int start,
  int end,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> core_rowRange_Async(
  Mat self,
  int start,
  int end,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> getBuildInfo(
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> getBuildInfo_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> getLogLevel(
  ffi.Pointer<ffi.Int> logLevel,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> openCVVersion(
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> openCVVersion_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(ErrorCallback)>()
external void registerErrorCallback(
  ErrorCallback callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int)>()
external ffi.Pointer<CvStatus> setLogLevel(
  int logLevel,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CvStatus>)>>
      get CvStatus_Close => ffi.Native.addressOf(self.CvStatus_Close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.MatPtr)>>
      get Mat_Close => ffi.Native.addressOf(self.Mat_Close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get Mat_CloseVoid => ffi.Native.addressOf(self.Mat_CloseVoid);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(imp1.RNGPtr)>>
      get Rng_Close => ffi.Native.addressOf(self.Rng_Close);
}

typedef CvStatus = imp1.CvStatus;
typedef ErrorCallback = ffi.Pointer<ffi.NativeFunction<ErrorCallbackFunction>>;
typedef ErrorCallbackFunction = ffi.Void Function(
    ffi.Int status,
    ffi.Pointer<ffi.Char> func_name,
    ffi.Pointer<ffi.Char> err_msg,
    ffi.Pointer<ffi.Char> file_name,
    ffi.Int line,
    ffi.Pointer<ffi.Void> userdata);
typedef DartErrorCallbackFunction = void Function(
    int status,
    ffi.Pointer<ffi.Char> func_name,
    ffi.Pointer<ffi.Char> err_msg,
    ffi.Pointer<ffi.Char> file_name,
    int line,
    ffi.Pointer<ffi.Void> userdata);
typedef Mat = imp1.Mat;
typedef MatStep = imp1.MatStep;
typedef Point = imp1.Point;
typedef RNG = imp1.RNG;
typedef Rect = imp1.Rect;
typedef Rect2f = imp1.Rect2f;
typedef RotatedRect = imp1.RotatedRect;
typedef Scalar = imp1.Scalar;
typedef Size = imp1.Size;
typedef TermCriteria = imp1.TermCriteria;
typedef Vec2b = imp1.Vec2b;
typedef Vec2d = imp1.Vec2d;
typedef Vec2f = imp1.Vec2f;
typedef Vec2i = imp1.Vec2i;
typedef Vec2s = imp1.Vec2s;
typedef Vec2w = imp1.Vec2w;
typedef Vec3b = imp1.Vec3b;
typedef Vec3d = imp1.Vec3d;
typedef Vec3f = imp1.Vec3f;
typedef Vec3i = imp1.Vec3i;
typedef Vec3s = imp1.Vec3s;
typedef Vec3w = imp1.Vec3w;
typedef Vec4b = imp1.Vec4b;
typedef Vec4d = imp1.Vec4d;
typedef Vec4f = imp1.Vec4f;
typedef Vec4i = imp1.Vec4i;
typedef Vec4s = imp1.Vec4s;
typedef Vec4w = imp1.Vec4w;
typedef Vec6d = imp1.Vec6d;
typedef Vec6f = imp1.Vec6f;
typedef Vec6i = imp1.Vec6i;
typedef Vec8i = imp1.Vec8i;
typedef VecChar = imp1.VecChar;
typedef VecI32 = imp1.VecI32;
typedef VecMat = imp1.VecMat;
typedef VecPoint = imp1.VecPoint;
typedef VecPoint2f = imp1.VecPoint2f;
typedef VecPoint3f = imp1.VecPoint3f;
typedef VecPoint3i = imp1.VecPoint3i;
typedef VecUChar = imp1.VecUChar;
typedef double_t = ffi.Double;
typedef Dartdouble_t = double;
typedef float_t = ffi.Float;
typedef Dartfloat_t = double;
