// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:opencv_dart/opencv_dart.dart')
library;

import 'dart:ffi' as ffi;
import 'package:opencv_dart/src/g/types.g.dart' as imp1;
import '' as self;

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Int, ffi.Int, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> AdaptiveThreshold(
  Mat src,
  Mat dst,
  double maxValue,
  int adaptiveTyp,
  int typ,
  int blockSize,
  double c,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Double, ffi.Int, ffi.Int, ffi.Int,
        ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> AdaptiveThreshold_Async(
  Mat src,
  double maxValue,
  int adaptiveTyp,
  int typ,
  int blockSize,
  double c,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> ApplyColorMap(
  Mat src,
  Mat dst,
  int colormap,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> ApplyColorMap_Async(
  Mat src,
  int colormap,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> ApplyCustomColorMap(
  Mat src,
  Mat dst,
  Mat colormap,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> ApplyCustomColorMap_Async(
  Mat src,
  Mat colormap,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, ffi.Double, ffi.Bool, ffi.Pointer<VecPoint>)>()
external ffi.Pointer<CvStatus> ApproxPolyDP(
  VecPoint curve,
  double epsilon,
  bool closed,
  ffi.Pointer<VecPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, ffi.Double, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> ApproxPolyDP_Async(
  VecPoint curve,
  double epsilon,
  bool closed,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, ffi.Bool, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> ArcLength(
  VecPoint curve,
  bool is_closed,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> ArcLength_Async(
  VecPoint curve,
  bool is_closed,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Point, Point, Scalar, ffi.Int, ffi.Int, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> ArrowedLine(
  Mat img,
  Point pt1,
  Point pt2,
  Scalar color,
  int thickness,
  int line_type,
  int shift,
  double tipLength,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Point, Point, Scalar, ffi.Int, ffi.Int,
        ffi.Int, ffi.Double, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> ArrowedLine_Async(
  Mat img,
  Point pt1,
  Point pt2,
  Scalar color,
  int thickness,
  int line_type,
  int shift,
  double tipLength,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Double, ffi.Double)>()
external ffi.Pointer<CvStatus> BilateralFilter(
  Mat src,
  Mat dst,
  int d,
  double sc,
  double ss,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Double, ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> BilateralFilter_Async(
  Mat src,
  int d,
  double sc,
  double ss,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Size)>()
external ffi.Pointer<CvStatus> Blur(
  Mat src,
  Mat dst,
  Size ps,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Size, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Blur_Async(
  Mat src,
  Size ps,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<Rect>)>()
external ffi.Pointer<CvStatus> BoundingRect(
  VecPoint pts,
  ffi.Pointer<Rect> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> BoundingRect_Async(
  VecPoint pts,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, Size, Point, ffi.Bool, ffi.Int)>()
external ffi.Pointer<CvStatus> BoxFilter(
  Mat src,
  Mat dst,
  int ddepth,
  Size ps,
  Point anchor,
  bool normalize,
  int borderType,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, Size, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> BoxFilter_Async(
  Mat src,
  int ddepth,
  Size ps,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(RotatedRect, ffi.Pointer<VecPoint2f>)>()
external ffi.Pointer<CvStatus> BoxPoints(
  RotatedRect rect,
  ffi.Pointer<VecPoint2f> boxPts,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(RotatedRect, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> BoxPoints_Async(
  RotatedRect rect,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE, Mat, Mat)>()
external ffi.Pointer<CvStatus> CLAHE_Apply(
  CLAHE c,
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CLAHE_Apply_Async(
  CLAHE self,
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(CLAHEPtr)>()
external void CLAHE_Close(
  CLAHEPtr c,
);

@ffi.Native<ffi.Void Function(CLAHEPtr, imp1.CvCallback_0)>()
external void CLAHE_Close_Async(
  CLAHEPtr self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE)>()
external ffi.Pointer<CvStatus> CLAHE_CollectGarbage(
  CLAHE c,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> CLAHE_CollectGarbage_Async(
  CLAHE self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<CLAHE>)>()
external ffi.Pointer<CvStatus> CLAHE_Create(
  ffi.Pointer<CLAHE> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Double, Size, ffi.Pointer<CLAHE>)>()
external ffi.Pointer<CvStatus> CLAHE_CreateWithParams(
  double clipLimit,
  Size tileGridSize,
  ffi.Pointer<CLAHE> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Double, Size, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CLAHE_CreateWithParams_Async(
  double clipLimit,
  Size tileGridSize,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CLAHE_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> CLAHE_GetClipLimit(
  CLAHE c,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CLAHE_GetClipLimit_Async(
  CLAHE self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE, ffi.Pointer<Size>)>()
external ffi.Pointer<CvStatus> CLAHE_GetTilesGridSize(
  CLAHE c,
  ffi.Pointer<Size> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CLAHE_GetTilesGridSize_Async(
  CLAHE self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE, ffi.Double)>()
external ffi.Pointer<CvStatus> CLAHE_SetClipLimit(
  CLAHE c,
  double clipLimit,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CLAHE, ffi.Double, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> CLAHE_SetClipLimit_Async(
  CLAHE self,
  double clipLimit,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE, Size)>()
external ffi.Pointer<CvStatus> CLAHE_SetTilesGridSize(
  CLAHE c,
  Size size,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(CLAHE, Size, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> CLAHE_SetTilesGridSize_Async(
  CLAHE self,
  Size size,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecMat, VecI32, Mat, ffi.Pointer<Mat>, VecF32, ffi.Double)>()
external ffi.Pointer<CvStatus> CalcBackProject(
  VecMat mats,
  VecI32 chans,
  Mat hist,
  ffi.Pointer<Mat> backProject,
  VecF32 rng,
  double scale,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecMat, VecI32, Mat, VecF32, ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CalcBackProject_Async(
  VecMat mats,
  VecI32 chans,
  Mat backProject,
  VecF32 rng,
  double scale,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecMat, VecI32, Mat, Mat, VecI32, VecF32, ffi.Bool)>()
external ffi.Pointer<CvStatus> CalcHist(
  VecMat mats,
  VecI32 chans,
  Mat mask,
  Mat hist,
  VecI32 sz,
  VecF32 rng,
  bool acc,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecMat, VecI32, Mat, VecI32, VecF32, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CalcHist_Async(
  VecMat mats,
  VecI32 chans,
  Mat mask,
  VecI32 sz,
  VecF32 rng,
  bool acc,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Bool)>()
external ffi.Pointer<CvStatus> Canny(
  Mat src,
  Mat edges,
  double t1,
  double t2,
  int apertureSize,
  bool l2gradient,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Canny_Async(
  Mat src,
  double t1,
  double t2,
  int apertureSize,
  bool l2gradient,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Point, ffi.Int, Scalar, ffi.Int)>()
external ffi.Pointer<CvStatus> Circle(
  Mat img,
  Point center,
  int radius,
  Scalar color,
  int thickness,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Point, ffi.Int, Scalar, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> CircleWithParams(
  Mat img,
  Point center,
  int radius,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Point, ffi.Int, Scalar, ffi.Int,
        ffi.Int, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> CircleWithParams_Async(
  Mat img,
  Point center,
  int radius,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Point, ffi.Int, Scalar, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Circle_Async(
  Mat img,
  Point center,
  int radius,
  Scalar color,
  int thickness,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Rect, Point, Point, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> ClipLine(
  Rect imgRect,
  Point pt1,
  Point pt2,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Rect, Point, Point, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> ClipLine_Async(
  Rect imgRect,
  Point pt1,
  Point pt2,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> CompareHist(
  Mat hist1,
  Mat hist2,
  int method,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CompareHist_Async(
  Mat hist1,
  Mat hist2,
  int method,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> ConnectedComponents(
  Mat src,
  Mat dst,
  int connectivity,
  int ltype,
  int ccltype,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> ConnectedComponentsWithStats(
  Mat src,
  Mat labels,
  Mat stats,
  Mat centroids,
  int connectivity,
  int ltype,
  int ccltype,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_4)>()
external ffi.Pointer<CvStatus> ConnectedComponentsWithStats_Async(
  Mat src,
  int connectivity,
  int ltype,
  int ccltype,
  imp1.CvCallback_4 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> ConnectedComponents_Async(
  Mat src,
  int connectivity,
  int ltype,
  int ccltype,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> ContourArea(
  VecPoint pts,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> ContourArea_Async(
  VecPoint pts,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, Mat, ffi.Bool, ffi.Bool)>()
external ffi.Pointer<CvStatus> ConvexHull(
  VecPoint points,
  Mat hull,
  bool clockwise,
  bool returnPoints,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, ffi.Bool, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> ConvexHull_Async(
  VecPoint points,
  bool clockwise,
  bool returnPoints,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, Mat, Mat)>()
external ffi.Pointer<CvStatus> ConvexityDefects(
  VecPoint points,
  Mat hull,
  Mat result,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> ConvexityDefects_Async(
  VecPoint points,
  Mat hull,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, VecPoint2f, Size, Size, TermCriteria)>()
external ffi.Pointer<CvStatus> CornerSubPix(
  Mat img,
  VecPoint2f corners,
  Size winSize,
  Size zeroZone,
  TermCriteria criteria,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecPoint2f, Size, Size, TermCriteria, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> CornerSubPix_Async(
  Mat img,
  VecPoint2f corners,
  Size winSize,
  Size zeroZone,
  TermCriteria criteria,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> CvtColor(
  Mat src,
  Mat dst,
  int code,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CvtColor_Async(
  Mat src,
  int code,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Dilate(
  Mat src,
  Mat dst,
  Mat kernel,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Point, ffi.Int, ffi.Int, Scalar)>()
external ffi.Pointer<CvStatus> DilateWithParams(
  Mat src,
  Mat dst,
  Mat kernel,
  Point anchor,
  int iterations,
  int borderType,
  Scalar borderValue,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Point, ffi.Int, ffi.Int, Scalar, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> DilateWithParams_Async(
  Mat src,
  Mat kernel,
  Point anchor,
  int iterations,
  int borderType,
  Scalar borderValue,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Dilate_Async(
  Mat src,
  Mat kernel,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> DistanceTransform(
  Mat src,
  Mat dst,
  Mat labels,
  int distanceType,
  int maskSize,
  int labelType,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> DistanceTransform_Async(
  Mat src,
  int distanceType,
  int maskSize,
  int labelType,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecVecPoint, ffi.Int, Scalar, ffi.Int)>()
external ffi.Pointer<CvStatus> DrawContours(
  Mat src,
  VecVecPoint contours,
  int contourIdx,
  Scalar color,
  int thickness,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, ffi.Int, Scalar, ffi.Int,
        ffi.Int, Mat, ffi.Int, Point)>()
external ffi.Pointer<CvStatus> DrawContoursWithParams(
  Mat src,
  VecVecPoint contours,
  int contourIdx,
  Scalar color,
  int thickness,
  int lineType,
  Mat hierarchy,
  int maxLevel,
  Point offset,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, ffi.Int, Scalar, ffi.Int,
        ffi.Int, Mat, ffi.Int, Point, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> DrawContoursWithParams_Async(
  Mat src,
  VecVecPoint contours,
  int contourIdx,
  Scalar color,
  int thickness,
  int lineType,
  Mat hierarchy,
  int maxLevel,
  Point offset,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecVecPoint, ffi.Int, Scalar, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> DrawContours_Async(
  Mat src,
  VecVecPoint contours,
  int contourIdx,
  Scalar color,
  int thickness,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Point, Point, ffi.Double, ffi.Double,
        ffi.Double, Scalar, ffi.Int)>()
external ffi.Pointer<CvStatus> Ellipse(
  Mat img,
  Point center,
  Point axes,
  double angle,
  double startAngle,
  double endAngle,
  Scalar color,
  int thickness,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Point, Point, ffi.Double, ffi.Double,
        ffi.Double, Scalar, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> EllipseWithParams(
  Mat img,
  Point center,
  Point axes,
  double angle,
  double startAngle,
  double endAngle,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Point, Point, ffi.Double, ffi.Double,
        ffi.Double, Scalar, ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> EllipseWithParams_Async(
  Mat img,
  Point center,
  Point axes,
  double angle,
  double startAngle,
  double endAngle,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Point, Point, ffi.Double, ffi.Double,
        ffi.Double, Scalar, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Ellipse_Async(
  Mat img,
  Point center,
  Point axes,
  double angle,
  double startAngle,
  double endAngle,
  Scalar color,
  int thickness,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> EqualizeHist(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> EqualizeHist_Async(
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Erode(
  Mat src,
  Mat dst,
  Mat kernel,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Point, ffi.Int, ffi.Int, Scalar)>()
external ffi.Pointer<CvStatus> ErodeWithParams(
  Mat src,
  Mat dst,
  Mat kernel,
  Point anchor,
  int iterations,
  int borderType,
  Scalar borderValue,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Point, ffi.Int, ffi.Int, Scalar, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> ErodeWithParams_Async(
  Mat src,
  Mat kernel,
  Point anchor,
  int iterations,
  int borderType,
  Scalar borderValue,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Erode_Async(
  Mat src,
  Mat kernel,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, VecVecPoint, Scalar)>()
external ffi.Pointer<CvStatus> FillPoly(
  Mat img,
  VecVecPoint points,
  Scalar color,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecVecPoint, Scalar, ffi.Int, ffi.Int, Point)>()
external ffi.Pointer<CvStatus> FillPolyWithParams(
  Mat img,
  VecVecPoint points,
  Scalar color,
  int lineType,
  int shift,
  Point offset,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecVecPoint, Scalar, ffi.Int, ffi.Int, Point, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> FillPolyWithParams_Async(
  Mat img,
  VecVecPoint points,
  Scalar color,
  int lineType,
  int shift,
  Point offset,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecVecPoint, Scalar, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> FillPoly_Async(
  Mat img,
  VecVecPoint points,
  Scalar color,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, Mat, Point, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> Filter2D(
  Mat src,
  Mat dst,
  int ddepth,
  Mat kernel,
  Point anchor,
  double delta,
  int borderType,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, Mat, Point, ffi.Double, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Filter2D_Async(
  Mat src,
  int ddepth,
  Mat kernel,
  Point anchor,
  double delta,
  int borderType,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Int, ffi.Pointer<VecVecPoint>)>()
external ffi.Pointer<CvStatus> FindContours(
  Mat src,
  Mat hierarchy,
  int mode,
  int method,
  ffi.Pointer<VecVecPoint> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> FindContours_Async(
  Mat src,
  int mode,
  int method,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Double, Mat, ffi.Int,
        ffi.Double, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> FindHomography(
  Mat src,
  Mat dst,
  int method,
  double ransacReprojThreshold,
  Mat mask,
  int maxIters,
  double confidence,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Double, ffi.Int,
        ffi.Double, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> FindHomography_Async(
  Mat src,
  Mat dst,
  int method,
  double ransacReprojThreshold,
  int maxIters,
  double confidence,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<RotatedRect>)>()
external ffi.Pointer<CvStatus> FitEllipse(
  VecPoint pts,
  ffi.Pointer<RotatedRect> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FitEllipse_Async(
  VecPoint pts,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, Mat, ffi.Int, ffi.Double, ffi.Double, ffi.Double)>()
external ffi.Pointer<CvStatus> FitLine(
  VecPoint pts,
  Mat line,
  int distType,
  double param,
  double reps,
  double aeps,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, ffi.Int, ffi.Double, ffi.Double,
        ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FitLine_Async(
  VecPoint pts,
  int distType,
  double param,
  double reps,
  double aeps,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Size, ffi.Double, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> GaussianBlur(
  Mat src,
  Mat dst,
  Size ps,
  double sX,
  double sY,
  int bt,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Size, ffi.Double, ffi.Double, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> GaussianBlur_Async(
  Mat src,
  Size ps,
  double sX,
  double sY,
  int bt,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, VecPoint, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> GetAffineTransform(
  VecPoint src,
  VecPoint dst,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> GetAffineTransform2f(
  VecPoint2f src,
  VecPoint2f dst,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint2f, VecPoint2f, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> GetAffineTransform2f_Async(
  VecPoint2f src,
  VecPoint2f dst,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, VecPoint, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> GetAffineTransform_Async(
  VecPoint src,
  VecPoint dst,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Double, ffi.Int, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> GetGaussianKernel(
  int ksize,
  double sigma,
  int ktype,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Double, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> GetGaussianKernel_Async(
  int ksize,
  double sigma,
  int ktype,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, VecPoint, ffi.Pointer<Mat>, ffi.Int)>()
external ffi.Pointer<CvStatus> GetPerspectiveTransform(
  VecPoint src,
  VecPoint dst,
  ffi.Pointer<Mat> rval,
  int solveMethod,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint2f, VecPoint2f, ffi.Pointer<Mat>, ffi.Int)>()
external ffi.Pointer<CvStatus> GetPerspectiveTransform2f(
  VecPoint2f src,
  VecPoint2f dst,
  ffi.Pointer<Mat> rval,
  int solveMethod,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint2f, VecPoint2f, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> GetPerspectiveTransform2f_Async(
  VecPoint2f src,
  VecPoint2f dst,
  int solveMethod,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, VecPoint, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> GetPerspectiveTransform_Async(
  VecPoint src,
  VecPoint dst,
  int solveMethod,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Size, Point2f, Mat)>()
external ffi.Pointer<CvStatus> GetRectSubPix(
  Mat src,
  Size patchSize,
  Point2f center,
  Mat dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Size, Point2f, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> GetRectSubPix_Async(
  Mat src,
  Size patchSize,
  Point2f center,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Point2f, ffi.Double, ffi.Double, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> GetRotationMatrix2D(
  Point2f center,
  double angle,
  double scale,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Point2f, ffi.Double, ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> GetRotationMatrix2D_Async(
  Point2f center,
  double angle,
  double scale,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Int, Size, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> GetStructuringElement(
  int shape,
  Size ksize,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, Size, Point, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> GetStructuringElement_Async(
  int shape,
  Size ksize,
  Point anchor,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Double,
        ffi.Int, ffi.Pointer<ffi.Int>, ffi.Pointer<Size>)>()
external ffi.Pointer<CvStatus> GetTextSizeWithBaseline(
  ffi.Pointer<ffi.Char> text,
  int fontFace,
  double fontScale,
  int thickness,
  ffi.Pointer<ffi.Int> baseline,
  ffi.Pointer<Size> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Double,
        ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> GetTextSizeWithBaseline_Async(
  ffi.Pointer<ffi.Char> text,
  int fontFace,
  double fontScale,
  int thickness,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint2f>, ffi.Int,
        ffi.Double, ffi.Double, Mat, ffi.Int, ffi.Bool, ffi.Double)>()
external ffi.Pointer<CvStatus> GoodFeaturesToTrack(
  Mat img,
  ffi.Pointer<VecPoint2f> corners,
  int maxCorners,
  double quality,
  double minDist,
  Mat mask,
  int blockSize,
  bool useHarrisDetector,
  double k,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<VecPoint2f>, ffi.Int,
        ffi.Double, ffi.Double, Mat, ffi.Int, ffi.Int, ffi.Bool, ffi.Double)>()
external ffi.Pointer<CvStatus> GoodFeaturesToTrackWithGradient(
  Mat img,
  ffi.Pointer<VecPoint2f> corners,
  int maxCorners,
  double quality,
  double minDist,
  Mat mask,
  int blockSize,
  int gradientSize,
  bool useHarrisDetector,
  double k,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Double, ffi.Double, Mat,
        ffi.Int, ffi.Int, ffi.Bool, ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> GoodFeaturesToTrackWithGradient_Async(
  Mat img,
  int maxCorners,
  double quality,
  double minDist,
  Mat mask,
  int blockSize,
  int gradientSize,
  bool useHarrisDetector,
  double k,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Double, ffi.Double, Mat,
        ffi.Int, ffi.Bool, ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> GoodFeaturesToTrack_Async(
  Mat img,
  int maxCorners,
  double quality,
  double minDist,
  Mat mask,
  int blockSize,
  bool useHarrisDetector,
  double k,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Rect, Mat, Mat, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> GrabCut(
  Mat img,
  Mat mask,
  Rect rect,
  Mat bgdModel,
  Mat fgdModel,
  int iterCount,
  int mode,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Rect, Mat, Mat, ffi.Int, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> GrabCut_Async(
  Mat img,
  Mat mask,
  Rect rect,
  Mat bgdModel,
  Mat fgdModel,
  int iterCount,
  int mode,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Double, ffi.Double)>()
external ffi.Pointer<CvStatus> HoughCircles(
  Mat src,
  Mat circles,
  int method,
  double dp,
  double minDist,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Double, ffi.Double,
        ffi.Double, ffi.Double, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> HoughCirclesWithParams(
  Mat src,
  Mat circles,
  int method,
  double dp,
  double minDist,
  double param1,
  double param2,
  int minRadius,
  int maxRadius,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Double, ffi.Double,
        ffi.Double, ffi.Double, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> HoughCirclesWithParams_Async(
  Mat src,
  int method,
  double dp,
  double minDist,
  double param1,
  double param2,
  int minRadius,
  int maxRadius,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Int, ffi.Double, ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> HoughCircles_Async(
  Mat src,
  int method,
  double dp,
  double minDist,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int,
        ffi.Double, ffi.Double, ffi.Double, ffi.Double)>()
external ffi.Pointer<CvStatus> HoughLines(
  Mat src,
  Mat lines,
  double rho,
  double theta,
  int threshold,
  double srn,
  double stn,
  double min_theta,
  double max_theta,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> HoughLinesP(
  Mat src,
  Mat lines,
  double rho,
  double theta,
  int threshold,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Double, ffi.Double)>()
external ffi.Pointer<CvStatus> HoughLinesPWithParams(
  Mat src,
  Mat lines,
  double rho,
  double theta,
  int threshold,
  double minLineLength,
  double maxLineGap,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Double, ffi.Double, ffi.Int,
        ffi.Double, ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> HoughLinesPWithParams_Async(
  Mat src,
  double rho,
  double theta,
  int threshold,
  double minLineLength,
  double maxLineGap,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Double, ffi.Double, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> HoughLinesP_Async(
  Mat src,
  double rho,
  double theta,
  int threshold,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Double,
        ffi.Double, ffi.Double, ffi.Double, ffi.Double, ffi.Double)>()
external ffi.Pointer<CvStatus> HoughLinesPointSet(
  Mat points,
  Mat lines,
  int lines_max,
  int threshold,
  double min_rho,
  double max_rho,
  double rho_step,
  double min_theta,
  double max_theta,
  double theta_step,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat,
        ffi.Int,
        ffi.Int,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> HoughLinesPointSet_Async(
  Mat points,
  int lines_max,
  int threshold,
  double min_rho,
  double max_rho,
  double rho_step,
  double min_theta,
  double max_theta,
  double theta_step,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Double, ffi.Double, ffi.Int,
        ffi.Double, ffi.Double, ffi.Double, ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> HoughLines_Async(
  Mat src,
  double rho,
  double theta,
  int threshold,
  double srn,
  double stn,
  double min_theta,
  double max_theta,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> Integral(
  Mat src,
  Mat sum,
  Mat sqsum,
  Mat tilted,
  int sdepth,
  int sqdepth,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, imp1.CvCallback_3)>()
external ffi.Pointer<CvStatus> Integral_Async(
  Mat src,
  int sdepth,
  int sqdepth,
  imp1.CvCallback_3 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> InvertAffineTransform(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> InvertAffineTransform_Async(
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Int, ffi.Double, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> Laplacian(
  Mat src,
  Mat dst,
  int dDepth,
  int kSize,
  double scale,
  double delta,
  int borderType,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Double,
        ffi.Double, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Laplacian_Async(
  Mat src,
  int dDepth,
  int kSize,
  double scale,
  double delta,
  int borderType,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Point, Point, Scalar, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> Line(
  Mat img,
  Point pt1,
  Point pt2,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Point, Point, Scalar, ffi.Int, ffi.Int,
        ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Line_Async(
  Mat img,
  Point pt1,
  Point pt2,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Point2f, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> LinearPolar(
  Mat src,
  Mat dst,
  Point2f center,
  double maxRadius,
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Point2f, ffi.Double, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> LinearPolar_Async(
  Mat src,
  Point2f center,
  double maxRadius,
  int flags,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Point2f, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> LogPolar(
  Mat src,
  Mat dst,
  Point2f center,
  double m,
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Point2f, ffi.Double, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> LogPolar_Async(
  Mat src,
  Point2f center,
  double m,
  int flags,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_Accumulate(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_AccumulateProduct(
  Mat src1,
  Mat src2,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_AccumulateProductWithMask(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Mat_AccumulateProductWithMask_Async(
  Mat src1,
  Mat src2,
  Mat dst,
  Mat mask,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Mat_AccumulateProduct_Async(
  Mat src1,
  Mat src2,
  Mat dst,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_AccumulateSquare(
  Mat src,
  Mat dst,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_AccumulateSquareWithMask(
  Mat src,
  Mat dst,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Mat_AccumulateSquareWithMask_Async(
  Mat src,
  Mat dst,
  Mat mask,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Mat_AccumulateSquare_Async(
  Mat src,
  Mat dst,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat)>()
external ffi.Pointer<CvStatus> Mat_AccumulateWithMask(
  Mat src,
  Mat dst,
  Mat mask,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Mat_AccumulateWithMask_Async(
  Mat src,
  Mat dst,
  Mat mask,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Mat_Accumulate_Async(
  Mat src,
  Mat dst,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double)>()
external ffi.Pointer<CvStatus> Mat_AccumulatedWeighted(
  Mat src,
  Mat dst,
  double alpha,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, Mat)>()
external ffi.Pointer<CvStatus> Mat_AccumulatedWeightedWithMask(
  Mat src,
  Mat dst,
  double alpha,
  Mat mask,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Mat_AccumulatedWeightedWithMask_Async(
  Mat src,
  Mat dst,
  double alpha,
  Mat mask,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Double, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Mat_AccumulatedWeighted_Async(
  Mat src,
  Mat dst,
  double alpha,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, VecPoint, ffi.Int, ffi.Double, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> MatchShapes(
  VecPoint contour1,
  VecPoint contour2,
  int method,
  double parameter,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, VecPoint, ffi.Int, ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> MatchShapes_Async(
  VecPoint contour1,
  VecPoint contour2,
  int method,
  double parameter,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, Mat)>()
external ffi.Pointer<CvStatus> MatchTemplate(
  Mat image,
  Mat templ,
  Mat result,
  int method,
  Mat mask,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> MatchTemplate_Async(
  Mat image,
  Mat templ,
  int method,
  Mat mask,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int)>()
external ffi.Pointer<CvStatus> MedianBlur(
  Mat src,
  Mat dst,
  int ksize,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> MedianBlur_Async(
  Mat src,
  int ksize,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VecPoint, ffi.Pointer<RotatedRect>)>()
external ffi.Pointer<CvStatus> MinAreaRect(
  VecPoint pts,
  ffi.Pointer<RotatedRect> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> MinAreaRect_Async(
  VecPoint pts,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, ffi.Pointer<Point2f>, ffi.Pointer<ffi.Float>)>()
external ffi.Pointer<CvStatus> MinEnclosingCircle(
  VecPoint pts,
  ffi.Pointer<Point2f> center,
  ffi.Pointer<ffi.Float> radius,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VecPoint, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> MinEnclosingCircle_Async(
  VecPoint pts,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Bool, ffi.Pointer<Moment>)>()
external ffi.Pointer<CvStatus> Moments(
  Mat src,
  bool binaryImage,
  ffi.Pointer<Moment> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Moments_Async(
  Mat src,
  bool binaryImage,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<Scalar>)>()
external ffi.Pointer<CvStatus> MorphologyDefaultBorderValue(
  ffi.Pointer<Scalar> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> MorphologyDefaultBorderValue_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, Mat)>()
external ffi.Pointer<CvStatus> MorphologyEx(
  Mat src,
  Mat dst,
  int op,
  Mat kernel,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, Mat, Point, ffi.Int, ffi.Int, Scalar)>()
external ffi.Pointer<CvStatus> MorphologyExWithParams(
  Mat src,
  Mat dst,
  int op,
  Mat kernel,
  Point pt,
  int iterations,
  int borderType,
  Scalar borderValue,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, Mat, Point, ffi.Int, ffi.Int,
        Scalar, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> MorphologyExWithParams_Async(
  Mat src,
  int op,
  Mat kernel,
  Point pt,
  int iterations,
  int borderType,
  Scalar borderValue,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> MorphologyEx_Async(
  Mat src,
  int op,
  Mat kernel,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Pointer<ffi.Double>, ffi.Pointer<Point2f>)>()
external ffi.Pointer<CvStatus> PhaseCorrelate(
  Mat src1,
  Mat src2,
  Mat window,
  ffi.Pointer<ffi.Double> response,
  ffi.Pointer<Point2f> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> PhaseCorrelate_Async(
  Mat src1,
  Mat src2,
  Mat window,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, Point2f, ffi.Bool, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> PointPolygonTest(
  VecPoint pts,
  Point2f pt,
  bool measureDist,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VecPoint, Point2f, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> PointPolygonTest_Async(
  VecPoint pts,
  Point2f pt,
  bool measureDist,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecVecPoint, ffi.Bool, Scalar, ffi.Int)>()
external ffi.Pointer<CvStatus> Polylines(
  Mat img,
  VecVecPoint points,
  bool isClosed,
  Scalar color,
  int thickness,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, VecVecPoint, ffi.Bool, Scalar, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Polylines_Async(
  Mat img,
  VecVecPoint points,
  bool isClosed,
  Scalar color,
  int thickness,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>, Point, ffi.Int,
        ffi.Double, Scalar, ffi.Int)>()
external ffi.Pointer<CvStatus> PutText(
  Mat img,
  ffi.Pointer<ffi.Char> text,
  Point org,
  int fontFace,
  double fontScale,
  Scalar color,
  int thickness,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>, Point, ffi.Int,
        ffi.Double, Scalar, ffi.Int, ffi.Int, ffi.Bool)>()
external ffi.Pointer<CvStatus> PutTextWithParams(
  Mat img,
  ffi.Pointer<ffi.Char> text,
  Point org,
  int fontFace,
  double fontScale,
  Scalar color,
  int thickness,
  int lineType,
  bool bottomLeftOrigin,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>, Point, ffi.Int,
        ffi.Double, Scalar, ffi.Int, ffi.Int, ffi.Bool, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> PutTextWithParams_Async(
  Mat img,
  ffi.Pointer<ffi.Char> text,
  Point org,
  int fontFace,
  double fontScale,
  Scalar color,
  int thickness,
  int lineType,
  bool bottomLeftOrigin,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Pointer<ffi.Char>, Point, ffi.Int,
        ffi.Double, Scalar, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> PutText_Async(
  Mat img,
  ffi.Pointer<ffi.Char> text,
  Point org,
  int fontFace,
  double fontScale,
  Scalar color,
  int thickness,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Size, ffi.Int)>()
external ffi.Pointer<CvStatus> PyrDown(
  Mat src,
  Mat dst,
  Size dstsize,
  int borderType,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Size, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> PyrDown_Async(
  Mat src,
  Size dstsize,
  int borderType,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Size, ffi.Int)>()
external ffi.Pointer<CvStatus> PyrUp(
  Mat src,
  Mat dst,
  Size dstsize,
  int borderType,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Size, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> PyrUp_Async(
  Mat src,
  Size dstsize,
  int borderType,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Rect, Scalar, ffi.Int)>()
external ffi.Pointer<CvStatus> Rectangle(
  Mat img,
  Rect rect,
  Scalar color,
  int thickness,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Rect, Scalar, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> RectangleWithParams(
  Mat img,
  Rect rect,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Rect, Scalar, ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> RectangleWithParams_Async(
  Mat img,
  Rect rect,
  Scalar color,
  int thickness,
  int lineType,
  int shift,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Rect, Scalar, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Rectangle_Async(
  Mat img,
  Rect rect,
  Scalar color,
  int thickness,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Mat, ffi.Int, ffi.Int, Scalar)>()
external ffi.Pointer<CvStatus> Remap(
  Mat src,
  Mat dst,
  Mat map1,
  Mat map2,
  int interpolation,
  int borderMode,
  Scalar borderValue,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, ffi.Int, ffi.Int, Scalar, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Remap_Async(
  Mat src,
  Mat map1,
  Mat map2,
  int interpolation,
  int borderMode,
  Scalar borderValue,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Size, ffi.Double, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> Resize(
  Mat src,
  Mat dst,
  Size sz,
  double fx,
  double fy,
  int interp,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Size, ffi.Double, ffi.Double, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Resize_Async(
  Mat src,
  Size sz,
  double fx,
  double fy,
  int interp,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Double, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> Scharr(
  Mat src,
  Mat dst,
  int dDepth,
  int dx,
  int dy,
  double scale,
  double delta,
  int borderType,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Double,
        ffi.Double, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Scharr_Async(
  Mat src,
  int dDepth,
  int dx,
  int dy,
  double scale,
  double delta,
  int borderType,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, Mat, Mat, Point, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> SepFilter2D(
  Mat src,
  Mat dst,
  int ddepth,
  Mat kernelX,
  Mat kernelY,
  Point anchor,
  double delta,
  int borderType,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, Mat, Mat, Point, ffi.Double,
        ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> SepFilter2D_Async(
  Mat src,
  int ddepth,
  Mat kernelX,
  Mat kernelY,
  Point anchor,
  double delta,
  int borderType,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
        ffi.Double, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> Sobel(
  Mat src,
  Mat dst,
  int ddepth,
  int dx,
  int dy,
  int ksize,
  double scale,
  double delta,
  int borderType,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
        ffi.Double, ffi.Double, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Sobel_Async(
  Mat src,
  int ddepth,
  int dx,
  int dy,
  int ksize,
  double scale,
  double delta,
  int borderType,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> SpatialGradient(
  Mat src,
  Mat dx,
  Mat dy,
  int ksize,
  int borderType,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> SpatialGradient_Async(
  Mat src,
  int ksize,
  int borderType,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Int, Size, Point, ffi.Bool, ffi.Int)>()
external ffi.Pointer<CvStatus> SqBoxFilter(
  Mat src,
  Mat dst,
  int ddepth,
  Size ps,
  Point anchor,
  bool normalize,
  int borderType,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, ffi.Int, Size, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> SqBoxFilter_Async(
  Mat src,
  int ddepth,
  Size ps,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(Subdiv2DPtr)>()
external void Subdiv2D_Close(
  Subdiv2DPtr self,
);

@ffi.Native<ffi.Void Function(Subdiv2DPtr, imp1.CvCallback_0)>()
external void Subdiv2D_Close_Async(
  Subdiv2DPtr self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Int, ffi.Pointer<Point2f>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_EdgeDst(
  Subdiv2D self,
  int edge,
  ffi.Pointer<Point2f> dstpt,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> Subdiv2D_EdgeDst_Async(
  Subdiv2D self,
  int edge,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Int, ffi.Pointer<Point2f>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_EdgeOrg(
  Subdiv2D self,
  int edge,
  ffi.Pointer<Point2f> orgpt,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> Subdiv2D_EdgeOrg_Async(
  Subdiv2D self,
  int edge,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, Point2f, ffi.Pointer<Point2f>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_FindNearest(
  Subdiv2D self,
  Point2f pt,
  ffi.Pointer<Point2f> nearestPt,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, Point2f, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> Subdiv2D_FindNearest_Async(
  Subdiv2D self,
  Point2f pt,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetEdge(
  Subdiv2D self,
  int edge,
  int nextEdgeType,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Pointer<ffi.Pointer<Vec4f>>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetEdgeList(
  Subdiv2D self,
  ffi.Pointer<ffi.Pointer<Vec4f>> rval,
  ffi.Pointer<ffi.Int> size,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Subdiv2D, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetEdgeList_Async(
  Subdiv2D self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetEdge_Async(
  Subdiv2D self,
  int edge,
  int nextEdgeType,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Pointer<VecI32>)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetLeadingEdgeList(
  Subdiv2D self,
  ffi.Pointer<VecI32> leadingEdgeList,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Subdiv2D, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetLeadingEdgeList_Async(
  Subdiv2D self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Pointer<ffi.Pointer<Vec6f>>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetTriangleList(
  Subdiv2D self,
  ffi.Pointer<ffi.Pointer<Vec6f>> rval,
  ffi.Pointer<ffi.Int> size,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Subdiv2D, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetTriangleList_Async(
  Subdiv2D self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Int, ffi.Pointer<ffi.Int>, ffi.Pointer<Point2f>)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetVertex(
  Subdiv2D self,
  int vertex,
  ffi.Pointer<ffi.Int> firstEdge,
  ffi.Pointer<Point2f> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetVertex_Async(
  Subdiv2D self,
  int vertex,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, VecI32, ffi.Pointer<VecVecPoint2f>,
        ffi.Pointer<VecPoint2f>)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetVoronoiFacetList(
  Subdiv2D self,
  VecI32 idx,
  ffi.Pointer<VecVecPoint2f> facetList,
  ffi.Pointer<VecPoint2f> facetCenters,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, VecI32, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> Subdiv2D_GetVoronoiFacetList_Async(
  Subdiv2D self,
  VecI32 idx,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Subdiv2D, Rect)>()
external ffi.Pointer<CvStatus> Subdiv2D_InitDelaunay(
  Subdiv2D self,
  Rect rect,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Subdiv2D, Rect, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Subdiv2D_InitDelaunay_Async(
  Subdiv2D self,
  Rect rect,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, Point2f, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_Insert(
  Subdiv2D self,
  Point2f pt,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Subdiv2D, VecPoint2f)>()
external ffi.Pointer<CvStatus> Subdiv2D_InsertVec(
  Subdiv2D self,
  VecPoint2f ptvec,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, VecPoint2f, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Subdiv2D_InsertVec_Async(
  Subdiv2D self,
  VecPoint2f ptvec,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, Point2f, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Subdiv2D_Insert_Async(
  Subdiv2D self,
  Point2f pt,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, Point2f, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_Locate(
  Subdiv2D self,
  Point2f pt,
  ffi.Pointer<ffi.Int> edge,
  ffi.Pointer<ffi.Int> vertex,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, Point2f, imp1.CvCallback_3)>()
external ffi.Pointer<CvStatus> Subdiv2D_Locate_Async(
  Subdiv2D self,
  Point2f pt,
  imp1.CvCallback_3 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<Subdiv2D>)>()
external ffi.Pointer<CvStatus> Subdiv2D_NewEmpty(
  ffi.Pointer<Subdiv2D> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Subdiv2D_NewEmpty_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Rect, ffi.Pointer<Subdiv2D>)>()
external ffi.Pointer<CvStatus> Subdiv2D_NewWithRect(
  Rect rect,
  ffi.Pointer<Subdiv2D> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Rect, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Subdiv2D_NewWithRect_Async(
  Rect rect,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_NextEdge(
  Subdiv2D self,
  int edge,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Subdiv2D_NextEdge_Async(
  Subdiv2D self,
  int edge,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_RotateEdge(
  Subdiv2D self,
  int edge,
  int rotate,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Subdiv2D, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Subdiv2D_RotateEdge_Async(
  Subdiv2D self,
  int edge,
  int rotate,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> Subdiv2D_SymEdge(
  Subdiv2D self,
  int edge,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Subdiv2D, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> Subdiv2D_SymEdge_Async(
  Subdiv2D self,
  int edge,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, ffi.Double, ffi.Double, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> Threshold(
  Mat src,
  Mat dst,
  double thresh,
  double maxvalue,
  int typ,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, ffi.Double, ffi.Double, ffi.Int, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> Threshold_Async(
  Mat src,
  double thresh,
  double maxvalue,
  int typ,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Size)>()
external ffi.Pointer<CvStatus> WarpAffine(
  Mat src,
  Mat dst,
  Mat rot_mat,
  Size dsize,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Size, ffi.Int, ffi.Int, Scalar)>()
external ffi.Pointer<CvStatus> WarpAffineWithParams(
  Mat src,
  Mat dst,
  Mat rot_mat,
  Size dsize,
  int flags,
  int borderMode,
  Scalar borderValue,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Size, ffi.Int, ffi.Int, Scalar, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> WarpAffineWithParams_Async(
  Mat src,
  Mat rot_mat,
  Size dsize,
  int flags,
  int borderMode,
  Scalar borderValue,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Size, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> WarpAffine_Async(
  Mat src,
  Mat rot_mat,
  Size dsize,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, Size)>()
external ffi.Pointer<CvStatus> WarpPerspective(
  Mat src,
  Mat dst,
  Mat m,
  Size dsize,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Mat, Size, ffi.Int, ffi.Int, Scalar)>()
external ffi.Pointer<CvStatus> WarpPerspectiveWithParams(
  Mat src,
  Mat dst,
  Mat rot_mat,
  Size dsize,
  int flags,
  int borderMode,
  Scalar borderValue,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, Size, ffi.Int, ffi.Int, Scalar, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> WarpPerspectiveWithParams_Async(
  Mat src,
  Mat rot_mat,
  Size dsize,
  int flags,
  int borderMode,
  Scalar borderValue,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, Size, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> WarpPerspective_Async(
  Mat src,
  Mat m,
  Size dsize,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat)>()
external ffi.Pointer<CvStatus> Watershed(
  Mat image,
  Mat markers,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(Mat, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> Watershed_Async(
  Mat image,
  Mat markers,
  imp1.CvCallback_0 callback,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CLAHEPtr)>>
      get CLAHE_Close => ffi.Native.addressOf(self.CLAHE_Close);
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(CLAHEPtr, imp1.CvCallback_0)>>
      get CLAHE_Close_Async => ffi.Native.addressOf(self.CLAHE_Close_Async);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Subdiv2DPtr)>>
      get Subdiv2D_Close => ffi.Native.addressOf(self.Subdiv2D_Close);
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Subdiv2DPtr, imp1.CvCallback_0)>>
      get Subdiv2D_Close_Async =>
          ffi.Native.addressOf(self.Subdiv2D_Close_Async);
}

final class CLAHE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef CLAHEPtr = ffi.Pointer<CLAHE>;
typedef CvStatus = imp1.CvStatus;
typedef Mat = imp1.Mat;
typedef Moment = imp1.Moment;
typedef Point = imp1.Point;
typedef Point2f = imp1.Point2f;
typedef Rect = imp1.Rect;
typedef RotatedRect = imp1.RotatedRect;
typedef Scalar = imp1.Scalar;
typedef Size = imp1.Size;

final class Subdiv2D extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef Subdiv2DPtr = ffi.Pointer<Subdiv2D>;
typedef TermCriteria = imp1.TermCriteria;
typedef Vec4f = imp1.Vec4f;
typedef Vec6f = imp1.Vec6f;
typedef VecF32 = imp1.VecF32;
typedef VecI32 = imp1.VecI32;
typedef VecMat = imp1.VecMat;
typedef VecPoint = imp1.VecPoint;
typedef VecPoint2f = imp1.VecPoint2f;
typedef VecVecPoint = imp1.VecVecPoint;
typedef VecVecPoint2f = imp1.VecVecPoint2f;
