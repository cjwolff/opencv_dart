// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:opencv_dart/opencv_dart.dart')
library;

import 'dart:ffi' as ffi;
import 'package:opencv_dart/src/g/types.g.dart' as imp1;
import '' as self;

@ffi.Native<ffi.Void Function(CascadeClassifierPtr)>()
external void CascadeClassifier_Close(
  CascadeClassifierPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        CascadeClassifier, Mat, ffi.Pointer<VecRect>)>()
external ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScale(
  CascadeClassifier self,
  Mat img,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, ffi.Pointer<VecRect>,
        ffi.Pointer<VecI32>, ffi.Double, ffi.Int, ffi.Int, Size, Size)>()
external ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScale2(
  CascadeClassifier self,
  Mat img,
  ffi.Pointer<VecRect> objects,
  ffi.Pointer<VecI32> numDetections,
  double scaleFactor,
  int minNeighbors,
  int flags,
  Size minSize,
  Size maxSize,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, ffi.Double, ffi.Int,
        ffi.Int, Size, Size, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScale2_Async(
  CascadeClassifier self,
  Mat img,
  double scaleFactor,
  int minNeighbors,
  int flags,
  Size minSize,
  Size maxSize,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        CascadeClassifier,
        Mat,
        ffi.Pointer<VecRect>,
        ffi.Pointer<VecI32>,
        ffi.Pointer<VecF64>,
        ffi.Double,
        ffi.Int,
        ffi.Int,
        Size,
        Size,
        ffi.Bool)>()
external ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScale3(
  CascadeClassifier self,
  Mat img,
  ffi.Pointer<VecRect> objects,
  ffi.Pointer<VecI32> rejectLevels,
  ffi.Pointer<VecF64> levelWeights,
  double scaleFactor,
  int minNeighbors,
  int flags,
  Size minSize,
  Size maxSize,
  bool outputRejectLevels,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, ffi.Double, ffi.Int,
        ffi.Int, Size, Size, ffi.Bool, imp1.CvCallback_3)>()
external ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScale3_Async(
  CascadeClassifier self,
  Mat img,
  double scaleFactor,
  int minNeighbors,
  int flags,
  Size minSize,
  Size maxSize,
  bool outputRejectLevels,
  imp1.CvCallback_3 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, ffi.Pointer<VecRect>,
        ffi.Double, ffi.Int, ffi.Int, Size, Size)>()
external ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScaleWithParams(
  CascadeClassifier self,
  Mat img,
  ffi.Pointer<VecRect> objects,
  double scale,
  int minNeighbors,
  int flags,
  Size minSize,
  Size maxSize,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, ffi.Double, ffi.Int,
        ffi.Int, Size, Size, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus>
    CascadeClassifier_DetectMultiScaleWithParams_Async(
  CascadeClassifier self,
  Mat img,
  double scale,
  int minNeighbors,
  int flags,
  Size minSize,
  Size maxSize,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CascadeClassifier_DetectMultiScale_Async(
  CascadeClassifier self,
  Mat img,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> CascadeClassifier_Empty(
  CascadeClassifier self,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CascadeClassifier_Empty_Async(
  CascadeClassifier self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        CascadeClassifier, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> CascadeClassifier_Load(
  CascadeClassifier self,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        CascadeClassifier, ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CascadeClassifier_Load_Async(
  CascadeClassifier self,
  ffi.Pointer<ffi.Char> name,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<CascadeClassifier>)>()
external ffi.Pointer<CvStatus> CascadeClassifier_New(
  ffi.Pointer<CascadeClassifier> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<CascadeClassifier>)>()
external ffi.Pointer<CvStatus> CascadeClassifier_NewFromFile(
  ffi.Pointer<ffi.Char> filename,
  ffi.Pointer<CascadeClassifier> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CascadeClassifier_NewFromFile_Async(
  ffi.Pointer<ffi.Char> filename,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CascadeClassifier_New_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> CascadeClassifier_getFeatureType(
  CascadeClassifier self,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CascadeClassifier_getFeatureType_Async(
  CascadeClassifier self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, ffi.Pointer<Size>)>()
external ffi.Pointer<CvStatus> CascadeClassifier_getOriginalWindowSize(
  CascadeClassifier self,
  ffi.Pointer<Size> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CascadeClassifier_getOriginalWindowSize_Async(
  CascadeClassifier self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> CascadeClassifier_isOldFormatCascade(
  CascadeClassifier self,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(CascadeClassifier, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> CascadeClassifier_isOldFormatCascade_Async(
  CascadeClassifier self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(FaceDetectorYNPtr)>()
external void FaceDetectorYN_Close(
  FaceDetectorYNPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(FaceDetectorYN, Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_Detect(
  FaceDetectorYN self,
  Mat img,
  ffi.Pointer<Mat> faces,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(FaceDetectorYN, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_Detect_Async(
  FaceDetectorYN self,
  Mat img,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Pointer<Size>)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_GetInputSize(
  FaceDetectorYN self,
  ffi.Pointer<Size> input_size,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(FaceDetectorYN, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_GetInputSize_Async(
  FaceDetectorYN self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Pointer<ffi.Float>)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_GetNMSThreshold(
  FaceDetectorYN self,
  ffi.Pointer<ffi.Float> nms_threshold,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(FaceDetectorYN, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_GetNMSThreshold_Async(
  FaceDetectorYN self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Pointer<ffi.Float>)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_GetScoreThreshold(
  FaceDetectorYN self,
  ffi.Pointer<ffi.Float> score_threshold,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(FaceDetectorYN, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_GetScoreThreshold_Async(
  FaceDetectorYN self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_GetTopK(
  FaceDetectorYN self,
  ffi.Pointer<ffi.Int> top_k,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(FaceDetectorYN, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_GetTopK_Async(
  FaceDetectorYN self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        Size,
        ffi.Float,
        ffi.Float,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<FaceDetectorYN>)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_New(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<ffi.Char> config,
  Size input_size,
  double score_threshold,
  double nms_threshold,
  int top_k,
  int backend_id,
  int target_id,
  ffi.Pointer<FaceDetectorYN> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>,
        VecUChar,
        VecUChar,
        Size,
        ffi.Float,
        ffi.Float,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<FaceDetectorYN>)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_NewFromBuffer(
  ffi.Pointer<ffi.Char> framework,
  VecUChar buffer,
  VecUChar buffer_config,
  Size input_size,
  double score_threshold,
  double nms_threshold,
  int top_k,
  int backend_id,
  int target_id,
  ffi.Pointer<FaceDetectorYN> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>,
        VecUChar,
        VecUChar,
        Size,
        ffi.Float,
        ffi.Float,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_NewFromBuffer_Async(
  ffi.Pointer<ffi.Char> framework,
  VecUChar buffer,
  VecUChar buffer_config,
  Size input_size,
  double score_threshold,
  double nms_threshold,
  int top_k,
  int backend_id,
  int target_id,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        Size,
        ffi.Float,
        ffi.Float,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_New_Async(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<ffi.Char> config,
  Size input_size,
  double score_threshold,
  double nms_threshold,
  int top_k,
  int backend_id,
  int target_id,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(FaceDetectorYN, Size)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_SetInputSize(
  FaceDetectorYN self,
  Size input_size,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(FaceDetectorYN, Size, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_SetInputSize_Async(
  FaceDetectorYN self,
  Size input_size,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Float)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_SetNMSThreshold(
  FaceDetectorYN self,
  double nms_threshold,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FaceDetectorYN, ffi.Float, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_SetNMSThreshold_Async(
  FaceDetectorYN self,
  double nms_threshold,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Float)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_SetScoreThreshold(
  FaceDetectorYN self,
  double score_threshold,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FaceDetectorYN, ffi.Float, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_SetScoreThreshold_Async(
  FaceDetectorYN self,
  double score_threshold,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(FaceDetectorYN, ffi.Int)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_SetTopK(
  FaceDetectorYN self,
  int top_k,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FaceDetectorYN, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> FaceDetectorYN_SetTopK_Async(
  FaceDetectorYN self,
  int top_k,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FaceRecognizerSF, Mat, Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> FaceRecognizerSF_AlignCrop(
  FaceRecognizerSF self,
  Mat src_img,
  Mat face_box,
  ffi.Pointer<Mat> aligned_img,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FaceRecognizerSF, Mat, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FaceRecognizerSF_AlignCrop_Async(
  FaceRecognizerSF self,
  Mat src_img,
  Mat face_box,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(FaceRecognizerSFPtr)>()
external void FaceRecognizerSF_Close(
  FaceRecognizerSFPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FaceRecognizerSF, Mat, ffi.Bool, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> FaceRecognizerSF_Feature(
  FaceRecognizerSF self,
  Mat aligned_img,
  bool clone,
  ffi.Pointer<Mat> face_feature,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FaceRecognizerSF, Mat, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FaceRecognizerSF_Feature_Async(
  FaceRecognizerSF self,
  Mat aligned_img,
  bool clone,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FaceRecognizerSF, Mat, Mat, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> FaceRecognizerSF_Match(
  FaceRecognizerSF self,
  Mat face_feature1,
  Mat face_feature2,
  int dis_type,
  ffi.Pointer<ffi.Double> distance,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        FaceRecognizerSF, Mat, Mat, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FaceRecognizerSF_Match_Async(
  FaceRecognizerSF self,
  Mat face_feature1,
  Mat face_feature2,
  int dis_type,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Int, ffi.Int, ffi.Pointer<FaceRecognizerSF>)>()
external ffi.Pointer<CvStatus> FaceRecognizerSF_New(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<ffi.Char> config,
  int backend_id,
  int target_id,
  ffi.Pointer<FaceRecognizerSF> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
        ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FaceRecognizerSF_New_Async(
  ffi.Pointer<ffi.Char> model,
  ffi.Pointer<ffi.Char> config,
  int backend_id,
  int target_id,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<VecRect>, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> GroupRectangles(
  ffi.Pointer<VecRect> rects,
  int groupThreshold,
  double eps,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<VecRect>, ffi.Int, ffi.Double, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> GroupRectangles_Async(
  ffi.Pointer<VecRect> rects,
  int groupThreshold,
  double eps,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(HOGDescriptorPtr)>()
external void HOGDescriptor_Close(
  HOGDescriptorPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecF32>,
        Size, Size, ffi.Pointer<VecPoint>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_Compute(
  HOGDescriptor self,
  Mat img,
  ffi.Pointer<VecF32> descriptors,
  Size winStride,
  Size padding,
  ffi.Pointer<VecPoint> locations,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        HOGDescriptor, Mat, Size, Size, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> HOGDescriptor_Compute_Async(
  HOGDescriptor self,
  Mat img,
  Size winStride,
  Size padding,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecPoint>,
        ffi.Pointer<VecF64>, ffi.Double, Size, Size, ffi.Pointer<VecPoint>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_Detect(
  HOGDescriptor self,
  Mat img,
  ffi.Pointer<VecPoint> foundLocations,
  ffi.Pointer<VecF64> weights,
  double hitThresh,
  Size winStride,
  Size padding,
  ffi.Pointer<VecPoint> searchLocations,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecPoint>,
        ffi.Double, Size, Size, ffi.Pointer<VecPoint>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_Detect2(
  HOGDescriptor self,
  Mat img,
  ffi.Pointer<VecPoint> foundLocations,
  double hitThresh,
  Size winStride,
  Size padding,
  ffi.Pointer<VecPoint> searchLocations,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        HOGDescriptor, Mat, ffi.Double, Size, Size, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> HOGDescriptor_Detect2_Async(
  HOGDescriptor self,
  Mat img,
  double hitThresh,
  Size winStride,
  Size padding,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Pointer<VecRect>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_DetectMultiScale(
  HOGDescriptor self,
  Mat img,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Double, Size, Size,
        ffi.Double, ffi.Double, ffi.Bool, ffi.Pointer<VecRect>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_DetectMultiScaleWithParams(
  HOGDescriptor self,
  Mat img,
  double hitThresh,
  Size winStride,
  Size padding,
  double scale,
  double finalThreshold,
  bool useMeanshiftGrouping,
  ffi.Pointer<VecRect> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, ffi.Double, Size, Size,
        ffi.Double, ffi.Double, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> HOGDescriptor_DetectMultiScaleWithParams_Async(
  HOGDescriptor self,
  Mat img,
  double hitThresh,
  Size winStride,
  Size padding,
  double scale,
  double finalThreshold,
  bool useMeanshiftGrouping,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> HOGDescriptor_DetectMultiScale_Async(
  HOGDescriptor self,
  Mat img,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        HOGDescriptor, Mat, ffi.Double, Size, Size, imp1.CvCallback_3)>()
external ffi.Pointer<CvStatus> HOGDescriptor_Detect_Async(
  HOGDescriptor self,
  Mat img,
  double hitThresh,
  Size winStride,
  Size padding,
  imp1.CvCallback_3 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        HOGDescriptor, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_Load(
  HOGDescriptor self,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        HOGDescriptor, ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> HOGDescriptor_Load_Async(
  HOGDescriptor self,
  ffi.Pointer<ffi.Char> name,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<HOGDescriptor>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_New(
  ffi.Pointer<HOGDescriptor> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<HOGDescriptor>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_NewFromFile(
  ffi.Pointer<ffi.Char> filename,
  ffi.Pointer<HOGDescriptor> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> HOGDescriptor_NewFromFile_Async(
  ffi.Pointer<ffi.Char> filename,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> HOGDescriptor_New_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(HOGDescriptor, VecF32)>()
external ffi.Pointer<CvStatus> HOGDescriptor_SetSVMDetector(
  HOGDescriptor self,
  VecF32 det,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, VecF32, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> HOGDescriptor_SetSVMDetector_Async(
  HOGDescriptor self,
  VecF32 det,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, Mat, Mat, Mat, Size, Size)>()
external ffi.Pointer<CvStatus> HOGDescriptor_computeGradient(
  HOGDescriptor self,
  Mat img,
  Mat grad,
  Mat angleOfs,
  Size paddingTL,
  Size paddingBR,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        HOGDescriptor, Mat, Mat, Mat, Size, Size, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> HOGDescriptor_computeGradient_Async(
  HOGDescriptor self,
  Mat img,
  Mat grad,
  Mat angleOfs,
  Size paddingTL,
  Size paddingBR,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecF32>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_getDaimlerPeopleDetector(
  ffi.Pointer<VecF32> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> HOGDescriptor_getDaimlerPeopleDetector_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, ffi.Pointer<ffi.Size>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_getDescriptorSize(
  HOGDescriptor self,
  ffi.Pointer<ffi.Size> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(HOGDescriptor, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> HOGDescriptor_getDescriptorSize_Async(
  HOGDescriptor self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> HOGDescriptor_getWinSigma(
  HOGDescriptor self,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(HOGDescriptor, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> HOGDescriptor_getWinSigma_Async(
  HOGDescriptor self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, ffi.Pointer<VecRect>,
        ffi.Pointer<VecF64>, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> HOGDescriptor_groupRectangles(
  HOGDescriptor self,
  ffi.Pointer<VecRect> rectList,
  ffi.Pointer<VecF64> weights,
  int groupThreshold,
  double eps,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(HOGDescriptor, ffi.Pointer<VecRect>,
        ffi.Pointer<VecF64>, ffi.Int, ffi.Double, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> HOGDescriptor_groupRectangles_Async(
  HOGDescriptor self,
  ffi.Pointer<VecRect> rectList,
  ffi.Pointer<VecF64> weights,
  int groupThreshold,
  double eps,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VecF32>)>()
external ffi.Pointer<CvStatus> HOG_GetDefaultPeopleDetector(
  ffi.Pointer<VecF32> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> HOG_GetDefaultPeopleDetector_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(QRCodeDetectorPtr)>()
external void QRCodeDetector_Close(
  QRCodeDetectorPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>,
        Mat, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> QRCodeDetector_Decode(
  QRCodeDetector self,
  Mat input,
  ffi.Pointer<VecPoint> points,
  Mat straight_qrcode,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, imp1.CvCallback_3)>()
external ffi.Pointer<CvStatus> QRCodeDetector_Decode_Async(
  QRCodeDetector self,
  Mat input,
  imp1.CvCallback_3 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QRCodeDetector, Mat, ffi.Pointer<VecPoint>, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> QRCodeDetector_Detect(
  QRCodeDetector self,
  Mat input,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>,
        ffi.Pointer<Mat>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> QRCodeDetector_DetectAndDecode(
  QRCodeDetector self,
  Mat input,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<Mat> straight_qrcode,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecVecChar>,
        ffi.Pointer<VecPoint>, ffi.Pointer<VecMat>, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> QRCodeDetector_DetectAndDecodeMulti(
  QRCodeDetector self,
  Mat input,
  ffi.Pointer<VecVecChar> decoded,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<VecMat> straight_code,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, imp1.CvCallback_4)>()
external ffi.Pointer<CvStatus> QRCodeDetector_DetectAndDecodeMulti_Async(
  QRCodeDetector self,
  Mat input,
  imp1.CvCallback_4 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, imp1.CvCallback_3)>()
external ffi.Pointer<CvStatus> QRCodeDetector_DetectAndDecode_Async(
  QRCodeDetector self,
  Mat input,
  imp1.CvCallback_3 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QRCodeDetector, Mat, ffi.Pointer<VecPoint>, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> QRCodeDetector_DetectMulti(
  QRCodeDetector self,
  Mat input,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> QRCodeDetector_DetectMulti_Async(
  QRCodeDetector self,
  Mat input,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> QRCodeDetector_Detect_Async(
  QRCodeDetector self,
  Mat input,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<QRCodeDetector>)>()
external ffi.Pointer<CvStatus> QRCodeDetector_New(
  ffi.Pointer<QRCodeDetector> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> QRCodeDetector_New_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, VecPoint,
        ffi.Pointer<Mat>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> QRCodeDetector_decodeCurved(
  QRCodeDetector self,
  Mat img,
  VecPoint points,
  ffi.Pointer<Mat> straight_qrcode,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QRCodeDetector, Mat, VecPoint, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> QRCodeDetector_decodeCurved_Async(
  QRCodeDetector self,
  Mat img,
  VecPoint points,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, ffi.Pointer<VecPoint>,
        ffi.Pointer<Mat>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> QRCodeDetector_detectAndDecodeCurved(
  QRCodeDetector self,
  Mat img,
  ffi.Pointer<VecPoint> points,
  ffi.Pointer<Mat> straight_qrcode,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(QRCodeDetector, Mat, imp1.CvCallback_3)>()
external ffi.Pointer<CvStatus> QRCodeDetector_detectAndDecodeCurved_Async(
  QRCodeDetector self,
  Mat img,
  imp1.CvCallback_3 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(QRCodeDetector, ffi.Double)>()
external ffi.Pointer<CvStatus> QRCodeDetector_setEpsX(
  QRCodeDetector self,
  double epsX,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QRCodeDetector, ffi.Double, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> QRCodeDetector_setEpsX_Async(
  QRCodeDetector self,
  double epsX,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(QRCodeDetector, ffi.Double)>()
external ffi.Pointer<CvStatus> QRCodeDetector_setEpsY(
  QRCodeDetector self,
  double epsY,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QRCodeDetector, ffi.Double, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> QRCodeDetector_setEpsY_Async(
  QRCodeDetector self,
  double epsY,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(QRCodeDetector, ffi.Bool)>()
external ffi.Pointer<CvStatus> QRCodeDetector_setUseAlignmentMarkers(
  QRCodeDetector self,
  bool useAlignmentMarkers,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        QRCodeDetector, ffi.Bool, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> QRCodeDetector_setUseAlignmentMarkers_Async(
  QRCodeDetector self,
  bool useAlignmentMarkers,
  imp1.CvCallback_0 callback,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CascadeClassifierPtr)>>
      get CascadeClassifier_Close =>
          ffi.Native.addressOf(self.CascadeClassifier_Close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FaceDetectorYNPtr)>>
      get FaceDetectorYN_Close =>
          ffi.Native.addressOf(self.FaceDetectorYN_Close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FaceRecognizerSFPtr)>>
      get FaceRecognizerSF_Close =>
          ffi.Native.addressOf(self.FaceRecognizerSF_Close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(HOGDescriptorPtr)>>
      get HOGDescriptor_Close => ffi.Native.addressOf(self.HOGDescriptor_Close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QRCodeDetectorPtr)>>
      get QRCodeDetector_Close =>
          ffi.Native.addressOf(self.QRCodeDetector_Close);
}

final class CascadeClassifier extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef CascadeClassifierPtr = ffi.Pointer<CascadeClassifier>;
typedef CvStatus = imp1.CvStatus;

final class FaceDetectorYN extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef FaceDetectorYNPtr = ffi.Pointer<FaceDetectorYN>;

final class FaceRecognizerSF extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Void>> ptr;
}

typedef FaceRecognizerSFPtr = ffi.Pointer<FaceRecognizerSF>;

final class HOGDescriptor extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef HOGDescriptorPtr = ffi.Pointer<HOGDescriptor>;
typedef Mat = imp1.Mat;

final class QRCodeDetector extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef QRCodeDetectorPtr = ffi.Pointer<QRCodeDetector>;
typedef Size = imp1.Size;
typedef VecF32 = imp1.VecF32;
typedef VecF64 = imp1.VecF64;
typedef VecI32 = imp1.VecI32;
typedef VecMat = imp1.VecMat;
typedef VecPoint = imp1.VecPoint;
typedef VecRect = imp1.VecRect;
typedef VecUChar = imp1.VecUChar;
typedef VecVecChar = imp1.VecVecChar;
