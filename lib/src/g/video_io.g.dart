// coverage:ignore-file
// opencv_dart - OpenCV bindings for Dart language
//    some c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:opencv_dart/opencv_dart.dart')
library;

import 'dart:ffi' as ffi;
import 'package:opencv_dart/src/g/types.g.dart' as imp1;
import '' as self;

@ffi.Native<ffi.Pointer<CvStatus> Function(BackgroundSubtractorKNN, Mat, Mat)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorKNN_Apply(
  BackgroundSubtractorKNN self,
  Mat src,
  Mat dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BackgroundSubtractorKNN, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorKNN_Apply_Async(
  BackgroundSubtractorKNN self,
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(BackgroundSubtractorKNNPtr)>()
external void BackgroundSubtractorKNN_Close(
  BackgroundSubtractorKNNPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<BackgroundSubtractorKNN>)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorKNN_Create(
  ffi.Pointer<BackgroundSubtractorKNN> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Double, ffi.Bool, ffi.Pointer<BackgroundSubtractorKNN>)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorKNN_CreateWithParams(
  int history,
  double dist2Threshold,
  bool detectShadows,
  ffi.Pointer<BackgroundSubtractorKNN> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Double, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorKNN_CreateWithParams_Async(
  int history,
  double dist2Threshold,
  bool detectShadows,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorKNN_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(BackgroundSubtractorMOG2, Mat, Mat)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorMOG2_Apply(
  BackgroundSubtractorMOG2 self,
  Mat src,
  Mat dst,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        BackgroundSubtractorMOG2, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorMOG2_Apply_Async(
  BackgroundSubtractorMOG2 self,
  Mat src,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(BackgroundSubtractorMOG2Ptr)>()
external void BackgroundSubtractorMOG2_Close(
  BackgroundSubtractorMOG2Ptr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Pointer<BackgroundSubtractorMOG2>)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorMOG2_Create(
  ffi.Pointer<BackgroundSubtractorMOG2> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Double, ffi.Bool, ffi.Pointer<BackgroundSubtractorMOG2>)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorMOG2_CreateWithParams(
  int history,
  double varThreshold,
  bool detectShadows,
  ffi.Pointer<BackgroundSubtractorMOG2> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Double, ffi.Bool, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorMOG2_CreateWithParams_Async(
  int history,
  double varThreshold,
  bool detectShadows,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> BackgroundSubtractorMOG2_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Double, ffi.Int, ffi.Int,
        ffi.Int, ffi.Int, ffi.Double, ffi.Int)>()
external ffi.Pointer<CvStatus> CalcOpticalFlowFarneback(
  Mat prevImg,
  Mat nextImg,
  Mat flow,
  double pyrScale,
  int levels,
  int winsize,
  int iterations,
  int polyN,
  double polySigma,
  int flags,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Double, ffi.Int, ffi.Int,
        ffi.Int, ffi.Int, ffi.Double, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> CalcOpticalFlowFarneback_Async(
  Mat prevImg,
  Mat nextImg,
  Mat flow,
  double pyrScale,
  int levels,
  int winsize,
  int iterations,
  int polyN,
  double polySigma,
  int flags,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat, Mat, VecPoint2f, ffi.Pointer<VecPoint2f>, VecUChar, VecF32)>()
external ffi.Pointer<CvStatus> CalcOpticalFlowPyrLK(
  Mat prevImg,
  Mat nextImg,
  VecPoint2f prevPts,
  ffi.Pointer<VecPoint2f> nextPts,
  VecUChar status,
  VecF32 err,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat,
        Mat,
        VecPoint2f,
        ffi.Pointer<VecPoint2f>,
        ffi.Pointer<VecUChar>,
        ffi.Pointer<VecF32>,
        Size,
        ffi.Int,
        TermCriteria,
        ffi.Int,
        ffi.Double)>()
external ffi.Pointer<CvStatus> CalcOpticalFlowPyrLKWithParams(
  Mat prevImg,
  Mat nextImg,
  VecPoint2f prevPts,
  ffi.Pointer<VecPoint2f> nextPts,
  ffi.Pointer<VecUChar> status,
  ffi.Pointer<VecF32> err,
  Size winSize,
  int maxLevel,
  TermCriteria criteria,
  int flags,
  double minEigThreshold,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        Mat,
        Mat,
        VecPoint2f,
        ffi.Pointer<VecPoint2f>,
        Size,
        ffi.Int,
        TermCriteria,
        ffi.Int,
        ffi.Double,
        imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> CalcOpticalFlowPyrLK_Async(
  Mat prevImg,
  Mat nextImg,
  VecPoint2f prevPts,
  ffi.Pointer<VecPoint2f> nextPts,
  Size winSize,
  int maxLevel,
  TermCriteria criteria,
  int flags,
  double minEigThreshold,
  imp1.CvCallback_2 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, TermCriteria, Mat,
        ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> FindTransformECC(
  Mat templateImage,
  Mat inputImage,
  Mat warpMatrix,
  int motionType,
  TermCriteria criteria,
  Mat inputMask,
  int gaussFiltSize,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(Mat, Mat, Mat, ffi.Int, TermCriteria, Mat,
        ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> FindTransformECC_Async(
  Mat templateImage,
  Mat inputImage,
  Mat warpMatrix,
  int motionType,
  TermCriteria criteria,
  Mat inputMask,
  int gaussFiltSize,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Void Function(KalmanFilterPtr)>()
external void KalmanFilter_Close(
  KalmanFilterPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_Correct(
  KalmanFilter self,
  Mat measurement,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_Correct_Async(
  KalmanFilter self,
  Mat measurement,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetControlMatrix(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetControlMatrix_Async(
  KalmanFilter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetErrorCovPost(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetErrorCovPost_Async(
  KalmanFilter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetErrorCovPre(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetErrorCovPre_Async(
  KalmanFilter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetGain(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetGain_Async(
  KalmanFilter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetMeasurementMatrix(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetMeasurementMatrix_Async(
  KalmanFilter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetMeasurementNoiseCov(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetMeasurementNoiseCov_Async(
  KalmanFilter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetProcessNoiseCov(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetProcessNoiseCov_Async(
  KalmanFilter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetStatePost(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetStatePost_Async(
  KalmanFilter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetStatePre(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetStatePre_Async(
  KalmanFilter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTemp1(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTemp1_Async(
  KalmanFilter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTemp2(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTemp2_Async(
  KalmanFilter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTemp3(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTemp3_Async(
  KalmanFilter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTemp4(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTemp4_Async(
  KalmanFilter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTemp5(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTemp5_Async(
  KalmanFilter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTransitionMatrix(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_GetTransitionMatrix_Async(
  KalmanFilter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> KalmanFilter_Init(
  KalmanFilter self,
  int dynamParams,
  int measureParams,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        KalmanFilter, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<CvStatus> KalmanFilter_InitWithParams(
  KalmanFilter self,
  int dynamParams,
  int measureParams,
  int controlParams,
  int type,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        KalmanFilter, ffi.Int, ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> KalmanFilter_InitWithParams_Async(
  KalmanFilter self,
  int dynamParams,
  int measureParams,
  int controlParams,
  int type,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        KalmanFilter, ffi.Int, ffi.Int, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> KalmanFilter_Init_Async(
  KalmanFilter self,
  int dynamParams,
  int measureParams,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<KalmanFilter>)>()
external ffi.Pointer<CvStatus> KalmanFilter_New(
  int dynamParams,
  int measureParams,
  int controlParams,
  int type,
  ffi.Pointer<KalmanFilter> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_New_Async(
  int dynamParams,
  int measureParams,
  int controlParams,
  int type,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_Predict(
  KalmanFilter self,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, ffi.Pointer<Mat>)>()
external ffi.Pointer<CvStatus> KalmanFilter_PredictWithParams(
  KalmanFilter self,
  Mat control,
  ffi.Pointer<Mat> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_PredictWithParams_Async(
  KalmanFilter self,
  Mat control,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> KalmanFilter_Predict_Async(
  KalmanFilter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetControlMatrix(
  KalmanFilter self,
  Mat controlMatrix,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetControlMatrix_Async(
  KalmanFilter self,
  Mat value,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetErrorCovPost(
  KalmanFilter self,
  Mat errorCovPost,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetErrorCovPost_Async(
  KalmanFilter self,
  Mat value,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetErrorCovPre(
  KalmanFilter self,
  Mat errorCovPre,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetErrorCovPre_Async(
  KalmanFilter self,
  Mat value,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetGain(
  KalmanFilter self,
  Mat gain,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetGain_Async(
  KalmanFilter self,
  Mat value,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetMeasurementMatrix(
  KalmanFilter self,
  Mat measurementMatrix,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetMeasurementMatrix_Async(
  KalmanFilter self,
  Mat value,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetMeasurementNoiseCov(
  KalmanFilter self,
  Mat measurementNoiseCov,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetMeasurementNoiseCov_Async(
  KalmanFilter self,
  Mat value,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetProcessNoiseCov(
  KalmanFilter self,
  Mat processNoiseCov,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetProcessNoiseCov_Async(
  KalmanFilter self,
  Mat value,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetStatePost(
  KalmanFilter self,
  Mat statePost,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetStatePost_Async(
  KalmanFilter self,
  Mat value,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetStatePre(
  KalmanFilter self,
  Mat statePre,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetStatePre_Async(
  KalmanFilter self,
  Mat value,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(KalmanFilter, Mat)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetTransitionMatrix(
  KalmanFilter self,
  Mat transitionMatrix,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(KalmanFilter, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> KalmanFilter_SetTransitionMatrix_Async(
  KalmanFilter self,
  Mat value,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Void Function(TrackerMILPtr)>()
external void TrackerMIL_Close(
  TrackerMILPtr self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<TrackerMIL>)>()
external ffi.Pointer<CvStatus> TrackerMIL_Create(
  ffi.Pointer<TrackerMIL> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> TrackerMIL_Create_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(TrackerMIL, Mat, Rect)>()
external ffi.Pointer<CvStatus> TrackerMIL_Init(
  TrackerMIL self,
  Mat image,
  Rect bbox,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(TrackerMIL, Mat, Rect, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> TrackerMIL_Init_Async(
  TrackerMIL self,
  Mat image,
  Rect bbox,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        TrackerMIL, Mat, ffi.Pointer<Rect>, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> TrackerMIL_Update(
  TrackerMIL self,
  Mat image,
  ffi.Pointer<Rect> boundingBox,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(TrackerMIL, Mat, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> TrackerMIL_Update_Async(
  TrackerMIL self,
  Mat image,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Void Function(VideoCapturePtr)>()
external void VideoCapture_Close(
  VideoCapturePtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, ffi.Int, ffi.Pointer<ffi.Double>)>()
external ffi.Pointer<CvStatus> VideoCapture_Get(
  VideoCapture self,
  int prop,
  ffi.Pointer<ffi.Double> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> VideoCapture_Get_Async(
  VideoCapture self,
  int prop,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Int)>()
external ffi.Pointer<CvStatus> VideoCapture_Grab(
  VideoCapture self,
  int skip,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoCapture, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> VideoCapture_Grab_Async(
  VideoCapture self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VideoCapture_IsOpened(
  VideoCapture self,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoCapture, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> VideoCapture_IsOpened_Async(
  VideoCapture self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VideoCapture>)>()
external ffi.Pointer<CvStatus> VideoCapture_New(
  ffi.Pointer<VideoCapture> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<VideoCapture>)>()
external ffi.Pointer<CvStatus> VideoCapture_NewFromFile(
  ffi.Pointer<ffi.Char> filename,
  int apiPreference,
  ffi.Pointer<VideoCapture> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Pointer<ffi.Char>, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> VideoCapture_NewFromFile_Async(
  ffi.Pointer<ffi.Char> filename,
  int apiPreference,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Int, ffi.Int, ffi.Pointer<VideoCapture>)>()
external ffi.Pointer<CvStatus> VideoCapture_NewFromIndex(
  int index,
  int apiPreference,
  ffi.Pointer<VideoCapture> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> VideoCapture_NewFromIndex_Async(
  int index,
  int apiPreference,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> VideoCapture_New_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> VideoCapture_Open(
  VideoCapture self,
  ffi.Pointer<ffi.Char> uri,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, ffi.Int, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> VideoCapture_OpenDevice(
  VideoCapture self,
  int device,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, ffi.Int, ffi.Int, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> VideoCapture_OpenDeviceWithAPI(
  VideoCapture self,
  int device,
  int apiPreference,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, ffi.Int, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> VideoCapture_OpenDeviceWithAPI_Async(
  VideoCapture self,
  int device,
  int apiPreference,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> VideoCapture_OpenDevice_Async(
  VideoCapture self,
  int device,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Bool>)>()
external ffi.Pointer<CvStatus> VideoCapture_OpenWithAPI(
  VideoCapture self,
  ffi.Pointer<ffi.Char> uri,
  int apiPreference,
  ffi.Pointer<ffi.Bool> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, ffi.Pointer<ffi.Char>, ffi.Int, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> VideoCapture_OpenWithAPI_Async(
  VideoCapture self,
  ffi.Pointer<ffi.Char> uri,
  int apiPreference,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, ffi.Pointer<ffi.Char>, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> VideoCapture_Open_Async(
  VideoCapture self,
  ffi.Pointer<ffi.Char> uri,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VideoCapture, Mat, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VideoCapture_Read(
  VideoCapture self,
  Mat buf,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoCapture, imp1.CvCallback_2)>()
external ffi.Pointer<CvStatus> VideoCapture_Read_Async(
  VideoCapture self,
  imp1.CvCallback_2 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoCapture)>()
external ffi.Pointer<CvStatus> VideoCapture_Release(
  VideoCapture self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoCapture, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> VideoCapture_Release_Async(
  VideoCapture self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoCapture, ffi.Int, ffi.Double)>()
external ffi.Pointer<CvStatus> VideoCapture_Set(
  VideoCapture self,
  int prop,
  double param,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, ffi.Int, ffi.Double, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> VideoCapture_Set_Async(
  VideoCapture self,
  int prop,
  double param,
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoCapture, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> VideoCapture_getBackendName(
  VideoCapture self,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

@ffi.Native<ffi.Void Function(VideoWriterPtr)>()
external void VideoWriter_Close(
  VideoWriterPtr self,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Char, ffi.Char, ffi.Char, ffi.Char, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VideoWriter_Fourcc(
  int c1,
  int c2,
  int c3,
  int c4,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        ffi.Char, ffi.Char, ffi.Char, ffi.Char, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> VideoWriter_Fourcc_Async(
  int c1,
  int c2,
  int c3,
  int c4,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoWriter, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<CvStatus> VideoWriter_IsOpened(
  VideoWriter self,
  ffi.Pointer<ffi.Int> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoWriter, imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> VideoWriter_IsOpened_Async(
  VideoWriter self,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(ffi.Pointer<VideoWriter>)>()
external ffi.Pointer<CvStatus> VideoWriter_New(
  ffi.Pointer<VideoWriter> rval,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> VideoWriter_New_Async(
  imp1.CvCallback_1 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VideoWriter, ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>, ffi.Double, ffi.Int, ffi.Int, ffi.Bool)>()
external ffi.Pointer<CvStatus> VideoWriter_Open(
  VideoWriter self,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Char> codec,
  double fps,
  int width,
  int height,
  bool isColor,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoWriter,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        ffi.Double,
        ffi.Int,
        ffi.Int,
        ffi.Bool,
        imp1.CvCallback_1)>()
external ffi.Pointer<CvStatus> VideoWriter_Open_Async(
  VideoWriter self,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Char> codec,
  double fps,
  int width,
  int height,
  bool isColor,
  imp1.CvCallback_1 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoWriter)>()
external ffi.Pointer<CvStatus> VideoWriter_Release(
  VideoWriter self,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoWriter, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> VideoWriter_Release_Async(
  VideoWriter self,
  imp1.CvCallback_0 callback,
);

@ffi.Native<ffi.Pointer<CvStatus> Function(VideoWriter, Mat)>()
external ffi.Pointer<CvStatus> VideoWriter_Write(
  VideoWriter self,
  Mat img,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(VideoWriter, Mat, imp1.CvCallback_0)>()
external ffi.Pointer<CvStatus> VideoWriter_Write_Async(
  VideoWriter self,
  Mat img,
  imp1.CvCallback_0 callback,
);

@ffi.Native<
    ffi.Pointer<CvStatus> Function(
        VideoWriter, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<CvStatus> VideoWriter_getBackendName(
  VideoWriter self,
  ffi.Pointer<ffi.Pointer<ffi.Char>> rval,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BackgroundSubtractorKNNPtr)>>
      get BackgroundSubtractorKNN_Close =>
          ffi.Native.addressOf(self.BackgroundSubtractorKNN_Close);
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(BackgroundSubtractorMOG2Ptr)>>
      get BackgroundSubtractorMOG2_Close =>
          ffi.Native.addressOf(self.BackgroundSubtractorMOG2_Close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KalmanFilterPtr)>>
      get KalmanFilter_Close => ffi.Native.addressOf(self.KalmanFilter_Close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(TrackerMILPtr)>>
      get TrackerMIL_Close => ffi.Native.addressOf(self.TrackerMIL_Close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(VideoCapturePtr)>>
      get VideoCapture_Close => ffi.Native.addressOf(self.VideoCapture_Close);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(VideoWriterPtr)>>
      get VideoWriter_Close => ffi.Native.addressOf(self.VideoWriter_Close);
}

final class BackgroundSubtractorKNN extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BackgroundSubtractorKNNPtr = ffi.Pointer<BackgroundSubtractorKNN>;

final class BackgroundSubtractorMOG2 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef BackgroundSubtractorMOG2Ptr = ffi.Pointer<BackgroundSubtractorMOG2>;
typedef CvStatus = imp1.CvStatus;

final class KalmanFilter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef KalmanFilterPtr = ffi.Pointer<KalmanFilter>;
typedef Mat = imp1.Mat;
typedef Rect = imp1.Rect;
typedef Size = imp1.Size;
typedef TermCriteria = imp1.TermCriteria;

final class Tracker extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class TrackerGOTURN extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef TrackerGOTURNPtr = ffi.Pointer<TrackerGOTURN>;

final class TrackerMIL extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef TrackerMILPtr = ffi.Pointer<TrackerMIL>;
typedef TrackerPtr = ffi.Pointer<Tracker>;
typedef VecF32 = imp1.VecF32;
typedef VecPoint2f = imp1.VecPoint2f;
typedef VecUChar = imp1.VecUChar;

final class VideoCapture extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VideoCapturePtr = ffi.Pointer<VideoCapture>;

final class VideoWriter extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef VideoWriterPtr = ffi.Pointer<VideoWriter>;
